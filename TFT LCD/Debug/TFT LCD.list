
TFT LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004140  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  08004304  08004304  00005304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004974  08004974  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004974  08004974  00005974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800497c  0800497c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800497c  0800497c  0000597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004980  08004980  00005980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004984  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000068  080049ec  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080049ec  000062d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3d8  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002317  00000000  00000000  00015470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00017788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c18  00000000  00000000  00018708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002329f  00000000  00000000  00019320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bbf  00000000  00000000  0003c5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5183  00000000  00000000  0004e17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f0  00000000  00000000  00123344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00127b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080042ec 	.word	0x080042ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	080042ec 	.word	0x080042ec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80004fc:	1d39      	adds	r1, r7, #4
 80004fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000502:	2201      	movs	r2, #1
 8000504:	4803      	ldr	r0, [pc, #12]	@ (8000514 <__io_putchar+0x20>)
 8000506:	f002 fe89 	bl	800321c <HAL_UART_Transmit>
   return ch;
 800050a:	687b      	ldr	r3, [r7, #4]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000124 	.word	0x20000124

08000518 <TFT_LCD_Protocols>:

void TFT_LCD_Protocols()
{tft_fn(); // TFT 설정 초기화
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af02      	add	r7, sp, #8
 800051e:	f000 fc5b 	bl	8000dd8 <tft_fn>
fill(COLOR_WHITE); // 화면을 흰색으로 채움
 8000522:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000526:	f000 ff93 	bl	8001450 <fill>
draw_string(0, 8, COLOR_BLACK, 2, "MCSTECH"); // "MCSTECH" 문자열을 검은색으로 크기 2로 표시
 800052a:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <TFT_LCD_Protocols+0x5c>)
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2302      	movs	r3, #2
 8000530:	2200      	movs	r2, #0
 8000532:	2108      	movs	r1, #8
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fc94 	bl	8000e62 <draw_string>
draw_string(0, 40, COLOR_RED, 2, "InKang"); // "InKang" 문자열을 빨간색으로 크기 2로 표시
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <TFT_LCD_Protocols+0x60>)
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2302      	movs	r3, #2
 8000540:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000544:	2128      	movs	r1, #40	@ 0x28
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fc8b 	bl	8000e62 <draw_string>
draw_string(0, 80, COLOR_BLUEVIOLET, 2, "Namhoon"); // "Namhoon" 문자열을 보라색으로 크기 2로 표시
 800054c:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <TFT_LCD_Protocols+0x64>)
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2302      	movs	r3, #2
 8000552:	f648 125c 	movw	r2, #35164	@ 0x895c
 8000556:	2150      	movs	r1, #80	@ 0x50
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fc82 	bl	8000e62 <draw_string>
draw_string(0, 120, COLOR_BLUE, 2, "24.04.25"); // "24.04.25" 문자열을 파란색으로 크기 2로 표시
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <TFT_LCD_Protocols+0x68>)
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2302      	movs	r3, #2
 8000564:	221f      	movs	r2, #31
 8000566:	2178      	movs	r1, #120	@ 0x78
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fc7a 	bl	8000e62 <draw_string>
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	08004304 	.word	0x08004304
 8000578:	0800430c 	.word	0x0800430c
 800057c:	08004314 	.word	0x08004314
 8000580:	0800431c 	.word	0x0800431c

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f001 f8c6 	bl	8001718 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f824 	bl	80005d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f924 	bl	80007dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f8f8 	bl	8000788 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000598:	f000 f88a 	bl	80006b0 <MX_SPI2_Init>
  MX_TIM6_Init();
 800059c:	f000 f8be 	bl	800071c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
    printf("?��?????????????????????????????????????????????��\r\n");
 80005a0:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <main+0x44>)
 80005a2:	f003 fb0f 	bl	8003bc4 <puts>
    printf("?��  Created on: 2024. 4. 23.                  ?��\r\n");
 80005a6:	4809      	ldr	r0, [pc, #36]	@ (80005cc <main+0x48>)
 80005a8:	f003 fb0c 	bl	8003bc4 <puts>
    printf("?��  Production: K                             ?��\r\n");
 80005ac:	4808      	ldr	r0, [pc, #32]	@ (80005d0 <main+0x4c>)
 80005ae:	f003 fb09 	bl	8003bc4 <puts>
    printf("?��  Distributor:  MCSTECH Company             ?��\r\n");
 80005b2:	4808      	ldr	r0, [pc, #32]	@ (80005d4 <main+0x50>)
 80005b4:	f003 fb06 	bl	8003bc4 <puts>
    printf("?��?????????????????????????????????????????????��\r\n");
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <main+0x44>)
 80005ba:	f003 fb03 	bl	8003bc4 <puts>
 draw_string(0, 80, COLOR_BLUEVIOLET, 2, "Namhoon");
 draw_string(0, 120, COLOR_BLUE, 2, "24.04.25");*/
// draw_string(0, 80, COLOR_BLUEVIOLET, 2, "Namhoon");
// fillRectangle(100, 0, 0, 20, COLOR_BROWN);

 TFT_LCD_Protocols();
 80005be:	f7ff ffab 	bl	8000518 <TFT_LCD_Protocols>
  //  draw_char(10, 10, 0, COLOR_BLUE, 10);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <main+0x3e>
 80005c6:	bf00      	nop
 80005c8:	08004328 	.word	0x08004328
 80005cc:	08004364 	.word	0x08004364
 80005d0:	080043a0 	.word	0x080043a0
 80005d4:	080043dc 	.word	0x080043dc

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	@ 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fbcc 	bl	8003d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a28      	ldr	r2, [pc, #160]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <SystemClock_Config+0xd4>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000650:	2348      	movs	r3, #72	@ 0x48
 8000652:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fecb 	bl	8002400 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000670:	f000 f94c 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	2102      	movs	r1, #2
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fb6b 	bl	8001d6c <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800069c:	f000 f936 	bl	800090c <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	@ 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006b4:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	@ (8000718 <MX_SPI2_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006d0:	2202      	movs	r2, #2
 80006d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006e4:	2228      	movs	r2, #40	@ 0x28
 80006e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_SPI2_Init+0x64>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_SPI2_Init+0x64>)
 8000702:	f002 f91b 	bl	800293c <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 f8fe 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000084 	.word	0x20000084
 8000718:	40003800 	.word	0x40003800

0800071c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <MX_TIM6_Init+0x64>)
 800072c:	4a15      	ldr	r2, [pc, #84]	@ (8000784 <MX_TIM6_Init+0x68>)
 800072e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_TIM6_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_TIM6_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800073c:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <MX_TIM6_Init+0x64>)
 800073e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000742:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_TIM6_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800074a:	480d      	ldr	r0, [pc, #52]	@ (8000780 <MX_TIM6_Init+0x64>)
 800074c:	f002 fb9e 	bl	8002e8c <HAL_TIM_Base_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000756:	f000 f8d9 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	@ (8000780 <MX_TIM6_Init+0x64>)
 8000768:	f002 fc8c 	bl	8003084 <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000772:	f000 f8cb 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000dc 	.word	0x200000dc
 8000784:	40001000 	.word	0x40001000

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f002 fcdc 	bl	800317c <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f89f 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000124 	.word	0x20000124
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b41      	ldr	r3, [pc, #260]	@ (80008fc <MX_GPIO_Init+0x120>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a40      	ldr	r2, [pc, #256]	@ (80008fc <MX_GPIO_Init+0x120>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b3e      	ldr	r3, [pc, #248]	@ (80008fc <MX_GPIO_Init+0x120>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b3a      	ldr	r3, [pc, #232]	@ (80008fc <MX_GPIO_Init+0x120>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a39      	ldr	r2, [pc, #228]	@ (80008fc <MX_GPIO_Init+0x120>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b37      	ldr	r3, [pc, #220]	@ (80008fc <MX_GPIO_Init+0x120>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b33      	ldr	r3, [pc, #204]	@ (80008fc <MX_GPIO_Init+0x120>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a32      	ldr	r2, [pc, #200]	@ (80008fc <MX_GPIO_Init+0x120>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b30      	ldr	r3, [pc, #192]	@ (80008fc <MX_GPIO_Init+0x120>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b2c      	ldr	r3, [pc, #176]	@ (80008fc <MX_GPIO_Init+0x120>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a2b      	ldr	r2, [pc, #172]	@ (80008fc <MX_GPIO_Init+0x120>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <MX_GPIO_Init+0x120>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2107      	movs	r1, #7
 8000866:	4826      	ldr	r0, [pc, #152]	@ (8000900 <MX_GPIO_Init+0x124>)
 8000868:	f001 fa66 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2120      	movs	r1, #32
 8000870:	4824      	ldr	r0, [pc, #144]	@ (8000904 <MX_GPIO_Init+0x128>)
 8000872:	f001 fa61 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800087c:	4822      	ldr	r0, [pc, #136]	@ (8000908 <MX_GPIO_Init+0x12c>)
 800087e:	f001 fa5b 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000882:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000888:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4819      	ldr	r0, [pc, #100]	@ (8000900 <MX_GPIO_Init+0x124>)
 800089a:	f001 f8b9 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED5_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin|LED6_Pin;
 800089e:	2307      	movs	r3, #7
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4812      	ldr	r0, [pc, #72]	@ (8000900 <MX_GPIO_Init+0x124>)
 80008b6:	f001 f8ab 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ba:	2320      	movs	r3, #32
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	@ (8000904 <MX_GPIO_Init+0x128>)
 80008d2:	f001 f89d 	bl	8001a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80008d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <MX_GPIO_Init+0x12c>)
 80008f0:	f001 f88e 	bl	8001a10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	@ 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020800 	.word	0x40020800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020400 	.word	0x40020400

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	@ (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000930:	6453      	str	r3, [r2, #68]	@ 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800095a:	2007      	movs	r0, #7
 800095c:	f001 f824 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	@ 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	@ (80009f0 <HAL_SPI_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12c      	bne.n	80009e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <HAL_SPI_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <HAL_SPI_MspInit+0x88>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_SPI_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <HAL_SPI_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <HAL_SPI_MspInit+0x88>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <HAL_SPI_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009c6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d8:	2305      	movs	r3, #5
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <HAL_SPI_MspInit+0x8c>)
 80009e4:	f001 f814 	bl	8001a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	@ 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40003800 	.word	0x40003800
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020400 	.word	0x40020400

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0b      	ldr	r2, [pc, #44]	@ (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d10d      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a09      	ldr	r2, [pc, #36]	@ (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a18:	f043 0310 	orr.w	r3, r3, #16
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <HAL_TIM_Base_MspInit+0x40>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40001000 	.word	0x40001000
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ac4 <HAL_UART_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12b      	bne.n	8000aba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a10      	ldr	r2, [pc, #64]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_UART_MspInit+0x8c>)
 8000ab6:	f000 ffab 	bl	8001a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	@ 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 fe49 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e00a      	b.n	8000b56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b40:	f3af 8000 	nop.w
 8000b44:	4601      	mov	r1, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	60ba      	str	r2, [r7, #8]
 8000b4c:	b2ca      	uxtb	r2, r1
 8000b4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3301      	adds	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	dbf0      	blt.n	8000b40 <_read+0x12>
  }

  return len;
 8000b5e:	687b      	ldr	r3, [r7, #4]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	e009      	b.n	8000b8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1c5a      	adds	r2, r3, #1
 8000b7e:	60ba      	str	r2, [r7, #8]
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fcb6 	bl	80004f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	dbf1      	blt.n	8000b7a <_write+0x12>
  }
  return len;
 8000b96:	687b      	ldr	r3, [r7, #4]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_close>:

int _close(int file)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bc8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_isatty>:

int _isatty(int file)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000be0:	2301      	movs	r3, #1
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b085      	sub	sp, #20
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f003 f8f2 	bl	8003e20 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20020000 	.word	0x20020000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	2000016c 	.word	0x2000016c
 8000c70:	200002d8 	.word	0x200002d8

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <HSPI_WRITE>:
        // 유효하지 않은 문자일 경우 NULL 반환
        return NULL;
    }
}

void HSPI_WRITE(uint8_t data) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
    while (!__HAL_SPI_GET_FLAG(HSPI_TFTLCD, SPI_FLAG_TXE));
 8000ca2:	bf00      	nop
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <HSPI_WRITE+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d1f8      	bne.n	8000ca4 <HSPI_WRITE+0xc>
    HAL_SPI_Transmit(HSPI_TFTLCD, &data, 1, TFT_SPI_TIMEOUT);
 8000cb2:	1df9      	adds	r1, r7, #7
 8000cb4:	2364      	movs	r3, #100	@ 0x64
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <HSPI_WRITE+0x40>)
 8000cba:	f001 fec8 	bl	8002a4e <HAL_SPI_Transmit>
    while (!__HAL_SPI_GET_FLAG(HSPI_TFTLCD, SPI_FLAG_TXE));
 8000cbe:	bf00      	nop
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <HSPI_WRITE+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d1f8      	bne.n	8000cc0 <HSPI_WRITE+0x28>
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000084 	.word	0x20000084

08000cdc <_writeCommand16>:

void _writeCommand16(uint16_t command) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
    SPI_DC_LOW();
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2102      	movs	r1, #2
 8000cea:	480f      	ldr	r0, [pc, #60]	@ (8000d28 <_writeCommand16+0x4c>)
 8000cec:	f001 f824 	bl	8001d38 <HAL_GPIO_WritePin>
    SPI_CS_LOW();
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cf6:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <_writeCommand16+0x50>)
 8000cf8:	f001 f81e 	bl	8001d38 <HAL_GPIO_WritePin>
    HSPI_WRITE(command >> 8);
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	0a1b      	lsrs	r3, r3, #8
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ffc7 	bl	8000c98 <HSPI_WRITE>
    HSPI_WRITE(0x00FF & command);
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ffc2 	bl	8000c98 <HSPI_WRITE>
    SPI_CS_HIGH();
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d1a:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <_writeCommand16+0x50>)
 8000d1c:	f001 f80c 	bl	8001d38 <HAL_GPIO_WritePin>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	40020400 	.word	0x40020400

08000d30 <_writeData16>:

void _writeData16(uint16_t data) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
    SPI_DC_HIGH();
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	480f      	ldr	r0, [pc, #60]	@ (8000d7c <_writeData16+0x4c>)
 8000d40:	f000 fffa 	bl	8001d38 <HAL_GPIO_WritePin>
    SPI_CS_LOW();
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d4a:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <_writeData16+0x50>)
 8000d4c:	f000 fff4 	bl	8001d38 <HAL_GPIO_WritePin>
    HSPI_WRITE(data >> 8);
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff9d 	bl	8000c98 <HSPI_WRITE>
    HSPI_WRITE(0x00FF & data);
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff98 	bl	8000c98 <HSPI_WRITE>
    SPI_CS_HIGH();
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d6e:	4804      	ldr	r0, [pc, #16]	@ (8000d80 <_writeData16+0x50>)
 8000d70:	f000 ffe2 	bl	8001d38 <HAL_GPIO_WritePin>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	40020400 	.word	0x40020400

08000d84 <_writeRegister>:

static void _writeRegister(uint16_t reg, uint16_t data) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	80fb      	strh	r3, [r7, #6]
 8000d90:	4613      	mov	r3, r2
 8000d92:	80bb      	strh	r3, [r7, #4]
    _writeCommand16(reg);
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ffa0 	bl	8000cdc <_writeCommand16>
    _writeData16(data);
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ffc6 	bl	8000d30 <_writeData16>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <swap_char>:
void swap_char(char *num1, char *num2) {
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	char temp = *num2;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	781a      	ldrb	r2, [r3, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <tft_fn>:
static void tft_init();

tft_fn(int ac, char *av[])
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
    printf("TFT LCD-TEST\n");
 8000de2:	4806      	ldr	r0, [pc, #24]	@ (8000dfc <tft_fn+0x24>)
 8000de4:	f002 feee 	bl	8003bc4 <puts>
	LED_GPIO_Port->BSRR = LED_Pin;
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <tft_fn+0x28>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	619a      	str	r2, [r3, #24]
	tft_init();
 8000dee:	f000 fb5d 	bl	80014ac <tft_init>
}
 8000df2:	bf00      	nop
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	08004418 	.word	0x08004418
 8000e00:	40020800 	.word	0x40020800

08000e04 <drawPixel>:
void drawPixel(char x, char y, unsigned int colour) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	603a      	str	r2, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	460b      	mov	r3, r1
 8000e12:	71bb      	strb	r3, [r7, #6]
    //If we are in landscape view then translate -90 degrees
    if(LANDSCAPE) {
        swap_char(&x, &y);
 8000e14:	1dba      	adds	r2, r7, #6
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ffc6 	bl	8000dac <swap_char>
         y = ILI9225_LCD_WIDTH - y;
 8000e20:	79ba      	ldrb	r2, [r7, #6]
 8000e22:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	71bb      	strb	r3, [r7, #6]
    }
    
    //Set the x, y position that we want to write to
    __setWindow(x, y, x+1, y+1);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	4619      	mov	r1, r3
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	f000 f9ba 	bl	80011b4 <__setWindow>
    _writeData16(colour >> 8);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff72 	bl	8000d30 <_writeData16>
    _writeData16(colour & 0xFF);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff6b 	bl	8000d30 <_writeData16>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <draw_string>:


void draw_string(char x, char y, unsigned int colour, char size, char *str) {
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b088      	sub	sp, #32
 8000e66:	af02      	add	r7, sp, #8
 8000e68:	603a      	str	r2, [r7, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	460b      	mov	r3, r1
 8000e72:	71bb      	strb	r3, [r7, #6]
 8000e74:	4613      	mov	r3, r2
 8000e76:	717b      	strb	r3, [r7, #5]
    
    //Work out the size of each character
    int char_width = size * 9;
 8000e78:	797a      	ldrb	r2, [r7, #5]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	4413      	add	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
    //Iterate through each character in the string
    int counter = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8000e86:	e015      	b.n	8000eb4 <draw_string+0x52>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 8000e88:	79fa      	ldrb	r2, [r7, #7]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	6939      	ldr	r1, [r7, #16]
 8000e8e:	fb01 f303 	mul.w	r3, r1, r3
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 8000e96:	79b9      	ldrb	r1, [r7, #6]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	6a3a      	ldr	r2, [r7, #32]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	797b      	ldrb	r3, [r7, #5]
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f000 f80f 	bl	8000ecc <draw_char>
        //Next character
        counter++;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	6a3a      	ldr	r2, [r7, #32]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1e3      	bne.n	8000e88 <draw_string+0x26>
    }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <draw_char>:

void draw_char(char x, char y, char c, unsigned int colour, char size) {
 8000ecc:	b5b0      	push	{r4, r5, r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	71bb      	strb	r3, [r7, #6]
 8000edc:	4613      	mov	r3, r2
 8000ede:	717b      	strb	r3, [r7, #5]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 8000ee0:	797b      	ldrb	r3, [r7, #5]
 8000ee2:	3b20      	subs	r3, #32
 8000ee4:	60fb      	str	r3, [r7, #12]
     //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e063      	b.n	8000fb4 <draw_char+0xe8>

        line = FontLarge[font_index][12 - i];
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f1c3 010c 	rsb	r1, r3, #12
 8000ef2:	4834      	ldr	r0, [pc, #208]	@ (8000fc4 <draw_char+0xf8>)
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	4403      	add	r3, r0
 8000f02:	440b      	add	r3, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	72fb      	strb	r3, [r7, #11]
        
        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	e04c      	b.n	8000fa8 <draw_char+0xdc>
            if(line & (0x01 << j)) {
 8000f0e:	7afa      	ldrb	r2, [r7, #11]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	fa42 f303 	asr.w	r3, r2, r3
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d041      	beq.n	8000fa2 <draw_char+0xd6>
                if(size == 1) {
 8000f1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d110      	bne.n	8000f48 <draw_char+0x7c>
                    //If we are just doing the smallest size font then do a single pixel each
                    drawPixel(x+(8-j), y+i, colour);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	79fa      	ldrb	r2, [r7, #7]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3308      	adds	r3, #8
 8000f32:	b2d8      	uxtb	r0, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff ff5f 	bl	8000e04 <drawPixel>
 8000f46:	e02c      	b.n	8000fa2 <draw_char+0xd6>
                }
                else {
                    // do a small box to represent each pixel
                    fillRectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	f1c3 0308 	rsb	r3, r3, #8
 8000f50:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8000f54:	fb01 f303 	mul.w	r3, r1, r3
 8000f58:	18d0      	adds	r0, r2, r3
 8000f5a:	79ba      	ldrb	r2, [r7, #6]
 8000f5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f60:	6979      	ldr	r1, [r7, #20]
 8000f62:	fb01 f303 	mul.w	r3, r1, r3
 8000f66:	18d4      	adds	r4, r2, r3
 8000f68:	79fa      	ldrb	r2, [r7, #7]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	f1c3 0308 	rsb	r3, r3, #8
 8000f70:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8000f74:	fb01 f303 	mul.w	r3, r1, r3
 8000f78:	441a      	add	r2, r3
 8000f7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f7e:	18d5      	adds	r5, r2, r3
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f86:	6979      	ldr	r1, [r7, #20]
 8000f88:	fb01 f303 	mul.w	r3, r1, r3
 8000f8c:	441a      	add	r2, r3
 8000f8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f92:	441a      	add	r2, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	462a      	mov	r2, r5
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	f000 f9f5 	bl	800138c <fillRectangle>
        for(j=0; j<8; j++) {
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b07      	cmp	r3, #7
 8000fac:	ddaf      	ble.n	8000f0e <draw_char+0x42>
    for(i=0; i<13; i++ ) {
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b0c      	cmp	r3, #12
 8000fb8:	dd98      	ble.n	8000eec <draw_char+0x20>
                }
            }
        }
    }
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc4:	08004440 	.word	0x08004440

08000fc8 <startWrite>:

void startWrite() {}
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <endWrite>:
void endWrite() {}
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <setBacklight>:
#define delay  HAL_Delay

static int _blState, _orientation, _maxX, _maxY, _bgColor;

void setBacklight(int flag)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	_blState = flag;
 8000fec:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <setBacklight+0x1c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000170 	.word	0x20000170

08001004 <setOrientation>:
void setOrientation(uint8_t orientation) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]

    _orientation = orientation % 4;
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	4a19      	ldr	r2, [pc, #100]	@ (800107c <setOrientation+0x78>)
 8001016:	6013      	str	r3, [r2, #0]

    switch (_orientation) {
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <setOrientation+0x78>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d827      	bhi.n	8001070 <setOrientation+0x6c>
 8001020:	a201      	add	r2, pc, #4	@ (adr r2, 8001028 <setOrientation+0x24>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001039 	.word	0x08001039
 800102c:	08001047 	.word	0x08001047
 8001030:	08001055 	.word	0x08001055
 8001034:	08001063 	.word	0x08001063
    case 0:
        _maxX = ILI9225_LCD_WIDTH;
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <setOrientation+0x7c>)
 800103a:	22b0      	movs	r2, #176	@ 0xb0
 800103c:	601a      	str	r2, [r3, #0]
        _maxY = ILI9225_LCD_HEIGHT;
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <setOrientation+0x80>)
 8001040:	22dc      	movs	r2, #220	@ 0xdc
 8001042:	601a      	str	r2, [r3, #0]
        break;
 8001044:	e014      	b.n	8001070 <setOrientation+0x6c>
    case 1:
        _maxX = ILI9225_LCD_HEIGHT;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <setOrientation+0x7c>)
 8001048:	22dc      	movs	r2, #220	@ 0xdc
 800104a:	601a      	str	r2, [r3, #0]
        _maxY = ILI9225_LCD_WIDTH;
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <setOrientation+0x80>)
 800104e:	22b0      	movs	r2, #176	@ 0xb0
 8001050:	601a      	str	r2, [r3, #0]
        break;
 8001052:	e00d      	b.n	8001070 <setOrientation+0x6c>
    case 2:
        _maxX = ILI9225_LCD_WIDTH;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <setOrientation+0x7c>)
 8001056:	22b0      	movs	r2, #176	@ 0xb0
 8001058:	601a      	str	r2, [r3, #0]
        _maxY = ILI9225_LCD_HEIGHT;
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <setOrientation+0x80>)
 800105c:	22dc      	movs	r2, #220	@ 0xdc
 800105e:	601a      	str	r2, [r3, #0]
        break;
 8001060:	e006      	b.n	8001070 <setOrientation+0x6c>
    case 3:
        _maxX = ILI9225_LCD_HEIGHT;
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <setOrientation+0x7c>)
 8001064:	22dc      	movs	r2, #220	@ 0xdc
 8001066:	601a      	str	r2, [r3, #0]
        _maxY = ILI9225_LCD_WIDTH;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <setOrientation+0x80>)
 800106a:	22b0      	movs	r2, #176	@ 0xb0
 800106c:	601a      	str	r2, [r3, #0]
        break;
 800106e:	bf00      	nop
    }
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000174 	.word	0x20000174
 8001080:	20000178 	.word	0x20000178
 8001084:	2000017c 	.word	0x2000017c

08001088 <setBackgroundColor>:

void setBackgroundColor(uint16_t color) {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
    _bgColor = color;
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4a03      	ldr	r2, [pc, #12]	@ (80010a4 <setBackgroundColor+0x1c>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20000180 	.word	0x20000180

080010a8 <_setWindow>:
    return _orientation;
}

#define min(a,b) a>b?b:a

void _setWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	4604      	mov	r4, r0
 80010b0:	4608      	mov	r0, r1
 80010b2:	4611      	mov	r1, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	4623      	mov	r3, r4
 80010b8:	80fb      	strh	r3, [r7, #6]
 80010ba:	4603      	mov	r3, r0
 80010bc:	80bb      	strh	r3, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	807b      	strh	r3, [r7, #2]
 80010c2:	4613      	mov	r3, r2
 80010c4:	803b      	strh	r3, [r7, #0]
    __setWindow( x0, y0, x1, y1, TopDown_L2R ); // default for drawing characters
 80010c6:	88f8      	ldrh	r0, [r7, #6]
 80010c8:	88b9      	ldrh	r1, [r7, #4]
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	883b      	ldrh	r3, [r7, #0]
 80010ce:	2407      	movs	r4, #7
 80010d0:	9400      	str	r4, [sp, #0]
 80010d2:	f000 f86f 	bl	80011b4 <__setWindow>
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd90      	pop	{r4, r7, pc}

080010de <_swap>:
/* 90�� */   { BottomUp_L2R, L2R_BottomUp, TopDown_L2R,  L2R_TopDown,  BottomUp_R2L, R2L_BottomUp, TopDown_R2L,  R2L_TopDown },
/*180�� */   { L2R_TopDown , TopDown_L2R,  R2L_TopDown,  TopDown_R2L,  L2R_BottomUp, BottomUp_L2R, R2L_BottomUp, BottomUp_R2L},
/*270�� */   { TopDown_R2L , R2L_TopDown,  BottomUp_R2L, R2L_BottomUp, TopDown_L2R,  L2R_TopDown,  BottomUp_L2R, L2R_BottomUp}
};

void _swap(uint16_t *a, uint16_t *b) {
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
    uint16_t w = *a;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	81fb      	strh	r3, [r7, #14]
    *a = *b;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	881a      	ldrh	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	801a      	strh	r2, [r3, #0]
    *b = w;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	89fa      	ldrh	r2, [r7, #14]
 80010fa:	801a      	strh	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_orientCoordinates>:

void _orientCoordinates(uint16_t x1, uint16_t y1) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	80fb      	strh	r3, [r7, #6]
 8001114:	4613      	mov	r3, r2
 8001116:	80bb      	strh	r3, [r7, #4]

    switch (_orientation) {
 8001118:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <_orientCoordinates+0xa0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d83f      	bhi.n	80011a0 <_orientCoordinates+0x98>
 8001120:	a201      	add	r2, pc, #4	@ (adr r2, 8001128 <_orientCoordinates+0x20>)
 8001122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001126:	bf00      	nop
 8001128:	0800119f 	.word	0x0800119f
 800112c:	08001139 	.word	0x08001139
 8001130:	08001159 	.word	0x08001159
 8001134:	0800117f 	.word	0x0800117f
        case 0:  // ok
            break;
        case 1: // ok
            y1 = _maxY - y1 - 1;
 8001138:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <_orientCoordinates+0xa4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	b29a      	uxth	r2, r3
 800113e:	88bb      	ldrh	r3, [r7, #4]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	3b01      	subs	r3, #1
 8001146:	b29b      	uxth	r3, r3
 8001148:	80bb      	strh	r3, [r7, #4]
            _swap(&x1, &y1);
 800114a:	1d3a      	adds	r2, r7, #4
 800114c:	1dbb      	adds	r3, r7, #6
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ffc4 	bl	80010de <_swap>
            break;
 8001156:	e023      	b.n	80011a0 <_orientCoordinates+0x98>
        case 2: // ok
            x1 = _maxX - x1 - 1;
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <_orientCoordinates+0xa8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	b29a      	uxth	r2, r3
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	b29b      	uxth	r3, r3
 8001164:	3b01      	subs	r3, #1
 8001166:	b29b      	uxth	r3, r3
 8001168:	80fb      	strh	r3, [r7, #6]
            y1 = _maxY - y1 - 1;
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <_orientCoordinates+0xa4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29a      	uxth	r2, r3
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	b29b      	uxth	r3, r3
 8001176:	3b01      	subs	r3, #1
 8001178:	b29b      	uxth	r3, r3
 800117a:	80bb      	strh	r3, [r7, #4]
            break;
 800117c:	e010      	b.n	80011a0 <_orientCoordinates+0x98>
        case 3: // ok
            x1 = _maxX - x1 - 1;
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <_orientCoordinates+0xa8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	b29a      	uxth	r2, r3
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	b29b      	uxth	r3, r3
 800118a:	3b01      	subs	r3, #1
 800118c:	b29b      	uxth	r3, r3
 800118e:	80fb      	strh	r3, [r7, #6]
            _swap(&x1, &y1);
 8001190:	1d3a      	adds	r2, r7, #4
 8001192:	1dbb      	adds	r3, r7, #6
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ffa1 	bl	80010de <_swap>
            break;
 800119c:	e000      	b.n	80011a0 <_orientCoordinates+0x98>
            break;
 800119e:	bf00      	nop
    }
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000174 	.word	0x20000174
 80011ac:	2000017c 	.word	0x2000017c
 80011b0:	20000178 	.word	0x20000178

080011b4 <__setWindow>:
#define DB_PRINT printf
void __setWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,int  mode) {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4604      	mov	r4, r0
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4623      	mov	r3, r4
 80011c4:	80fb      	strh	r3, [r7, #6]
 80011c6:	4603      	mov	r3, r0
 80011c8:	80bb      	strh	r3, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	807b      	strh	r3, [r7, #2]
 80011ce:	4613      	mov	r3, r2
 80011d0:	803b      	strh	r3, [r7, #0]

//    DB_PRINT( "setWindows( x0=%d, y0=%d, x1=%d, y1=%d, mode=%d", x0,y0,x1,y1,mode );

    // clip to TFT-Dimensions
    x0 = min( x0, (uint16_t) (_maxX-1) );
 80011d2:	4b60      	ldr	r3, [pc, #384]	@ (8001354 <__setWindow+0x1a0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	3b01      	subs	r3, #1
 80011da:	b29a      	uxth	r2, r3
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	4293      	cmp	r3, r2
 80011e0:	bf28      	it	cs
 80011e2:	4613      	movcs	r3, r2
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	80fb      	strh	r3, [r7, #6]
    x1 = min( x1, (uint16_t) (_maxX-1) );
 80011e8:	4b5a      	ldr	r3, [pc, #360]	@ (8001354 <__setWindow+0x1a0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	4293      	cmp	r3, r2
 80011f6:	bf28      	it	cs
 80011f8:	4613      	movcs	r3, r2
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	807b      	strh	r3, [r7, #2]
    y0 = min( y0, (uint16_t) (_maxY-1) );
 80011fe:	4b56      	ldr	r3, [pc, #344]	@ (8001358 <__setWindow+0x1a4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	3b01      	subs	r3, #1
 8001206:	b29a      	uxth	r2, r3
 8001208:	88bb      	ldrh	r3, [r7, #4]
 800120a:	4293      	cmp	r3, r2
 800120c:	bf28      	it	cs
 800120e:	4613      	movcs	r3, r2
 8001210:	b29b      	uxth	r3, r3
 8001212:	80bb      	strh	r3, [r7, #4]
    y1 = min( y1, (uint16_t) (_maxY-1) );
 8001214:	4b50      	ldr	r3, [pc, #320]	@ (8001358 <__setWindow+0x1a4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	3b01      	subs	r3, #1
 800121c:	b29a      	uxth	r2, r3
 800121e:	883b      	ldrh	r3, [r7, #0]
 8001220:	4293      	cmp	r3, r2
 8001222:	bf28      	it	cs
 8001224:	4613      	movcs	r3, r2
 8001226:	b29b      	uxth	r3, r3
 8001228:	803b      	strh	r3, [r7, #0]
    _orientCoordinates(x0, y0);
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	88ba      	ldrh	r2, [r7, #4]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff69 	bl	8001108 <_orientCoordinates>
    _orientCoordinates(x1, y1);
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	883a      	ldrh	r2, [r7, #0]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff63 	bl	8001108 <_orientCoordinates>

    if (x1<x0) _swap(&x0, &x1);
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	429a      	cmp	r2, r3
 8001248:	d205      	bcs.n	8001256 <__setWindow+0xa2>
 800124a:	1cba      	adds	r2, r7, #2
 800124c:	1dbb      	adds	r3, r7, #6
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff44 	bl	80010de <_swap>
    if (y1<y0) _swap(&y0, &y1);
 8001256:	883a      	ldrh	r2, [r7, #0]
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	d205      	bcs.n	800126a <__setWindow+0xb6>
 800125e:	463a      	mov	r2, r7
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff3a 	bl	80010de <_swap>

    startWrite();
 800126a:	f7ff fead 	bl	8000fc8 <startWrite>
    // autoincrement mode
    if ( _orientation > 0 ) mode = modeTab[_orientation-1][mode];
 800126e:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <__setWindow+0x1a8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	dd09      	ble.n	800128a <__setWindow+0xd6>
 8001276:	4b39      	ldr	r3, [pc, #228]	@ (800135c <__setWindow+0x1a8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3b01      	subs	r3, #1
 800127c:	4938      	ldr	r1, [pc, #224]	@ (8001360 <__setWindow+0x1ac>)
 800127e:	00da      	lsls	r2, r3, #3
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	4413      	add	r3, r2
 8001284:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
    _writeRegister(ILI9225_ENTRY_MODE, 0x1000 | ( mode<<3) );
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	b21b      	sxth	r3, r3
 8001290:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001294:	b21b      	sxth	r3, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	2003      	movs	r0, #3
 800129c:	f7ff fd72 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR1,x1);
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	4619      	mov	r1, r3
 80012a4:	2036      	movs	r0, #54	@ 0x36
 80012a6:	f7ff fd6d 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR2,x0);
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	4619      	mov	r1, r3
 80012ae:	2037      	movs	r0, #55	@ 0x37
 80012b0:	f7ff fd68 	bl	8000d84 <_writeRegister>

    _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR1,y1);
 80012b4:	883b      	ldrh	r3, [r7, #0]
 80012b6:	4619      	mov	r1, r3
 80012b8:	2038      	movs	r0, #56	@ 0x38
 80012ba:	f7ff fd63 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR2,y0);
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2039      	movs	r0, #57	@ 0x39
 80012c4:	f7ff fd5e 	bl	8000d84 <_writeRegister>
//    DB_PRINT( "gedreht: x0=%d, y0=%d, x1=%d, y1=%d, mode=%d", x0,y0,x1,y1,mode );
    // starting position within window and increment/decrement direction
    switch ( mode>>1 ) {
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	105b      	asrs	r3, r3, #1
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d837      	bhi.n	8001340 <__setWindow+0x18c>
 80012d0:	a201      	add	r2, pc, #4	@ (adr r2, 80012d8 <__setWindow+0x124>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	080012e9 	.word	0x080012e9
 80012dc:	080012ff 	.word	0x080012ff
 80012e0:	08001315 	.word	0x08001315
 80012e4:	0800132b 	.word	0x0800132b
        case 0:
            _writeRegister(ILI9225_RAM_ADDR_SET1,x1);
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	4619      	mov	r1, r3
 80012ec:	2020      	movs	r0, #32
 80012ee:	f7ff fd49 	bl	8000d84 <_writeRegister>
            _writeRegister(ILI9225_RAM_ADDR_SET2,y1);
 80012f2:	883b      	ldrh	r3, [r7, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	2021      	movs	r0, #33	@ 0x21
 80012f8:	f7ff fd44 	bl	8000d84 <_writeRegister>
            break;
 80012fc:	e020      	b.n	8001340 <__setWindow+0x18c>
        case 1:
            _writeRegister(ILI9225_RAM_ADDR_SET1,x0);
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4619      	mov	r1, r3
 8001302:	2020      	movs	r0, #32
 8001304:	f7ff fd3e 	bl	8000d84 <_writeRegister>
            _writeRegister(ILI9225_RAM_ADDR_SET2,y1);
 8001308:	883b      	ldrh	r3, [r7, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	2021      	movs	r0, #33	@ 0x21
 800130e:	f7ff fd39 	bl	8000d84 <_writeRegister>
            break;
 8001312:	e015      	b.n	8001340 <__setWindow+0x18c>
        case 2:
            _writeRegister(ILI9225_RAM_ADDR_SET1,x1);
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4619      	mov	r1, r3
 8001318:	2020      	movs	r0, #32
 800131a:	f7ff fd33 	bl	8000d84 <_writeRegister>
            _writeRegister(ILI9225_RAM_ADDR_SET2,y0);
 800131e:	88bb      	ldrh	r3, [r7, #4]
 8001320:	4619      	mov	r1, r3
 8001322:	2021      	movs	r0, #33	@ 0x21
 8001324:	f7ff fd2e 	bl	8000d84 <_writeRegister>
            break;
 8001328:	e00a      	b.n	8001340 <__setWindow+0x18c>
        case 3:
            _writeRegister(ILI9225_RAM_ADDR_SET1,x0);
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	4619      	mov	r1, r3
 800132e:	2020      	movs	r0, #32
 8001330:	f7ff fd28 	bl	8000d84 <_writeRegister>
            _writeRegister(ILI9225_RAM_ADDR_SET2,y0);
 8001334:	88bb      	ldrh	r3, [r7, #4]
 8001336:	4619      	mov	r1, r3
 8001338:	2021      	movs	r0, #33	@ 0x21
 800133a:	f7ff fd23 	bl	8000d84 <_writeRegister>
            break;
 800133e:	bf00      	nop
    }
    _writeCommand16( ILI9225_GRAM_DATA_REG );
 8001340:	2022      	movs	r0, #34	@ 0x22
 8001342:	f7ff fccb 	bl	8000cdc <_writeCommand16>
    //_writeRegister(ILI9225_RAM_ADDR_SET1,x0);
    //_writeRegister(ILI9225_RAM_ADDR_SET2,y0);

    //_writeCommand(0x00, 0x22);

    endWrite();
 8001346:	f7ff fe46 	bl	8000fd6 <endWrite>
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	20000178 	.word	0x20000178
 8001358:	2000017c 	.word	0x2000017c
 800135c:	20000174 	.word	0x20000174
 8001360:	08004914 	.word	0x08004914

08001364 <_resetWindow>:


void _resetWindow() {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
    _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF);
 8001368:	21af      	movs	r1, #175	@ 0xaf
 800136a:	2036      	movs	r0, #54	@ 0x36
 800136c:	f7ff fd0a 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000);
 8001370:	2100      	movs	r1, #0
 8001372:	2037      	movs	r0, #55	@ 0x37
 8001374:	f7ff fd06 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB);
 8001378:	21db      	movs	r1, #219	@ 0xdb
 800137a:	2038      	movs	r0, #56	@ 0x38
 800137c:	f7ff fd02 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000);
 8001380:	2100      	movs	r1, #0
 8001382:	2039      	movs	r0, #57	@ 0x39
 8001384:	f7ff fcfe 	bl	8000d84 <_writeRegister>

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <fillRectangle>:
void fillRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	4611      	mov	r1, r2
 8001398:	461a      	mov	r2, r3
 800139a:	4623      	mov	r3, r4
 800139c:	80fb      	strh	r3, [r7, #6]
 800139e:	4603      	mov	r3, r0
 80013a0:	80bb      	strh	r3, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	807b      	strh	r3, [r7, #2]
 80013a6:	4613      	mov	r3, r2
 80013a8:	803b      	strh	r3, [r7, #0]

    _setWindow(x1, y1, x2, y2);
 80013aa:	883b      	ldrh	r3, [r7, #0]
 80013ac:	887a      	ldrh	r2, [r7, #2]
 80013ae:	88b9      	ldrh	r1, [r7, #4]
 80013b0:	88f8      	ldrh	r0, [r7, #6]
 80013b2:	f7ff fe79 	bl	80010a8 <_setWindow>

    startWrite();
 80013b6:	f7ff fe07 	bl	8000fc8 <startWrite>
    for (uint16_t t=(y2 - y1 + 1) * (x2 - x1 + 1); t > 0; t--)
 80013ba:	883a      	ldrh	r2, [r7, #0]
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	3301      	adds	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	8879      	ldrh	r1, [r7, #2]
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	1acb      	subs	r3, r1, r3
 80013ca:	3301      	adds	r3, #1
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	fb12 f303 	smulbb	r3, r2, r3
 80013d2:	81fb      	strh	r3, [r7, #14]
 80013d4:	e006      	b.n	80013e4 <fillRectangle+0x58>
        _writeData16(color);
 80013d6:	8c3b      	ldrh	r3, [r7, #32]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fca9 	bl	8000d30 <_writeData16>
    for (uint16_t t=(y2 - y1 + 1) * (x2 - x1 + 1); t > 0; t--)
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	81fb      	strh	r3, [r7, #14]
 80013e4:	89fb      	ldrh	r3, [r7, #14]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f5      	bne.n	80013d6 <fillRectangle+0x4a>
    endWrite();
 80013ea:	f7ff fdf4 	bl	8000fd6 <endWrite>
    _resetWindow();
 80013ee:	f7ff ffb9 	bl	8001364 <_resetWindow>
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}
	...

080013fc <clear>:

void clear() {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af02      	add	r7, sp, #8
    uint8_t old = _orientation;
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <clear+0x48>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
    setOrientation(0);
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff fdfb 	bl	8001004 <setOrientation>
    fillRectangle(0, 0, _maxX - 1, _maxY - 1, COLOR_BLACK);
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <clear+0x4c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	3b01      	subs	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <clear+0x50>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	3b01      	subs	r3, #1
 8001420:	b29b      	uxth	r3, r3
 8001422:	2100      	movs	r1, #0
 8001424:	9100      	str	r1, [sp, #0]
 8001426:	2100      	movs	r1, #0
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff ffaf 	bl	800138c <fillRectangle>
    setOrientation(old);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fde7 	bl	8001004 <setOrientation>
    delay(10);
 8001436:	200a      	movs	r0, #10
 8001438:	f000 f9e0 	bl	80017fc <HAL_Delay>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000174 	.word	0x20000174
 8001448:	20000178 	.word	0x20000178
 800144c:	2000017c 	.word	0x2000017c

08001450 <fill>:

void fill(uint16_t color)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af02      	add	r7, sp, #8
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
    uint8_t old = _orientation;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <fill+0x50>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	73fb      	strb	r3, [r7, #15]
    setOrientation(0);
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff fdcf 	bl	8001004 <setOrientation>
    fillRectangle(0, 0, _maxX - 1, _maxY - 1, color);
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <fill+0x54>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	3b01      	subs	r3, #1
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <fill+0x58>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	b29b      	uxth	r3, r3
 8001476:	3b01      	subs	r3, #1
 8001478:	b299      	uxth	r1, r3
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	460b      	mov	r3, r1
 8001480:	2100      	movs	r1, #0
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff ff82 	bl	800138c <fillRectangle>
    setOrientation(old);
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fdba 	bl	8001004 <setOrientation>
    delay(10);
 8001490:	200a      	movs	r0, #10
 8001492:	f000 f9b3 	bl	80017fc <HAL_Delay>
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000174 	.word	0x20000174
 80014a4:	20000178 	.word	0x20000178
 80014a8:	2000017c 	.word	0x2000017c

080014ac <tft_init>:
static void tft_init()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	static int init_flag = 0;
//	if(init_flag == 0)
	{
		init_flag = 1;
 80014b0:	4b82      	ldr	r3, [pc, #520]	@ (80016bc <tft_init+0x210>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
		RST_GPIO_Port->BSRR = RST_Pin; // HIGH
 80014b6:	4b82      	ldr	r3, [pc, #520]	@ (80016c0 <tft_init+0x214>)
 80014b8:	2204      	movs	r2, #4
 80014ba:	619a      	str	r2, [r3, #24]
		HAL_Delay(1);
 80014bc:	2001      	movs	r0, #1
 80014be:	f000 f99d 	bl	80017fc <HAL_Delay>
		RST_GPIO_Port->BSRR = RST_Pin << 16; // LOW
 80014c2:	4b7f      	ldr	r3, [pc, #508]	@ (80016c0 <tft_init+0x214>)
 80014c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014c8:	619a      	str	r2, [r3, #24]
		HAL_Delay(10);
 80014ca:	200a      	movs	r0, #10
 80014cc:	f000 f996 	bl	80017fc <HAL_Delay>
		RST_GPIO_Port->BSRR = RST_Pin; // HIGH
 80014d0:	4b7b      	ldr	r3, [pc, #492]	@ (80016c0 <tft_init+0x214>)
 80014d2:	2204      	movs	r2, #4
 80014d4:	619a      	str	r2, [r3, #24]
		HAL_Delay(50);
 80014d6:	2032      	movs	r0, #50	@ 0x32
 80014d8:	f000 f990 	bl	80017fc <HAL_Delay>
	}

/* Set SS bit and direction output from S528 to S1 */
    startWrite();
 80014dc:	f7ff fd74 	bl	8000fc8 <startWrite>
    _writeRegister(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 80014e0:	2100      	movs	r1, #0
 80014e2:	2010      	movs	r0, #16
 80014e4:	f7ff fc4e 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 80014e8:	2100      	movs	r1, #0
 80014ea:	2011      	movs	r0, #17
 80014ec:	f7ff fc4a 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 80014f0:	2100      	movs	r1, #0
 80014f2:	2012      	movs	r0, #18
 80014f4:	f7ff fc46 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 80014f8:	2100      	movs	r1, #0
 80014fa:	2013      	movs	r0, #19
 80014fc:	f7ff fc42 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 8001500:	2100      	movs	r1, #0
 8001502:	2014      	movs	r0, #20
 8001504:	f7ff fc3e 	bl	8000d84 <_writeRegister>
    endWrite();
 8001508:	f7ff fd65 	bl	8000fd6 <endWrite>
    delay(40);
 800150c:	2028      	movs	r0, #40	@ 0x28
 800150e:	f000 f975 	bl	80017fc <HAL_Delay>

    // Power-on sequence
    startWrite();
 8001512:	f7ff fd59 	bl	8000fc8 <startWrite>
    _writeRegister(ILI9225_POWER_CTRL2, 0x0018); // Set APON,PON,AON,VCI1EN,VC
 8001516:	2118      	movs	r1, #24
 8001518:	2011      	movs	r0, #17
 800151a:	f7ff fc33 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL3, 0x6121); // Set BT,DC1,DC2,DC3
 800151e:	f246 1121 	movw	r1, #24865	@ 0x6121
 8001522:	2012      	movs	r0, #18
 8001524:	f7ff fc2e 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 8001528:	216f      	movs	r1, #111	@ 0x6f
 800152a:	2013      	movs	r0, #19
 800152c:	f7ff fc2a 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 8001530:	f644 115f 	movw	r1, #18783	@ 0x495f
 8001534:	2014      	movs	r0, #20
 8001536:	f7ff fc25 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL1, 0x0800); // Set SAP,DSTB,STB
 800153a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800153e:	2010      	movs	r0, #16
 8001540:	f7ff fc20 	bl	8000d84 <_writeRegister>
    endWrite();
 8001544:	f7ff fd47 	bl	8000fd6 <endWrite>
    delay(10);
 8001548:	200a      	movs	r0, #10
 800154a:	f000 f957 	bl	80017fc <HAL_Delay>
    startWrite();
 800154e:	f7ff fd3b 	bl	8000fc8 <startWrite>
    _writeRegister(ILI9225_POWER_CTRL2, 0x103B); // Set APON,PON,AON,VCI1EN,VC
 8001552:	f241 013b 	movw	r1, #4155	@ 0x103b
 8001556:	2011      	movs	r0, #17
 8001558:	f7ff fc14 	bl	8000d84 <_writeRegister>
    endWrite();
 800155c:	f7ff fd3b 	bl	8000fd6 <endWrite>
    delay(50);
 8001560:	2032      	movs	r0, #50	@ 0x32
 8001562:	f000 f94b 	bl	80017fc <HAL_Delay>

    startWrite();
 8001566:	f7ff fd2f 	bl	8000fc8 <startWrite>
    _writeRegister(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 800156a:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff fc08 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8001574:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001578:	2002      	movs	r0, #2
 800157a:	f7ff fc03 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_ENTRY_MODE, 0x1038); // set GRAM write direction and BGR=1.
 800157e:	f241 0138 	movw	r1, #4152	@ 0x1038
 8001582:	2003      	movs	r0, #3
 8001584:	f7ff fbfe 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8001588:	2100      	movs	r1, #0
 800158a:	2007      	movs	r0, #7
 800158c:	f7ff fbfa 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_BLANK_PERIOD_CTRL1, 0x0808); // set the back porch and front porch
 8001590:	f640 0108 	movw	r1, #2056	@ 0x808
 8001594:	2008      	movs	r0, #8
 8001596:	f7ff fbf5 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_FRAME_CYCLE_CTRL, 0x1100); // set the clocks number per line
 800159a:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 800159e:	200b      	movs	r0, #11
 80015a0:	f7ff fbf0 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 80015a4:	2100      	movs	r1, #0
 80015a6:	200c      	movs	r0, #12
 80015a8:	f7ff fbec 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_OSC_CTRL, 0x0D01); // Set Osc  /*0e01*/
 80015ac:	f640 5101 	movw	r1, #3329	@ 0xd01
 80015b0:	200f      	movs	r0, #15
 80015b2:	f7ff fbe7 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_VCI_RECYCLING, 0x0020); // Set VCI recycling
 80015b6:	2120      	movs	r1, #32
 80015b8:	2015      	movs	r0, #21
 80015ba:	f7ff fbe3 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 80015be:	2100      	movs	r1, #0
 80015c0:	2020      	movs	r0, #32
 80015c2:	f7ff fbdf 	bl	8000d84 <_writeRegister>
    _writeRegister(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 80015c6:	2100      	movs	r1, #0
 80015c8:	2021      	movs	r0, #33	@ 0x21
 80015ca:	f7ff fbdb 	bl	8000d84 <_writeRegister>

    /* Set GRAM area */
     _writeRegister(ILI9225_GATE_SCAN_CTRL, 0x0000);
 80015ce:	2100      	movs	r1, #0
 80015d0:	2030      	movs	r0, #48	@ 0x30
 80015d2:	f7ff fbd7 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB);
 80015d6:	21db      	movs	r1, #219	@ 0xdb
 80015d8:	2031      	movs	r0, #49	@ 0x31
 80015da:	f7ff fbd3 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000);
 80015de:	2100      	movs	r1, #0
 80015e0:	2032      	movs	r0, #50	@ 0x32
 80015e2:	f7ff fbcf 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000);
 80015e6:	2100      	movs	r1, #0
 80015e8:	2033      	movs	r0, #51	@ 0x33
 80015ea:	f7ff fbcb 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB);
 80015ee:	21db      	movs	r1, #219	@ 0xdb
 80015f0:	2034      	movs	r0, #52	@ 0x34
 80015f2:	f7ff fbc7 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_PARTIAL_DRIVING_POS2, 0x0000);
 80015f6:	2100      	movs	r1, #0
 80015f8:	2035      	movs	r0, #53	@ 0x35
 80015fa:	f7ff fbc3 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF);
 80015fe:	21af      	movs	r1, #175	@ 0xaf
 8001600:	2036      	movs	r0, #54	@ 0x36
 8001602:	f7ff fbbf 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000);
 8001606:	2100      	movs	r1, #0
 8001608:	2037      	movs	r0, #55	@ 0x37
 800160a:	f7ff fbbb 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB);
 800160e:	21db      	movs	r1, #219	@ 0xdb
 8001610:	2038      	movs	r0, #56	@ 0x38
 8001612:	f7ff fbb7 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000);
 8001616:	2100      	movs	r1, #0
 8001618:	2039      	movs	r0, #57	@ 0x39
 800161a:	f7ff fbb3 	bl	8000d84 <_writeRegister>

     /* Set GAMMA curve */
     _writeRegister(ILI9225_GAMMA_CTRL1, 0x0000);
 800161e:	2100      	movs	r1, #0
 8001620:	2050      	movs	r0, #80	@ 0x50
 8001622:	f7ff fbaf 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL2, 0x0808);
 8001626:	f640 0108 	movw	r1, #2056	@ 0x808
 800162a:	2051      	movs	r0, #81	@ 0x51
 800162c:	f7ff fbaa 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL3, 0x080A);
 8001630:	f640 010a 	movw	r1, #2058	@ 0x80a
 8001634:	2052      	movs	r0, #82	@ 0x52
 8001636:	f7ff fba5 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL4, 0x000A);
 800163a:	210a      	movs	r1, #10
 800163c:	2053      	movs	r0, #83	@ 0x53
 800163e:	f7ff fba1 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL5, 0x0A08);
 8001642:	f640 2108 	movw	r1, #2568	@ 0xa08
 8001646:	2054      	movs	r0, #84	@ 0x54
 8001648:	f7ff fb9c 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL6, 0x0808);
 800164c:	f640 0108 	movw	r1, #2056	@ 0x808
 8001650:	2055      	movs	r0, #85	@ 0x55
 8001652:	f7ff fb97 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL7, 0x0000);
 8001656:	2100      	movs	r1, #0
 8001658:	2056      	movs	r0, #86	@ 0x56
 800165a:	f7ff fb93 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL8, 0x0A00);
 800165e:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8001662:	2057      	movs	r0, #87	@ 0x57
 8001664:	f7ff fb8e 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL9, 0x0710);
 8001668:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 800166c:	2058      	movs	r0, #88	@ 0x58
 800166e:	f7ff fb89 	bl	8000d84 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL10, 0x0710);
 8001672:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8001676:	2059      	movs	r0, #89	@ 0x59
 8001678:	f7ff fb84 	bl	8000d84 <_writeRegister>

     _writeRegister(ILI9225_DISP_CTRL1, 0x0012);
 800167c:	2112      	movs	r1, #18
 800167e:	2007      	movs	r0, #7
 8001680:	f7ff fb80 	bl	8000d84 <_writeRegister>
     endWrite();
 8001684:	f7ff fca7 	bl	8000fd6 <endWrite>
     delay(50);
 8001688:	2032      	movs	r0, #50	@ 0x32
 800168a:	f000 f8b7 	bl	80017fc <HAL_Delay>
     startWrite();
 800168e:	f7ff fc9b 	bl	8000fc8 <startWrite>
     _writeRegister(ILI9225_DISP_CTRL1, 0x1017);
 8001692:	f241 0117 	movw	r1, #4119	@ 0x1017
 8001696:	2007      	movs	r0, #7
 8001698:	f7ff fb74 	bl	8000d84 <_writeRegister>
     endWrite();
 800169c:	f7ff fc9b 	bl	8000fd6 <endWrite>

#define true 1 // by isjeon
     // Turn on backlight
      setBacklight(true);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff fc9f 	bl	8000fe4 <setBacklight>
      setOrientation(0);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fcac 	bl	8001004 <setOrientation>
      // Initialize variables
#define COLOR_BLUE           0x001F      /*   0,   0, 255 */
#define COLOR_GREEN          0x07E0      /*   0, 255,   0 */
#define COLOR_RED            0xF800      /* 255,   0,   0 */

      setBackgroundColor( COLOR_BLACK  );
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff fceb 	bl	8001088 <setBackgroundColor>

      clear();
 80016b2:	f7ff fea3 	bl	80013fc <clear>


//      fill(COLOR_RED);
//      fill(COLOR_GREEN);
//      fill(COLOR_BLUE);
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000184 	.word	0x20000184
 80016c0:	40020800 	.word	0x40020800

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016c8:	f7ff fad4 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016cc:	480c      	ldr	r0, [pc, #48]	@ (8001700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ce:	490d      	ldr	r1, [pc, #52]	@ (8001704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f002 fb9b 	bl	8003e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7fe ff45 	bl	8000584 <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001708:	08004984 	.word	0x08004984
  ldr r2, =_sbss
 800170c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001710:	200002d8 	.word	0x200002d8

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <HAL_Init+0x40>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_Init+0x40>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <HAL_Init+0x40>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f931 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff f8e6 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f93b 	bl	80019f6 <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f911 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	@ (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008
 80017e0:	20000188 	.word	0x20000188

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000188 	.word	0x20000188

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d005      	beq.n	8001822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_Delay+0x44>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001822:	bf00      	nop
 8001824:	f7ff ffde 	bl	80017e4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f7      	bhi.n	8001824 <HAL_Delay+0x28>
  {
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800186c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	@ (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	@ (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	@ 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	@ 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff8e 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff47 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff5c 	bl	800188c <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff8e 	bl	80018fc <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5d 	bl	80018a8 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffb0 	bl	8001964 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e165      	b.n	8001cf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 8154 	bne.w	8001cf2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d005      	beq.n	8001a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d130      	bne.n	8001ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 0201 	and.w	r2, r3, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d017      	beq.n	8001b00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d123      	bne.n	8001b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0203 	and.w	r2, r3, #3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80ae 	beq.w	8001cf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d10 <HAL_GPIO_Init+0x300>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8001d10 <HAL_GPIO_Init+0x300>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d10 <HAL_GPIO_Init+0x300>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb2:	4a58      	ldr	r2, [pc, #352]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d18 <HAL_GPIO_Init+0x308>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d025      	beq.n	8001c2a <HAL_GPIO_Init+0x21a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4e      	ldr	r2, [pc, #312]	@ (8001d1c <HAL_GPIO_Init+0x30c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01f      	beq.n	8001c26 <HAL_GPIO_Init+0x216>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4d      	ldr	r2, [pc, #308]	@ (8001d20 <HAL_GPIO_Init+0x310>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x212>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d24 <HAL_GPIO_Init+0x314>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x20e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d28 <HAL_GPIO_Init+0x318>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x20a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4a      	ldr	r2, [pc, #296]	@ (8001d2c <HAL_GPIO_Init+0x31c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x206>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a49      	ldr	r2, [pc, #292]	@ (8001d30 <HAL_GPIO_Init+0x320>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x202>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x21c>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	@ (8001d14 <HAL_GPIO_Init+0x304>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6e:	4a31      	ldr	r2, [pc, #196]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c74:	4b2f      	ldr	r3, [pc, #188]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c98:	4a26      	ldr	r2, [pc, #152]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9e:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cec:	4a11      	ldr	r2, [pc, #68]	@ (8001d34 <HAL_GPIO_Init+0x324>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f ae96 	bls.w	8001a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
 8001d44:	4613      	mov	r3, r2
 8001d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d54:	e003      	b.n	8001d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d56:	887b      	ldrh	r3, [r7, #2]
 8001d58:	041a      	lsls	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	619a      	str	r2, [r3, #24]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0cc      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b68      	ldr	r3, [pc, #416]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d90c      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b65      	ldr	r3, [pc, #404]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b63      	ldr	r3, [pc, #396]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b8      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc0:	4b59      	ldr	r3, [pc, #356]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4a58      	ldr	r2, [pc, #352]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd8:	4b53      	ldr	r3, [pc, #332]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a52      	ldr	r2, [pc, #328]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de4:	4b50      	ldr	r3, [pc, #320]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	494d      	ldr	r1, [pc, #308]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d044      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b47      	ldr	r3, [pc, #284]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d119      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e07f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e067      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b37      	ldr	r3, [pc, #220]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4934      	ldr	r1, [pc, #208]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e5c:	f7ff fcc2 	bl	80017e4 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff fcbe 	bl	80017e4 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e04f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d20c      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e032      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4916      	ldr	r1, [pc, #88]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ede:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	490e      	ldr	r1, [pc, #56]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef2:	f000 f855 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	490a      	ldr	r1, [pc, #40]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	5ccb      	ldrb	r3, [r1, r3]
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	4a09      	ldr	r2, [pc, #36]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fc22 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023c00 	.word	0x40023c00
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	08004428 	.word	0x08004428
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	@ (8001f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000000 	.word	0x20000000

08001f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f54:	f7ff fff0 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	0a9b      	lsrs	r3, r3, #10
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	4903      	ldr	r1, [pc, #12]	@ (8001f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f66:	5ccb      	ldrb	r3, [r1, r3]
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800
 8001f74:	08004438 	.word	0x08004438

08001f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f7c:	f7ff ffdc 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0b5b      	lsrs	r3, r3, #13
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4903      	ldr	r1, [pc, #12]	@ (8001f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08004438 	.word	0x08004438

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa4:	b0ae      	sub	sp, #184	@ 0xb8
 8001fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fc6:	4bcb      	ldr	r3, [pc, #812]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	f200 8206 	bhi.w	80023e0 <HAL_RCC_GetSysClockFreq+0x440>
 8001fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fdc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08002011 	.word	0x08002011
 8001fe0:	080023e1 	.word	0x080023e1
 8001fe4:	080023e1 	.word	0x080023e1
 8001fe8:	080023e1 	.word	0x080023e1
 8001fec:	08002019 	.word	0x08002019
 8001ff0:	080023e1 	.word	0x080023e1
 8001ff4:	080023e1 	.word	0x080023e1
 8001ff8:	080023e1 	.word	0x080023e1
 8001ffc:	08002021 	.word	0x08002021
 8002000:	080023e1 	.word	0x080023e1
 8002004:	080023e1 	.word	0x080023e1
 8002008:	080023e1 	.word	0x080023e1
 800200c:	08002211 	.word	0x08002211
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002010:	4bb9      	ldr	r3, [pc, #740]	@ (80022f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002012:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002016:	e1e7      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002018:	4bb8      	ldr	r3, [pc, #736]	@ (80022fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800201a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800201e:	e1e3      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002020:	4bb4      	ldr	r3, [pc, #720]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800202c:	4bb1      	ldr	r3, [pc, #708]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d071      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002038:	4bae      	ldr	r3, [pc, #696]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	099b      	lsrs	r3, r3, #6
 800203e:	2200      	movs	r2, #0
 8002040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002044:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002048:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800204c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002050:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800205a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800205e:	4622      	mov	r2, r4
 8002060:	462b      	mov	r3, r5
 8002062:	f04f 0000 	mov.w	r0, #0
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	0159      	lsls	r1, r3, #5
 800206c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002070:	0150      	lsls	r0, r2, #5
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4621      	mov	r1, r4
 8002078:	1a51      	subs	r1, r2, r1
 800207a:	6439      	str	r1, [r7, #64]	@ 0x40
 800207c:	4629      	mov	r1, r5
 800207e:	eb63 0301 	sbc.w	r3, r3, r1
 8002082:	647b      	str	r3, [r7, #68]	@ 0x44
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002090:	4649      	mov	r1, r9
 8002092:	018b      	lsls	r3, r1, #6
 8002094:	4641      	mov	r1, r8
 8002096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800209a:	4641      	mov	r1, r8
 800209c:	018a      	lsls	r2, r1, #6
 800209e:	4641      	mov	r1, r8
 80020a0:	1a51      	subs	r1, r2, r1
 80020a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80020a4:	4649      	mov	r1, r9
 80020a6:	eb63 0301 	sbc.w	r3, r3, r1
 80020aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80020b8:	4649      	mov	r1, r9
 80020ba:	00cb      	lsls	r3, r1, #3
 80020bc:	4641      	mov	r1, r8
 80020be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020c2:	4641      	mov	r1, r8
 80020c4:	00ca      	lsls	r2, r1, #3
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	4622      	mov	r2, r4
 80020ce:	189b      	adds	r3, r3, r2
 80020d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80020d2:	462b      	mov	r3, r5
 80020d4:	460a      	mov	r2, r1
 80020d6:	eb42 0303 	adc.w	r3, r2, r3
 80020da:	637b      	str	r3, [r7, #52]	@ 0x34
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020e8:	4629      	mov	r1, r5
 80020ea:	024b      	lsls	r3, r1, #9
 80020ec:	4621      	mov	r1, r4
 80020ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020f2:	4621      	mov	r1, r4
 80020f4:	024a      	lsls	r2, r1, #9
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020fe:	2200      	movs	r2, #0
 8002100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002104:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002108:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800210c:	f7fe f87a 	bl	8000204 <__aeabi_uldivmod>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4613      	mov	r3, r2
 8002116:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800211a:	e067      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211c:	4b75      	ldr	r3, [pc, #468]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	099b      	lsrs	r3, r3, #6
 8002122:	2200      	movs	r2, #0
 8002124:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002128:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800212c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002134:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002136:	2300      	movs	r3, #0
 8002138:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800213a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800213e:	4622      	mov	r2, r4
 8002140:	462b      	mov	r3, r5
 8002142:	f04f 0000 	mov.w	r0, #0
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	0159      	lsls	r1, r3, #5
 800214c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002150:	0150      	lsls	r0, r2, #5
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4621      	mov	r1, r4
 8002158:	1a51      	subs	r1, r2, r1
 800215a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800215c:	4629      	mov	r1, r5
 800215e:	eb63 0301 	sbc.w	r3, r3, r1
 8002162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002170:	4649      	mov	r1, r9
 8002172:	018b      	lsls	r3, r1, #6
 8002174:	4641      	mov	r1, r8
 8002176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800217a:	4641      	mov	r1, r8
 800217c:	018a      	lsls	r2, r1, #6
 800217e:	4641      	mov	r1, r8
 8002180:	ebb2 0a01 	subs.w	sl, r2, r1
 8002184:	4649      	mov	r1, r9
 8002186:	eb63 0b01 	sbc.w	fp, r3, r1
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002196:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800219a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800219e:	4692      	mov	sl, r2
 80021a0:	469b      	mov	fp, r3
 80021a2:	4623      	mov	r3, r4
 80021a4:	eb1a 0303 	adds.w	r3, sl, r3
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	462b      	mov	r3, r5
 80021ac:	eb4b 0303 	adc.w	r3, fp, r3
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021be:	4629      	mov	r1, r5
 80021c0:	028b      	lsls	r3, r1, #10
 80021c2:	4621      	mov	r1, r4
 80021c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021c8:	4621      	mov	r1, r4
 80021ca:	028a      	lsls	r2, r1, #10
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021d4:	2200      	movs	r2, #0
 80021d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80021d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80021da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80021de:	f7fe f811 	bl	8000204 <__aeabi_uldivmod>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4613      	mov	r3, r2
 80021e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021ec:	4b41      	ldr	r3, [pc, #260]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	3301      	adds	r3, #1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80021fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800220e:	e0eb      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002210:	4b38      	ldr	r3, [pc, #224]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800221c:	4b35      	ldr	r3, [pc, #212]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d06b      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002228:	4b32      	ldr	r3, [pc, #200]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	2200      	movs	r2, #0
 8002230:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002232:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002234:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223a:	663b      	str	r3, [r7, #96]	@ 0x60
 800223c:	2300      	movs	r3, #0
 800223e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002240:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002244:	4622      	mov	r2, r4
 8002246:	462b      	mov	r3, r5
 8002248:	f04f 0000 	mov.w	r0, #0
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	0159      	lsls	r1, r3, #5
 8002252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002256:	0150      	lsls	r0, r2, #5
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4621      	mov	r1, r4
 800225e:	1a51      	subs	r1, r2, r1
 8002260:	61b9      	str	r1, [r7, #24]
 8002262:	4629      	mov	r1, r5
 8002264:	eb63 0301 	sbc.w	r3, r3, r1
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002276:	4659      	mov	r1, fp
 8002278:	018b      	lsls	r3, r1, #6
 800227a:	4651      	mov	r1, sl
 800227c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002280:	4651      	mov	r1, sl
 8002282:	018a      	lsls	r2, r1, #6
 8002284:	4651      	mov	r1, sl
 8002286:	ebb2 0801 	subs.w	r8, r2, r1
 800228a:	4659      	mov	r1, fp
 800228c:	eb63 0901 	sbc.w	r9, r3, r1
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800229c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022a4:	4690      	mov	r8, r2
 80022a6:	4699      	mov	r9, r3
 80022a8:	4623      	mov	r3, r4
 80022aa:	eb18 0303 	adds.w	r3, r8, r3
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	462b      	mov	r3, r5
 80022b2:	eb49 0303 	adc.w	r3, r9, r3
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022c4:	4629      	mov	r1, r5
 80022c6:	024b      	lsls	r3, r1, #9
 80022c8:	4621      	mov	r1, r4
 80022ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022ce:	4621      	mov	r1, r4
 80022d0:	024a      	lsls	r2, r1, #9
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022da:	2200      	movs	r2, #0
 80022dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80022de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80022e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022e4:	f7fd ff8e 	bl	8000204 <__aeabi_uldivmod>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4613      	mov	r3, r2
 80022ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022f2:	e065      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x420>
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002300:	4b3d      	ldr	r3, [pc, #244]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	2200      	movs	r2, #0
 8002308:	4618      	mov	r0, r3
 800230a:	4611      	mov	r1, r2
 800230c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002310:	653b      	str	r3, [r7, #80]	@ 0x50
 8002312:	2300      	movs	r3, #0
 8002314:	657b      	str	r3, [r7, #84]	@ 0x54
 8002316:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800231a:	4642      	mov	r2, r8
 800231c:	464b      	mov	r3, r9
 800231e:	f04f 0000 	mov.w	r0, #0
 8002322:	f04f 0100 	mov.w	r1, #0
 8002326:	0159      	lsls	r1, r3, #5
 8002328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800232c:	0150      	lsls	r0, r2, #5
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4641      	mov	r1, r8
 8002334:	1a51      	subs	r1, r2, r1
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	4649      	mov	r1, r9
 800233a:	eb63 0301 	sbc.w	r3, r3, r1
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800234c:	4659      	mov	r1, fp
 800234e:	018b      	lsls	r3, r1, #6
 8002350:	4651      	mov	r1, sl
 8002352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002356:	4651      	mov	r1, sl
 8002358:	018a      	lsls	r2, r1, #6
 800235a:	4651      	mov	r1, sl
 800235c:	1a54      	subs	r4, r2, r1
 800235e:	4659      	mov	r1, fp
 8002360:	eb63 0501 	sbc.w	r5, r3, r1
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	00eb      	lsls	r3, r5, #3
 800236e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002372:	00e2      	lsls	r2, r4, #3
 8002374:	4614      	mov	r4, r2
 8002376:	461d      	mov	r5, r3
 8002378:	4643      	mov	r3, r8
 800237a:	18e3      	adds	r3, r4, r3
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	464b      	mov	r3, r9
 8002380:	eb45 0303 	adc.w	r3, r5, r3
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002392:	4629      	mov	r1, r5
 8002394:	028b      	lsls	r3, r1, #10
 8002396:	4621      	mov	r1, r4
 8002398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800239c:	4621      	mov	r1, r4
 800239e:	028a      	lsls	r2, r1, #10
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023a8:	2200      	movs	r2, #0
 80023aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80023ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023b2:	f7fd ff27 	bl	8000204 <__aeabi_uldivmod>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4613      	mov	r3, r2
 80023bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0f1b      	lsrs	r3, r3, #28
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80023ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023de:	e003      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80023e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	37b8      	adds	r7, #184	@ 0xb8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	00f42400 	.word	0x00f42400

08002400 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e28d      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8083 	beq.w	8002526 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002420:	4b94      	ldr	r3, [pc, #592]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b04      	cmp	r3, #4
 800242a:	d019      	beq.n	8002460 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800242c:	4b91      	ldr	r3, [pc, #580]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002434:	2b08      	cmp	r3, #8
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002438:	4b8e      	ldr	r3, [pc, #568]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002440:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002444:	d00c      	beq.n	8002460 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b8b      	ldr	r3, [pc, #556]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d112      	bne.n	8002478 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b88      	ldr	r3, [pc, #544]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800245e:	d10b      	bne.n	8002478 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b84      	ldr	r3, [pc, #528]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d05b      	beq.n	8002524 <HAL_RCC_OscConfig+0x124>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d157      	bne.n	8002524 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e25a      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002480:	d106      	bne.n	8002490 <HAL_RCC_OscConfig+0x90>
 8002482:	4b7c      	ldr	r3, [pc, #496]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7b      	ldr	r2, [pc, #492]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e01d      	b.n	80024cc <HAL_RCC_OscConfig+0xcc>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0xb4>
 800249a:	4b76      	ldr	r3, [pc, #472]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a75      	ldr	r2, [pc, #468]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 80024a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b73      	ldr	r3, [pc, #460]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a72      	ldr	r2, [pc, #456]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xcc>
 80024b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7ff f986 	bl	80017e4 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff f982 	bl	80017e4 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	@ 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e21f      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b61      	ldr	r3, [pc, #388]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0xdc>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7ff f972 	bl	80017e4 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff f96e 	bl	80017e4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	@ 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e20b      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	4b57      	ldr	r3, [pc, #348]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x104>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d06f      	beq.n	8002612 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002532:	4b50      	ldr	r3, [pc, #320]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b00      	cmp	r3, #0
 800253c:	d017      	beq.n	800256e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800253e:	4b4d      	ldr	r3, [pc, #308]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002546:	2b08      	cmp	r3, #8
 8002548:	d105      	bne.n	8002556 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800254a:	4b4a      	ldr	r3, [pc, #296]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b47      	ldr	r3, [pc, #284]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b44      	ldr	r3, [pc, #272]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b41      	ldr	r3, [pc, #260]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x186>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1d3      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4937      	ldr	r1, [pc, #220]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b34      	ldr	r3, [pc, #208]	@ (8002678 <HAL_RCC_OscConfig+0x278>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7ff f91b 	bl	80017e4 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff f917 	bl	80017e4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1b4      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4925      	ldr	r1, [pc, #148]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <HAL_RCC_OscConfig+0x278>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff f8fa 	bl	80017e4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff f8f6 	bl	80017e4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e193      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d036      	beq.n	800268c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_RCC_OscConfig+0x27c>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7ff f8da 	bl	80017e4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff f8d6 	bl	80017e4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e173      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <HAL_RCC_OscConfig+0x274>)
 8002648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x234>
 8002652:	e01b      	b.n	800268c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_RCC_OscConfig+0x27c>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7ff f8c3 	bl	80017e4 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	e00e      	b.n	8002680 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002662:	f7ff f8bf 	bl	80017e4 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d907      	bls.n	8002680 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e15c      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
 8002674:	40023800 	.word	0x40023800
 8002678:	42470000 	.word	0x42470000
 800267c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	4b8a      	ldr	r3, [pc, #552]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ea      	bne.n	8002662 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8097 	beq.w	80027c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269e:	4b83      	ldr	r3, [pc, #524]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10f      	bne.n	80026ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	4b7f      	ldr	r3, [pc, #508]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	4a7e      	ldr	r2, [pc, #504]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ba:	4b7c      	ldr	r3, [pc, #496]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b79      	ldr	r3, [pc, #484]	@ (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d6:	4b76      	ldr	r3, [pc, #472]	@ (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a75      	ldr	r2, [pc, #468]	@ (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e2:	f7ff f87f 	bl	80017e4 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ea:	f7ff f87b 	bl	80017e4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e118      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	4b6c      	ldr	r3, [pc, #432]	@ (80028b0 <HAL_RCC_OscConfig+0x4b0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x31e>
 8002710:	4b66      	ldr	r3, [pc, #408]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002714:	4a65      	ldr	r2, [pc, #404]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	@ 0x70
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x358>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b05      	cmp	r3, #5
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x340>
 8002726:	4b61      	ldr	r3, [pc, #388]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	4a60      	ldr	r2, [pc, #384]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6713      	str	r3, [r2, #112]	@ 0x70
 8002732:	4b5e      	ldr	r3, [pc, #376]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002736:	4a5d      	ldr	r2, [pc, #372]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6713      	str	r3, [r2, #112]	@ 0x70
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0x358>
 8002740:	4b5a      	ldr	r3, [pc, #360]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002744:	4a59      	ldr	r2, [pc, #356]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	@ 0x70
 800274c:	4b57      	ldr	r3, [pc, #348]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002750:	4a56      	ldr	r2, [pc, #344]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002752:	f023 0304 	bic.w	r3, r3, #4
 8002756:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7ff f840 	bl	80017e4 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	e00a      	b.n	800277e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7ff f83c 	bl	80017e4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0d7      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277e:	4b4b      	ldr	r3, [pc, #300]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ee      	beq.n	8002768 <HAL_RCC_OscConfig+0x368>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7ff f82a 	bl	80017e4 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7ff f826 	bl	80017e4 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0c1      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027aa:	4b40      	ldr	r3, [pc, #256]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ee      	bne.n	8002794 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b3b      	ldr	r3, [pc, #236]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	4a3a      	ldr	r2, [pc, #232]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80ad 	beq.w	800292c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d2:	4b36      	ldr	r3, [pc, #216]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d060      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d145      	bne.n	8002872 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b33      	ldr	r3, [pc, #204]	@ (80028b4 <HAL_RCC_OscConfig+0x4b4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fffa 	bl	80017e4 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe fff6 	bl	80017e4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e093      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	4b29      	ldr	r3, [pc, #164]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	3b01      	subs	r3, #1
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	071b      	lsls	r3, r3, #28
 800283e:	491b      	ldr	r1, [pc, #108]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002844:	4b1b      	ldr	r3, [pc, #108]	@ (80028b4 <HAL_RCC_OscConfig+0x4b4>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe ffcb 	bl	80017e4 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe ffc7 	bl	80017e4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e064      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x452>
 8002870:	e05c      	b.n	800292c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <HAL_RCC_OscConfig+0x4b4>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe ffb4 	bl	80017e4 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe ffb0 	bl	80017e4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e04d      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_RCC_OscConfig+0x4ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x480>
 800289e:	e045      	b.n	800292c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e040      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40007000 	.word	0x40007000
 80028b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <HAL_RCC_OscConfig+0x538>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d030      	beq.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d129      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d122      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d119      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	3b01      	subs	r3, #1
 8002902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d10f      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d107      	bne.n	8002928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e07b      	b.n	8002a46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d108      	bne.n	8002968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800295e:	d009      	beq.n	8002974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
 8002966:	e005      	b.n	8002974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fd ffec 	bl	800096c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f8:	ea42 0103 	orr.w	r1, r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	f003 0104 	and.w	r1, r3, #4
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	f003 0210 	and.w	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b088      	sub	sp, #32
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_SPI_Transmit+0x22>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e12d      	b.n	8002ccc <HAL_SPI_Transmit+0x27e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a78:	f7fe feb4 	bl	80017e4 <HAL_GetTick>
 8002a7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d002      	beq.n	8002a94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a92:	e116      	b.n	8002cc2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_SPI_Transmit+0x52>
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aa4:	e10d      	b.n	8002cc2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	88fa      	ldrh	r2, [r7, #6]
 8002ac4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aec:	d10f      	bne.n	8002b0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002afc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b18:	2b40      	cmp	r3, #64	@ 0x40
 8002b1a:	d007      	beq.n	8002b2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b34:	d14f      	bne.n	8002bd6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_SPI_Transmit+0xf6>
 8002b3e:	8afb      	ldrh	r3, [r7, #22]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d142      	bne.n	8002bca <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	881a      	ldrh	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	1c9a      	adds	r2, r3, #2
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b68:	e02f      	b.n	8002bca <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d112      	bne.n	8002b9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	881a      	ldrh	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	1c9a      	adds	r2, r3, #2
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b9c:	e015      	b.n	8002bca <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b9e:	f7fe fe21 	bl	80017e4 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d803      	bhi.n	8002bb6 <HAL_SPI_Transmit+0x168>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d102      	bne.n	8002bbc <HAL_SPI_Transmit+0x16e>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d106      	bne.n	8002bca <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002bc8:	e07b      	b.n	8002cc2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ca      	bne.n	8002b6a <HAL_SPI_Transmit+0x11c>
 8002bd4:	e050      	b.n	8002c78 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_SPI_Transmit+0x196>
 8002bde:	8afb      	ldrh	r3, [r7, #22]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d144      	bne.n	8002c6e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	7812      	ldrb	r2, [r2, #0]
 8002bf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c0a:	e030      	b.n	8002c6e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d113      	bne.n	8002c42 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c40:	e015      	b.n	8002c6e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c42:	f7fe fdcf 	bl	80017e4 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d803      	bhi.n	8002c5a <HAL_SPI_Transmit+0x20c>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d102      	bne.n	8002c60 <HAL_SPI_Transmit+0x212>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002c6c:	e029      	b.n	8002cc2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1c9      	bne.n	8002c0c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	6839      	ldr	r1, [r7, #0]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f8b1 	bl	8002de4 <SPI_EndRxTxTransaction>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10a      	bne.n	8002cac <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e003      	b.n	8002cc2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002cca:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ce4:	f7fe fd7e 	bl	80017e4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cf4:	f7fe fd76 	bl	80017e4 <HAL_GetTick>
 8002cf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cfa:	4b39      	ldr	r3, [pc, #228]	@ (8002de0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	015b      	lsls	r3, r3, #5
 8002d00:	0d1b      	lsrs	r3, r3, #20
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	fb02 f303 	mul.w	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d0a:	e054      	b.n	8002db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d12:	d050      	beq.n	8002db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d14:	f7fe fd66 	bl	80017e4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d902      	bls.n	8002d2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d13d      	bne.n	8002da6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d42:	d111      	bne.n	8002d68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d4c:	d004      	beq.n	8002d58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d56:	d107      	bne.n	8002d68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d70:	d10f      	bne.n	8002d92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e017      	b.n	8002dd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d19b      	bne.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000

08002de4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2201      	movs	r2, #1
 8002df8:	2102      	movs	r1, #2
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7ff ff6a 	bl	8002cd4 <SPI_WaitFlagStateUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e032      	b.n	8002e7c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e16:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <SPI_EndRxTxTransaction+0xa0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8002e88 <SPI_EndRxTxTransaction+0xa4>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	0d5b      	lsrs	r3, r3, #21
 8002e22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e34:	d112      	bne.n	8002e5c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2180      	movs	r1, #128	@ 0x80
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ff47 	bl	8002cd4 <SPI_WaitFlagStateUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d016      	beq.n	8002e7a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e00f      	b.n	8002e7c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e72:	2b80      	cmp	r3, #128	@ 0x80
 8002e74:	d0f2      	beq.n	8002e5c <SPI_EndRxTxTransaction+0x78>
 8002e76:	e000      	b.n	8002e7a <SPI_EndRxTxTransaction+0x96>
        break;
 8002e78:	bf00      	nop
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000000 	.word	0x20000000
 8002e88:	165e9f81 	.word	0x165e9f81

08002e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e041      	b.n	8002f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd fda2 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f000 f82e 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a46      	ldr	r2, [pc, #280]	@ (8003058 <TIM_Base_SetConfig+0x12c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d013      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f4a:	d00f      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a43      	ldr	r2, [pc, #268]	@ (800305c <TIM_Base_SetConfig+0x130>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a42      	ldr	r2, [pc, #264]	@ (8003060 <TIM_Base_SetConfig+0x134>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d007      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a41      	ldr	r2, [pc, #260]	@ (8003064 <TIM_Base_SetConfig+0x138>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d003      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a40      	ldr	r2, [pc, #256]	@ (8003068 <TIM_Base_SetConfig+0x13c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d108      	bne.n	8002f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a35      	ldr	r2, [pc, #212]	@ (8003058 <TIM_Base_SetConfig+0x12c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d02b      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8c:	d027      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a32      	ldr	r2, [pc, #200]	@ (800305c <TIM_Base_SetConfig+0x130>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d023      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a31      	ldr	r2, [pc, #196]	@ (8003060 <TIM_Base_SetConfig+0x134>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01f      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a30      	ldr	r2, [pc, #192]	@ (8003064 <TIM_Base_SetConfig+0x138>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01b      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8003068 <TIM_Base_SetConfig+0x13c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d017      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800306c <TIM_Base_SetConfig+0x140>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003070 <TIM_Base_SetConfig+0x144>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00f      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8003074 <TIM_Base_SetConfig+0x148>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8003078 <TIM_Base_SetConfig+0x14c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800307c <TIM_Base_SetConfig+0x150>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a29      	ldr	r2, [pc, #164]	@ (8003080 <TIM_Base_SetConfig+0x154>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d108      	bne.n	8002ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a10      	ldr	r2, [pc, #64]	@ (8003058 <TIM_Base_SetConfig+0x12c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_Base_SetConfig+0xf8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a12      	ldr	r2, [pc, #72]	@ (8003068 <TIM_Base_SetConfig+0x13c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d103      	bne.n	800302c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f023 0201 	bic.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	611a      	str	r2, [r3, #16]
  }
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40010400 	.word	0x40010400
 800306c:	40014000 	.word	0x40014000
 8003070:	40014400 	.word	0x40014400
 8003074:	40014800 	.word	0x40014800
 8003078:	40001800 	.word	0x40001800
 800307c:	40001c00 	.word	0x40001c00
 8003080:	40002000 	.word	0x40002000

08003084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003098:	2302      	movs	r3, #2
 800309a:	e05a      	b.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a21      	ldr	r2, [pc, #132]	@ (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d022      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e8:	d01d      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003164 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d018      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003168 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1a      	ldr	r2, [pc, #104]	@ (800316c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00e      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a15      	ldr	r2, [pc, #84]	@ (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10c      	bne.n	8003140 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800312c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	4313      	orrs	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40010000 	.word	0x40010000
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40010400 	.word	0x40010400
 8003174:	40014000 	.word	0x40014000
 8003178:	40001800 	.word	0x40001800

0800317c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e042      	b.n	8003214 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd fc4c 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	@ 0x24
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f973 	bl	80034ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	@ 0x28
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b20      	cmp	r3, #32
 800323a:	d175      	bne.n	8003328 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_UART_Transmit+0x2c>
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e06e      	b.n	800332a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2221      	movs	r2, #33	@ 0x21
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800325a:	f7fe fac3 	bl	80017e4 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	88fa      	ldrh	r2, [r7, #6]
 800326a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003274:	d108      	bne.n	8003288 <HAL_UART_Transmit+0x6c>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d104      	bne.n	8003288 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	e003      	b.n	8003290 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800328c:	2300      	movs	r3, #0
 800328e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003290:	e02e      	b.n	80032f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2200      	movs	r2, #0
 800329a:	2180      	movs	r1, #128	@ 0x80
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f848 	bl	8003332 <UART_WaitOnFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e03a      	b.n	800332a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10b      	bne.n	80032d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	3302      	adds	r3, #2
 80032ce:	61bb      	str	r3, [r7, #24]
 80032d0:	e007      	b.n	80032e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	3301      	adds	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1cb      	bne.n	8003292 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	2140      	movs	r1, #64	@ 0x40
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f814 	bl	8003332 <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e006      	b.n	800332a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	e000      	b.n	800332a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003328:	2302      	movs	r3, #2
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	4613      	mov	r3, r2
 8003340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003342:	e03b      	b.n	80033bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d037      	beq.n	80033bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334c:	f7fe fa4a 	bl	80017e4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	6a3a      	ldr	r2, [r7, #32]
 8003358:	429a      	cmp	r2, r3
 800335a:	d302      	bcc.n	8003362 <UART_WaitOnFlagUntilTimeout+0x30>
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e03a      	b.n	80033dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d023      	beq.n	80033bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b80      	cmp	r3, #128	@ 0x80
 8003378:	d020      	beq.n	80033bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b40      	cmp	r3, #64	@ 0x40
 800337e:	d01d      	beq.n	80033bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b08      	cmp	r3, #8
 800338c:	d116      	bne.n	80033bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f81d 	bl	80033e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2208      	movs	r2, #8
 80033ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e00f      	b.n	80033dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d0b4      	beq.n	8003344 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b095      	sub	sp, #84	@ 0x54
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	330c      	adds	r3, #12
 80033f2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	330c      	adds	r3, #12
 800340a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800340c:	643a      	str	r2, [r7, #64]	@ 0x40
 800340e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003412:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800341a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e5      	bne.n	80033ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3314      	adds	r3, #20
 8003426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003440:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003442:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e5      	bne.n	8003420 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	2b01      	cmp	r3, #1
 800345a:	d119      	bne.n	8003490 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	60bb      	str	r3, [r7, #8]
   return(result);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f023 0310 	bic.w	r3, r3, #16
 8003472:	647b      	str	r3, [r7, #68]	@ 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800347c:	61ba      	str	r2, [r7, #24]
 800347e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6979      	ldr	r1, [r7, #20]
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	613b      	str	r3, [r7, #16]
   return(result);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e5      	bne.n	800345c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800349e:	bf00      	nop
 80034a0:	3754      	adds	r7, #84	@ 0x54
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b0:	b0c0      	sub	sp, #256	@ 0x100
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c8:	68d9      	ldr	r1, [r3, #12]
 80034ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	ea40 0301 	orr.w	r3, r0, r1
 80034d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003504:	f021 010c 	bic.w	r1, r1, #12
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003512:	430b      	orrs	r3, r1
 8003514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003526:	6999      	ldr	r1, [r3, #24]
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	ea40 0301 	orr.w	r3, r0, r1
 8003532:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b8f      	ldr	r3, [pc, #572]	@ (8003778 <UART_SetConfig+0x2cc>)
 800353c:	429a      	cmp	r2, r3
 800353e:	d005      	beq.n	800354c <UART_SetConfig+0xa0>
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4b8d      	ldr	r3, [pc, #564]	@ (800377c <UART_SetConfig+0x2d0>)
 8003548:	429a      	cmp	r2, r3
 800354a:	d104      	bne.n	8003556 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800354c:	f7fe fd14 	bl	8001f78 <HAL_RCC_GetPCLK2Freq>
 8003550:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003554:	e003      	b.n	800355e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003556:	f7fe fcfb 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 800355a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003568:	f040 810c 	bne.w	8003784 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800356c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003570:	2200      	movs	r2, #0
 8003572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003576:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800357a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800357e:	4622      	mov	r2, r4
 8003580:	462b      	mov	r3, r5
 8003582:	1891      	adds	r1, r2, r2
 8003584:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003586:	415b      	adcs	r3, r3
 8003588:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800358a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800358e:	4621      	mov	r1, r4
 8003590:	eb12 0801 	adds.w	r8, r2, r1
 8003594:	4629      	mov	r1, r5
 8003596:	eb43 0901 	adc.w	r9, r3, r1
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ae:	4690      	mov	r8, r2
 80035b0:	4699      	mov	r9, r3
 80035b2:	4623      	mov	r3, r4
 80035b4:	eb18 0303 	adds.w	r3, r8, r3
 80035b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035bc:	462b      	mov	r3, r5
 80035be:	eb49 0303 	adc.w	r3, r9, r3
 80035c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035da:	460b      	mov	r3, r1
 80035dc:	18db      	adds	r3, r3, r3
 80035de:	653b      	str	r3, [r7, #80]	@ 0x50
 80035e0:	4613      	mov	r3, r2
 80035e2:	eb42 0303 	adc.w	r3, r2, r3
 80035e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80035e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80035f0:	f7fc fe08 	bl	8000204 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4b61      	ldr	r3, [pc, #388]	@ (8003780 <UART_SetConfig+0x2d4>)
 80035fa:	fba3 2302 	umull	r2, r3, r3, r2
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	011c      	lsls	r4, r3, #4
 8003602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003606:	2200      	movs	r2, #0
 8003608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800360c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003610:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003614:	4642      	mov	r2, r8
 8003616:	464b      	mov	r3, r9
 8003618:	1891      	adds	r1, r2, r2
 800361a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800361c:	415b      	adcs	r3, r3
 800361e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003620:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003624:	4641      	mov	r1, r8
 8003626:	eb12 0a01 	adds.w	sl, r2, r1
 800362a:	4649      	mov	r1, r9
 800362c:	eb43 0b01 	adc.w	fp, r3, r1
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800363c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003644:	4692      	mov	sl, r2
 8003646:	469b      	mov	fp, r3
 8003648:	4643      	mov	r3, r8
 800364a:	eb1a 0303 	adds.w	r3, sl, r3
 800364e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003652:	464b      	mov	r3, r9
 8003654:	eb4b 0303 	adc.w	r3, fp, r3
 8003658:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003668:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800366c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003670:	460b      	mov	r3, r1
 8003672:	18db      	adds	r3, r3, r3
 8003674:	643b      	str	r3, [r7, #64]	@ 0x40
 8003676:	4613      	mov	r3, r2
 8003678:	eb42 0303 	adc.w	r3, r2, r3
 800367c:	647b      	str	r3, [r7, #68]	@ 0x44
 800367e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003682:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003686:	f7fc fdbd 	bl	8000204 <__aeabi_uldivmod>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4611      	mov	r1, r2
 8003690:	4b3b      	ldr	r3, [pc, #236]	@ (8003780 <UART_SetConfig+0x2d4>)
 8003692:	fba3 2301 	umull	r2, r3, r3, r1
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	2264      	movs	r2, #100	@ 0x64
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	1acb      	subs	r3, r1, r3
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036a6:	4b36      	ldr	r3, [pc, #216]	@ (8003780 <UART_SetConfig+0x2d4>)
 80036a8:	fba3 2302 	umull	r2, r3, r3, r2
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036b4:	441c      	add	r4, r3
 80036b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036c8:	4642      	mov	r2, r8
 80036ca:	464b      	mov	r3, r9
 80036cc:	1891      	adds	r1, r2, r2
 80036ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036d0:	415b      	adcs	r3, r3
 80036d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036d8:	4641      	mov	r1, r8
 80036da:	1851      	adds	r1, r2, r1
 80036dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80036de:	4649      	mov	r1, r9
 80036e0:	414b      	adcs	r3, r1
 80036e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80036f0:	4659      	mov	r1, fp
 80036f2:	00cb      	lsls	r3, r1, #3
 80036f4:	4651      	mov	r1, sl
 80036f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036fa:	4651      	mov	r1, sl
 80036fc:	00ca      	lsls	r2, r1, #3
 80036fe:	4610      	mov	r0, r2
 8003700:	4619      	mov	r1, r3
 8003702:	4603      	mov	r3, r0
 8003704:	4642      	mov	r2, r8
 8003706:	189b      	adds	r3, r3, r2
 8003708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800370c:	464b      	mov	r3, r9
 800370e:	460a      	mov	r2, r1
 8003710:	eb42 0303 	adc.w	r3, r2, r3
 8003714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003724:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800372c:	460b      	mov	r3, r1
 800372e:	18db      	adds	r3, r3, r3
 8003730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003732:	4613      	mov	r3, r2
 8003734:	eb42 0303 	adc.w	r3, r2, r3
 8003738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800373a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800373e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003742:	f7fc fd5f 	bl	8000204 <__aeabi_uldivmod>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4b0d      	ldr	r3, [pc, #52]	@ (8003780 <UART_SetConfig+0x2d4>)
 800374c:	fba3 1302 	umull	r1, r3, r3, r2
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	2164      	movs	r1, #100	@ 0x64
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	3332      	adds	r3, #50	@ 0x32
 800375e:	4a08      	ldr	r2, [pc, #32]	@ (8003780 <UART_SetConfig+0x2d4>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	f003 0207 	and.w	r2, r3, #7
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4422      	add	r2, r4
 8003772:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003774:	e106      	b.n	8003984 <UART_SetConfig+0x4d8>
 8003776:	bf00      	nop
 8003778:	40011000 	.word	0x40011000
 800377c:	40011400 	.word	0x40011400
 8003780:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003788:	2200      	movs	r2, #0
 800378a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800378e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003792:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003796:	4642      	mov	r2, r8
 8003798:	464b      	mov	r3, r9
 800379a:	1891      	adds	r1, r2, r2
 800379c:	6239      	str	r1, [r7, #32]
 800379e:	415b      	adcs	r3, r3
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037a6:	4641      	mov	r1, r8
 80037a8:	1854      	adds	r4, r2, r1
 80037aa:	4649      	mov	r1, r9
 80037ac:	eb43 0501 	adc.w	r5, r3, r1
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	00eb      	lsls	r3, r5, #3
 80037ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037be:	00e2      	lsls	r2, r4, #3
 80037c0:	4614      	mov	r4, r2
 80037c2:	461d      	mov	r5, r3
 80037c4:	4643      	mov	r3, r8
 80037c6:	18e3      	adds	r3, r4, r3
 80037c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037cc:	464b      	mov	r3, r9
 80037ce:	eb45 0303 	adc.w	r3, r5, r3
 80037d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037f2:	4629      	mov	r1, r5
 80037f4:	008b      	lsls	r3, r1, #2
 80037f6:	4621      	mov	r1, r4
 80037f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037fc:	4621      	mov	r1, r4
 80037fe:	008a      	lsls	r2, r1, #2
 8003800:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003804:	f7fc fcfe 	bl	8000204 <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4b60      	ldr	r3, [pc, #384]	@ (8003990 <UART_SetConfig+0x4e4>)
 800380e:	fba3 2302 	umull	r2, r3, r3, r2
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	011c      	lsls	r4, r3, #4
 8003816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800381a:	2200      	movs	r2, #0
 800381c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003820:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003824:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003828:	4642      	mov	r2, r8
 800382a:	464b      	mov	r3, r9
 800382c:	1891      	adds	r1, r2, r2
 800382e:	61b9      	str	r1, [r7, #24]
 8003830:	415b      	adcs	r3, r3
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003838:	4641      	mov	r1, r8
 800383a:	1851      	adds	r1, r2, r1
 800383c:	6139      	str	r1, [r7, #16]
 800383e:	4649      	mov	r1, r9
 8003840:	414b      	adcs	r3, r1
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003850:	4659      	mov	r1, fp
 8003852:	00cb      	lsls	r3, r1, #3
 8003854:	4651      	mov	r1, sl
 8003856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800385a:	4651      	mov	r1, sl
 800385c:	00ca      	lsls	r2, r1, #3
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	4603      	mov	r3, r0
 8003864:	4642      	mov	r2, r8
 8003866:	189b      	adds	r3, r3, r2
 8003868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800386c:	464b      	mov	r3, r9
 800386e:	460a      	mov	r2, r1
 8003870:	eb42 0303 	adc.w	r3, r2, r3
 8003874:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003882:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003890:	4649      	mov	r1, r9
 8003892:	008b      	lsls	r3, r1, #2
 8003894:	4641      	mov	r1, r8
 8003896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800389a:	4641      	mov	r1, r8
 800389c:	008a      	lsls	r2, r1, #2
 800389e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038a2:	f7fc fcaf 	bl	8000204 <__aeabi_uldivmod>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4611      	mov	r1, r2
 80038ac:	4b38      	ldr	r3, [pc, #224]	@ (8003990 <UART_SetConfig+0x4e4>)
 80038ae:	fba3 2301 	umull	r2, r3, r3, r1
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	2264      	movs	r2, #100	@ 0x64
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
 80038ba:	1acb      	subs	r3, r1, r3
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	3332      	adds	r3, #50	@ 0x32
 80038c0:	4a33      	ldr	r2, [pc, #204]	@ (8003990 <UART_SetConfig+0x4e4>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038cc:	441c      	add	r4, r3
 80038ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038d2:	2200      	movs	r2, #0
 80038d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80038d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80038d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038dc:	4642      	mov	r2, r8
 80038de:	464b      	mov	r3, r9
 80038e0:	1891      	adds	r1, r2, r2
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	415b      	adcs	r3, r3
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ec:	4641      	mov	r1, r8
 80038ee:	1851      	adds	r1, r2, r1
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	4649      	mov	r1, r9
 80038f4:	414b      	adcs	r3, r1
 80038f6:	607b      	str	r3, [r7, #4]
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003904:	4659      	mov	r1, fp
 8003906:	00cb      	lsls	r3, r1, #3
 8003908:	4651      	mov	r1, sl
 800390a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800390e:	4651      	mov	r1, sl
 8003910:	00ca      	lsls	r2, r1, #3
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	4603      	mov	r3, r0
 8003918:	4642      	mov	r2, r8
 800391a:	189b      	adds	r3, r3, r2
 800391c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800391e:	464b      	mov	r3, r9
 8003920:	460a      	mov	r2, r1
 8003922:	eb42 0303 	adc.w	r3, r2, r3
 8003926:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	663b      	str	r3, [r7, #96]	@ 0x60
 8003932:	667a      	str	r2, [r7, #100]	@ 0x64
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003940:	4649      	mov	r1, r9
 8003942:	008b      	lsls	r3, r1, #2
 8003944:	4641      	mov	r1, r8
 8003946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800394a:	4641      	mov	r1, r8
 800394c:	008a      	lsls	r2, r1, #2
 800394e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003952:	f7fc fc57 	bl	8000204 <__aeabi_uldivmod>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <UART_SetConfig+0x4e4>)
 800395c:	fba3 1302 	umull	r1, r3, r3, r2
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	2164      	movs	r1, #100	@ 0x64
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	3332      	adds	r3, #50	@ 0x32
 800396e:	4a08      	ldr	r2, [pc, #32]	@ (8003990 <UART_SetConfig+0x4e4>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	f003 020f 	and.w	r2, r3, #15
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4422      	add	r2, r4
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	bf00      	nop
 8003986:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800398a:	46bd      	mov	sp, r7
 800398c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003990:	51eb851f 	.word	0x51eb851f

08003994 <std>:
 8003994:	2300      	movs	r3, #0
 8003996:	b510      	push	{r4, lr}
 8003998:	4604      	mov	r4, r0
 800399a:	e9c0 3300 	strd	r3, r3, [r0]
 800399e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039a2:	6083      	str	r3, [r0, #8]
 80039a4:	8181      	strh	r1, [r0, #12]
 80039a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80039a8:	81c2      	strh	r2, [r0, #14]
 80039aa:	6183      	str	r3, [r0, #24]
 80039ac:	4619      	mov	r1, r3
 80039ae:	2208      	movs	r2, #8
 80039b0:	305c      	adds	r0, #92	@ 0x5c
 80039b2:	f000 f9e7 	bl	8003d84 <memset>
 80039b6:	4b0d      	ldr	r3, [pc, #52]	@ (80039ec <std+0x58>)
 80039b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80039ba:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <std+0x5c>)
 80039bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80039be:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <std+0x60>)
 80039c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80039c2:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <std+0x64>)
 80039c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80039c6:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <std+0x68>)
 80039c8:	6224      	str	r4, [r4, #32]
 80039ca:	429c      	cmp	r4, r3
 80039cc:	d006      	beq.n	80039dc <std+0x48>
 80039ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80039d2:	4294      	cmp	r4, r2
 80039d4:	d002      	beq.n	80039dc <std+0x48>
 80039d6:	33d0      	adds	r3, #208	@ 0xd0
 80039d8:	429c      	cmp	r4, r3
 80039da:	d105      	bne.n	80039e8 <std+0x54>
 80039dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80039e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039e4:	f000 ba46 	b.w	8003e74 <__retarget_lock_init_recursive>
 80039e8:	bd10      	pop	{r4, pc}
 80039ea:	bf00      	nop
 80039ec:	08003bd5 	.word	0x08003bd5
 80039f0:	08003bf7 	.word	0x08003bf7
 80039f4:	08003c2f 	.word	0x08003c2f
 80039f8:	08003c53 	.word	0x08003c53
 80039fc:	2000018c 	.word	0x2000018c

08003a00 <stdio_exit_handler>:
 8003a00:	4a02      	ldr	r2, [pc, #8]	@ (8003a0c <stdio_exit_handler+0xc>)
 8003a02:	4903      	ldr	r1, [pc, #12]	@ (8003a10 <stdio_exit_handler+0x10>)
 8003a04:	4803      	ldr	r0, [pc, #12]	@ (8003a14 <stdio_exit_handler+0x14>)
 8003a06:	f000 b869 	b.w	8003adc <_fwalk_sglue>
 8003a0a:	bf00      	nop
 8003a0c:	2000000c 	.word	0x2000000c
 8003a10:	08004175 	.word	0x08004175
 8003a14:	2000001c 	.word	0x2000001c

08003a18 <cleanup_stdio>:
 8003a18:	6841      	ldr	r1, [r0, #4]
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a4c <cleanup_stdio+0x34>)
 8003a1c:	4299      	cmp	r1, r3
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	4604      	mov	r4, r0
 8003a22:	d001      	beq.n	8003a28 <cleanup_stdio+0x10>
 8003a24:	f000 fba6 	bl	8004174 <_fflush_r>
 8003a28:	68a1      	ldr	r1, [r4, #8]
 8003a2a:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <cleanup_stdio+0x38>)
 8003a2c:	4299      	cmp	r1, r3
 8003a2e:	d002      	beq.n	8003a36 <cleanup_stdio+0x1e>
 8003a30:	4620      	mov	r0, r4
 8003a32:	f000 fb9f 	bl	8004174 <_fflush_r>
 8003a36:	68e1      	ldr	r1, [r4, #12]
 8003a38:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <cleanup_stdio+0x3c>)
 8003a3a:	4299      	cmp	r1, r3
 8003a3c:	d004      	beq.n	8003a48 <cleanup_stdio+0x30>
 8003a3e:	4620      	mov	r0, r4
 8003a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a44:	f000 bb96 	b.w	8004174 <_fflush_r>
 8003a48:	bd10      	pop	{r4, pc}
 8003a4a:	bf00      	nop
 8003a4c:	2000018c 	.word	0x2000018c
 8003a50:	200001f4 	.word	0x200001f4
 8003a54:	2000025c 	.word	0x2000025c

08003a58 <global_stdio_init.part.0>:
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <global_stdio_init.part.0+0x30>)
 8003a5c:	4c0b      	ldr	r4, [pc, #44]	@ (8003a8c <global_stdio_init.part.0+0x34>)
 8003a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a90 <global_stdio_init.part.0+0x38>)
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	4620      	mov	r0, r4
 8003a64:	2200      	movs	r2, #0
 8003a66:	2104      	movs	r1, #4
 8003a68:	f7ff ff94 	bl	8003994 <std>
 8003a6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a70:	2201      	movs	r2, #1
 8003a72:	2109      	movs	r1, #9
 8003a74:	f7ff ff8e 	bl	8003994 <std>
 8003a78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a82:	2112      	movs	r1, #18
 8003a84:	f7ff bf86 	b.w	8003994 <std>
 8003a88:	200002c4 	.word	0x200002c4
 8003a8c:	2000018c 	.word	0x2000018c
 8003a90:	08003a01 	.word	0x08003a01

08003a94 <__sfp_lock_acquire>:
 8003a94:	4801      	ldr	r0, [pc, #4]	@ (8003a9c <__sfp_lock_acquire+0x8>)
 8003a96:	f000 b9ee 	b.w	8003e76 <__retarget_lock_acquire_recursive>
 8003a9a:	bf00      	nop
 8003a9c:	200002cd 	.word	0x200002cd

08003aa0 <__sfp_lock_release>:
 8003aa0:	4801      	ldr	r0, [pc, #4]	@ (8003aa8 <__sfp_lock_release+0x8>)
 8003aa2:	f000 b9e9 	b.w	8003e78 <__retarget_lock_release_recursive>
 8003aa6:	bf00      	nop
 8003aa8:	200002cd 	.word	0x200002cd

08003aac <__sinit>:
 8003aac:	b510      	push	{r4, lr}
 8003aae:	4604      	mov	r4, r0
 8003ab0:	f7ff fff0 	bl	8003a94 <__sfp_lock_acquire>
 8003ab4:	6a23      	ldr	r3, [r4, #32]
 8003ab6:	b11b      	cbz	r3, 8003ac0 <__sinit+0x14>
 8003ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003abc:	f7ff bff0 	b.w	8003aa0 <__sfp_lock_release>
 8003ac0:	4b04      	ldr	r3, [pc, #16]	@ (8003ad4 <__sinit+0x28>)
 8003ac2:	6223      	str	r3, [r4, #32]
 8003ac4:	4b04      	ldr	r3, [pc, #16]	@ (8003ad8 <__sinit+0x2c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1f5      	bne.n	8003ab8 <__sinit+0xc>
 8003acc:	f7ff ffc4 	bl	8003a58 <global_stdio_init.part.0>
 8003ad0:	e7f2      	b.n	8003ab8 <__sinit+0xc>
 8003ad2:	bf00      	nop
 8003ad4:	08003a19 	.word	0x08003a19
 8003ad8:	200002c4 	.word	0x200002c4

08003adc <_fwalk_sglue>:
 8003adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae0:	4607      	mov	r7, r0
 8003ae2:	4688      	mov	r8, r1
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	2600      	movs	r6, #0
 8003ae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003aec:	f1b9 0901 	subs.w	r9, r9, #1
 8003af0:	d505      	bpl.n	8003afe <_fwalk_sglue+0x22>
 8003af2:	6824      	ldr	r4, [r4, #0]
 8003af4:	2c00      	cmp	r4, #0
 8003af6:	d1f7      	bne.n	8003ae8 <_fwalk_sglue+0xc>
 8003af8:	4630      	mov	r0, r6
 8003afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003afe:	89ab      	ldrh	r3, [r5, #12]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d907      	bls.n	8003b14 <_fwalk_sglue+0x38>
 8003b04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	d003      	beq.n	8003b14 <_fwalk_sglue+0x38>
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	4638      	mov	r0, r7
 8003b10:	47c0      	blx	r8
 8003b12:	4306      	orrs	r6, r0
 8003b14:	3568      	adds	r5, #104	@ 0x68
 8003b16:	e7e9      	b.n	8003aec <_fwalk_sglue+0x10>

08003b18 <_puts_r>:
 8003b18:	6a03      	ldr	r3, [r0, #32]
 8003b1a:	b570      	push	{r4, r5, r6, lr}
 8003b1c:	6884      	ldr	r4, [r0, #8]
 8003b1e:	4605      	mov	r5, r0
 8003b20:	460e      	mov	r6, r1
 8003b22:	b90b      	cbnz	r3, 8003b28 <_puts_r+0x10>
 8003b24:	f7ff ffc2 	bl	8003aac <__sinit>
 8003b28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b2a:	07db      	lsls	r3, r3, #31
 8003b2c:	d405      	bmi.n	8003b3a <_puts_r+0x22>
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	0598      	lsls	r0, r3, #22
 8003b32:	d402      	bmi.n	8003b3a <_puts_r+0x22>
 8003b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b36:	f000 f99e 	bl	8003e76 <__retarget_lock_acquire_recursive>
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	0719      	lsls	r1, r3, #28
 8003b3e:	d502      	bpl.n	8003b46 <_puts_r+0x2e>
 8003b40:	6923      	ldr	r3, [r4, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d135      	bne.n	8003bb2 <_puts_r+0x9a>
 8003b46:	4621      	mov	r1, r4
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f000 f8c5 	bl	8003cd8 <__swsetup_r>
 8003b4e:	b380      	cbz	r0, 8003bb2 <_puts_r+0x9a>
 8003b50:	f04f 35ff 	mov.w	r5, #4294967295
 8003b54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b56:	07da      	lsls	r2, r3, #31
 8003b58:	d405      	bmi.n	8003b66 <_puts_r+0x4e>
 8003b5a:	89a3      	ldrh	r3, [r4, #12]
 8003b5c:	059b      	lsls	r3, r3, #22
 8003b5e:	d402      	bmi.n	8003b66 <_puts_r+0x4e>
 8003b60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b62:	f000 f989 	bl	8003e78 <__retarget_lock_release_recursive>
 8003b66:	4628      	mov	r0, r5
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	da04      	bge.n	8003b78 <_puts_r+0x60>
 8003b6e:	69a2      	ldr	r2, [r4, #24]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	dc17      	bgt.n	8003ba4 <_puts_r+0x8c>
 8003b74:	290a      	cmp	r1, #10
 8003b76:	d015      	beq.n	8003ba4 <_puts_r+0x8c>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	6022      	str	r2, [r4, #0]
 8003b7e:	7019      	strb	r1, [r3, #0]
 8003b80:	68a3      	ldr	r3, [r4, #8]
 8003b82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b86:	3b01      	subs	r3, #1
 8003b88:	60a3      	str	r3, [r4, #8]
 8003b8a:	2900      	cmp	r1, #0
 8003b8c:	d1ed      	bne.n	8003b6a <_puts_r+0x52>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	da11      	bge.n	8003bb6 <_puts_r+0x9e>
 8003b92:	4622      	mov	r2, r4
 8003b94:	210a      	movs	r1, #10
 8003b96:	4628      	mov	r0, r5
 8003b98:	f000 f85f 	bl	8003c5a <__swbuf_r>
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d0d7      	beq.n	8003b50 <_puts_r+0x38>
 8003ba0:	250a      	movs	r5, #10
 8003ba2:	e7d7      	b.n	8003b54 <_puts_r+0x3c>
 8003ba4:	4622      	mov	r2, r4
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f000 f857 	bl	8003c5a <__swbuf_r>
 8003bac:	3001      	adds	r0, #1
 8003bae:	d1e7      	bne.n	8003b80 <_puts_r+0x68>
 8003bb0:	e7ce      	b.n	8003b50 <_puts_r+0x38>
 8003bb2:	3e01      	subs	r6, #1
 8003bb4:	e7e4      	b.n	8003b80 <_puts_r+0x68>
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	6022      	str	r2, [r4, #0]
 8003bbc:	220a      	movs	r2, #10
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e7ee      	b.n	8003ba0 <_puts_r+0x88>
	...

08003bc4 <puts>:
 8003bc4:	4b02      	ldr	r3, [pc, #8]	@ (8003bd0 <puts+0xc>)
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	f7ff bfa5 	b.w	8003b18 <_puts_r>
 8003bce:	bf00      	nop
 8003bd0:	20000018 	.word	0x20000018

08003bd4 <__sread>:
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bdc:	f000 f8fc 	bl	8003dd8 <_read_r>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	bfab      	itete	ge
 8003be4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003be6:	89a3      	ldrhlt	r3, [r4, #12]
 8003be8:	181b      	addge	r3, r3, r0
 8003bea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003bee:	bfac      	ite	ge
 8003bf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003bf2:	81a3      	strhlt	r3, [r4, #12]
 8003bf4:	bd10      	pop	{r4, pc}

08003bf6 <__swrite>:
 8003bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bfa:	461f      	mov	r7, r3
 8003bfc:	898b      	ldrh	r3, [r1, #12]
 8003bfe:	05db      	lsls	r3, r3, #23
 8003c00:	4605      	mov	r5, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	4616      	mov	r6, r2
 8003c06:	d505      	bpl.n	8003c14 <__swrite+0x1e>
 8003c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f000 f8d0 	bl	8003db4 <_lseek_r>
 8003c14:	89a3      	ldrh	r3, [r4, #12]
 8003c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c1e:	81a3      	strh	r3, [r4, #12]
 8003c20:	4632      	mov	r2, r6
 8003c22:	463b      	mov	r3, r7
 8003c24:	4628      	mov	r0, r5
 8003c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c2a:	f000 b8e7 	b.w	8003dfc <_write_r>

08003c2e <__sseek>:
 8003c2e:	b510      	push	{r4, lr}
 8003c30:	460c      	mov	r4, r1
 8003c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c36:	f000 f8bd 	bl	8003db4 <_lseek_r>
 8003c3a:	1c43      	adds	r3, r0, #1
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	bf15      	itete	ne
 8003c40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003c42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003c46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003c4a:	81a3      	strheq	r3, [r4, #12]
 8003c4c:	bf18      	it	ne
 8003c4e:	81a3      	strhne	r3, [r4, #12]
 8003c50:	bd10      	pop	{r4, pc}

08003c52 <__sclose>:
 8003c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c56:	f000 b89d 	b.w	8003d94 <_close_r>

08003c5a <__swbuf_r>:
 8003c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5c:	460e      	mov	r6, r1
 8003c5e:	4614      	mov	r4, r2
 8003c60:	4605      	mov	r5, r0
 8003c62:	b118      	cbz	r0, 8003c6c <__swbuf_r+0x12>
 8003c64:	6a03      	ldr	r3, [r0, #32]
 8003c66:	b90b      	cbnz	r3, 8003c6c <__swbuf_r+0x12>
 8003c68:	f7ff ff20 	bl	8003aac <__sinit>
 8003c6c:	69a3      	ldr	r3, [r4, #24]
 8003c6e:	60a3      	str	r3, [r4, #8]
 8003c70:	89a3      	ldrh	r3, [r4, #12]
 8003c72:	071a      	lsls	r2, r3, #28
 8003c74:	d501      	bpl.n	8003c7a <__swbuf_r+0x20>
 8003c76:	6923      	ldr	r3, [r4, #16]
 8003c78:	b943      	cbnz	r3, 8003c8c <__swbuf_r+0x32>
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f000 f82b 	bl	8003cd8 <__swsetup_r>
 8003c82:	b118      	cbz	r0, 8003c8c <__swbuf_r+0x32>
 8003c84:	f04f 37ff 	mov.w	r7, #4294967295
 8003c88:	4638      	mov	r0, r7
 8003c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	6922      	ldr	r2, [r4, #16]
 8003c90:	1a98      	subs	r0, r3, r2
 8003c92:	6963      	ldr	r3, [r4, #20]
 8003c94:	b2f6      	uxtb	r6, r6
 8003c96:	4283      	cmp	r3, r0
 8003c98:	4637      	mov	r7, r6
 8003c9a:	dc05      	bgt.n	8003ca8 <__swbuf_r+0x4e>
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	f000 fa68 	bl	8004174 <_fflush_r>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d1ed      	bne.n	8003c84 <__swbuf_r+0x2a>
 8003ca8:	68a3      	ldr	r3, [r4, #8]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	60a3      	str	r3, [r4, #8]
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	6022      	str	r2, [r4, #0]
 8003cb4:	701e      	strb	r6, [r3, #0]
 8003cb6:	6962      	ldr	r2, [r4, #20]
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d004      	beq.n	8003cc8 <__swbuf_r+0x6e>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	07db      	lsls	r3, r3, #31
 8003cc2:	d5e1      	bpl.n	8003c88 <__swbuf_r+0x2e>
 8003cc4:	2e0a      	cmp	r6, #10
 8003cc6:	d1df      	bne.n	8003c88 <__swbuf_r+0x2e>
 8003cc8:	4621      	mov	r1, r4
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f000 fa52 	bl	8004174 <_fflush_r>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	d0d9      	beq.n	8003c88 <__swbuf_r+0x2e>
 8003cd4:	e7d6      	b.n	8003c84 <__swbuf_r+0x2a>
	...

08003cd8 <__swsetup_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4b29      	ldr	r3, [pc, #164]	@ (8003d80 <__swsetup_r+0xa8>)
 8003cdc:	4605      	mov	r5, r0
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	b118      	cbz	r0, 8003cec <__swsetup_r+0x14>
 8003ce4:	6a03      	ldr	r3, [r0, #32]
 8003ce6:	b90b      	cbnz	r3, 8003cec <__swsetup_r+0x14>
 8003ce8:	f7ff fee0 	bl	8003aac <__sinit>
 8003cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cf0:	0719      	lsls	r1, r3, #28
 8003cf2:	d422      	bmi.n	8003d3a <__swsetup_r+0x62>
 8003cf4:	06da      	lsls	r2, r3, #27
 8003cf6:	d407      	bmi.n	8003d08 <__swsetup_r+0x30>
 8003cf8:	2209      	movs	r2, #9
 8003cfa:	602a      	str	r2, [r5, #0]
 8003cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	f04f 30ff 	mov.w	r0, #4294967295
 8003d06:	e033      	b.n	8003d70 <__swsetup_r+0x98>
 8003d08:	0758      	lsls	r0, r3, #29
 8003d0a:	d512      	bpl.n	8003d32 <__swsetup_r+0x5a>
 8003d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d0e:	b141      	cbz	r1, 8003d22 <__swsetup_r+0x4a>
 8003d10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d14:	4299      	cmp	r1, r3
 8003d16:	d002      	beq.n	8003d1e <__swsetup_r+0x46>
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f000 f8af 	bl	8003e7c <_free_r>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d22:	89a3      	ldrh	r3, [r4, #12]
 8003d24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d28:	81a3      	strh	r3, [r4, #12]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	6063      	str	r3, [r4, #4]
 8003d2e:	6923      	ldr	r3, [r4, #16]
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f043 0308 	orr.w	r3, r3, #8
 8003d38:	81a3      	strh	r3, [r4, #12]
 8003d3a:	6923      	ldr	r3, [r4, #16]
 8003d3c:	b94b      	cbnz	r3, 8003d52 <__swsetup_r+0x7a>
 8003d3e:	89a3      	ldrh	r3, [r4, #12]
 8003d40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d48:	d003      	beq.n	8003d52 <__swsetup_r+0x7a>
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	f000 fa5f 	bl	8004210 <__smakebuf_r>
 8003d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d56:	f013 0201 	ands.w	r2, r3, #1
 8003d5a:	d00a      	beq.n	8003d72 <__swsetup_r+0x9a>
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	60a2      	str	r2, [r4, #8]
 8003d60:	6962      	ldr	r2, [r4, #20]
 8003d62:	4252      	negs	r2, r2
 8003d64:	61a2      	str	r2, [r4, #24]
 8003d66:	6922      	ldr	r2, [r4, #16]
 8003d68:	b942      	cbnz	r2, 8003d7c <__swsetup_r+0xa4>
 8003d6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003d6e:	d1c5      	bne.n	8003cfc <__swsetup_r+0x24>
 8003d70:	bd38      	pop	{r3, r4, r5, pc}
 8003d72:	0799      	lsls	r1, r3, #30
 8003d74:	bf58      	it	pl
 8003d76:	6962      	ldrpl	r2, [r4, #20]
 8003d78:	60a2      	str	r2, [r4, #8]
 8003d7a:	e7f4      	b.n	8003d66 <__swsetup_r+0x8e>
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	e7f7      	b.n	8003d70 <__swsetup_r+0x98>
 8003d80:	20000018 	.word	0x20000018

08003d84 <memset>:
 8003d84:	4402      	add	r2, r0
 8003d86:	4603      	mov	r3, r0
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d100      	bne.n	8003d8e <memset+0xa>
 8003d8c:	4770      	bx	lr
 8003d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d92:	e7f9      	b.n	8003d88 <memset+0x4>

08003d94 <_close_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4d06      	ldr	r5, [pc, #24]	@ (8003db0 <_close_r+0x1c>)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	f7fc fefe 	bl	8000ba0 <_close>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d102      	bne.n	8003dae <_close_r+0x1a>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	b103      	cbz	r3, 8003dae <_close_r+0x1a>
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	bd38      	pop	{r3, r4, r5, pc}
 8003db0:	200002c8 	.word	0x200002c8

08003db4 <_lseek_r>:
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	4d07      	ldr	r5, [pc, #28]	@ (8003dd4 <_lseek_r+0x20>)
 8003db8:	4604      	mov	r4, r0
 8003dba:	4608      	mov	r0, r1
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	602a      	str	r2, [r5, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f7fc ff13 	bl	8000bee <_lseek>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	d102      	bne.n	8003dd2 <_lseek_r+0x1e>
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	b103      	cbz	r3, 8003dd2 <_lseek_r+0x1e>
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
 8003dd4:	200002c8 	.word	0x200002c8

08003dd8 <_read_r>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	4d07      	ldr	r5, [pc, #28]	@ (8003df8 <_read_r+0x20>)
 8003ddc:	4604      	mov	r4, r0
 8003dde:	4608      	mov	r0, r1
 8003de0:	4611      	mov	r1, r2
 8003de2:	2200      	movs	r2, #0
 8003de4:	602a      	str	r2, [r5, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f7fc fea1 	bl	8000b2e <_read>
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	d102      	bne.n	8003df6 <_read_r+0x1e>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	b103      	cbz	r3, 8003df6 <_read_r+0x1e>
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	200002c8 	.word	0x200002c8

08003dfc <_write_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4d07      	ldr	r5, [pc, #28]	@ (8003e1c <_write_r+0x20>)
 8003e00:	4604      	mov	r4, r0
 8003e02:	4608      	mov	r0, r1
 8003e04:	4611      	mov	r1, r2
 8003e06:	2200      	movs	r2, #0
 8003e08:	602a      	str	r2, [r5, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f7fc feac 	bl	8000b68 <_write>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d102      	bne.n	8003e1a <_write_r+0x1e>
 8003e14:	682b      	ldr	r3, [r5, #0]
 8003e16:	b103      	cbz	r3, 8003e1a <_write_r+0x1e>
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	200002c8 	.word	0x200002c8

08003e20 <__errno>:
 8003e20:	4b01      	ldr	r3, [pc, #4]	@ (8003e28 <__errno+0x8>)
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	20000018 	.word	0x20000018

08003e2c <__libc_init_array>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e64 <__libc_init_array+0x38>)
 8003e30:	4c0d      	ldr	r4, [pc, #52]	@ (8003e68 <__libc_init_array+0x3c>)
 8003e32:	1b64      	subs	r4, r4, r5
 8003e34:	10a4      	asrs	r4, r4, #2
 8003e36:	2600      	movs	r6, #0
 8003e38:	42a6      	cmp	r6, r4
 8003e3a:	d109      	bne.n	8003e50 <__libc_init_array+0x24>
 8003e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8003e6c <__libc_init_array+0x40>)
 8003e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8003e70 <__libc_init_array+0x44>)
 8003e40:	f000 fa54 	bl	80042ec <_init>
 8003e44:	1b64      	subs	r4, r4, r5
 8003e46:	10a4      	asrs	r4, r4, #2
 8003e48:	2600      	movs	r6, #0
 8003e4a:	42a6      	cmp	r6, r4
 8003e4c:	d105      	bne.n	8003e5a <__libc_init_array+0x2e>
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e54:	4798      	blx	r3
 8003e56:	3601      	adds	r6, #1
 8003e58:	e7ee      	b.n	8003e38 <__libc_init_array+0xc>
 8003e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5e:	4798      	blx	r3
 8003e60:	3601      	adds	r6, #1
 8003e62:	e7f2      	b.n	8003e4a <__libc_init_array+0x1e>
 8003e64:	0800497c 	.word	0x0800497c
 8003e68:	0800497c 	.word	0x0800497c
 8003e6c:	0800497c 	.word	0x0800497c
 8003e70:	08004980 	.word	0x08004980

08003e74 <__retarget_lock_init_recursive>:
 8003e74:	4770      	bx	lr

08003e76 <__retarget_lock_acquire_recursive>:
 8003e76:	4770      	bx	lr

08003e78 <__retarget_lock_release_recursive>:
 8003e78:	4770      	bx	lr
	...

08003e7c <_free_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4605      	mov	r5, r0
 8003e80:	2900      	cmp	r1, #0
 8003e82:	d041      	beq.n	8003f08 <_free_r+0x8c>
 8003e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e88:	1f0c      	subs	r4, r1, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bfb8      	it	lt
 8003e8e:	18e4      	addlt	r4, r4, r3
 8003e90:	f000 f8e0 	bl	8004054 <__malloc_lock>
 8003e94:	4a1d      	ldr	r2, [pc, #116]	@ (8003f0c <_free_r+0x90>)
 8003e96:	6813      	ldr	r3, [r2, #0]
 8003e98:	b933      	cbnz	r3, 8003ea8 <_free_r+0x2c>
 8003e9a:	6063      	str	r3, [r4, #4]
 8003e9c:	6014      	str	r4, [r2, #0]
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ea4:	f000 b8dc 	b.w	8004060 <__malloc_unlock>
 8003ea8:	42a3      	cmp	r3, r4
 8003eaa:	d908      	bls.n	8003ebe <_free_r+0x42>
 8003eac:	6820      	ldr	r0, [r4, #0]
 8003eae:	1821      	adds	r1, r4, r0
 8003eb0:	428b      	cmp	r3, r1
 8003eb2:	bf01      	itttt	eq
 8003eb4:	6819      	ldreq	r1, [r3, #0]
 8003eb6:	685b      	ldreq	r3, [r3, #4]
 8003eb8:	1809      	addeq	r1, r1, r0
 8003eba:	6021      	streq	r1, [r4, #0]
 8003ebc:	e7ed      	b.n	8003e9a <_free_r+0x1e>
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	b10b      	cbz	r3, 8003ec8 <_free_r+0x4c>
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	d9fa      	bls.n	8003ebe <_free_r+0x42>
 8003ec8:	6811      	ldr	r1, [r2, #0]
 8003eca:	1850      	adds	r0, r2, r1
 8003ecc:	42a0      	cmp	r0, r4
 8003ece:	d10b      	bne.n	8003ee8 <_free_r+0x6c>
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	4401      	add	r1, r0
 8003ed4:	1850      	adds	r0, r2, r1
 8003ed6:	4283      	cmp	r3, r0
 8003ed8:	6011      	str	r1, [r2, #0]
 8003eda:	d1e0      	bne.n	8003e9e <_free_r+0x22>
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	6053      	str	r3, [r2, #4]
 8003ee2:	4408      	add	r0, r1
 8003ee4:	6010      	str	r0, [r2, #0]
 8003ee6:	e7da      	b.n	8003e9e <_free_r+0x22>
 8003ee8:	d902      	bls.n	8003ef0 <_free_r+0x74>
 8003eea:	230c      	movs	r3, #12
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	e7d6      	b.n	8003e9e <_free_r+0x22>
 8003ef0:	6820      	ldr	r0, [r4, #0]
 8003ef2:	1821      	adds	r1, r4, r0
 8003ef4:	428b      	cmp	r3, r1
 8003ef6:	bf04      	itt	eq
 8003ef8:	6819      	ldreq	r1, [r3, #0]
 8003efa:	685b      	ldreq	r3, [r3, #4]
 8003efc:	6063      	str	r3, [r4, #4]
 8003efe:	bf04      	itt	eq
 8003f00:	1809      	addeq	r1, r1, r0
 8003f02:	6021      	streq	r1, [r4, #0]
 8003f04:	6054      	str	r4, [r2, #4]
 8003f06:	e7ca      	b.n	8003e9e <_free_r+0x22>
 8003f08:	bd38      	pop	{r3, r4, r5, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200002d4 	.word	0x200002d4

08003f10 <sbrk_aligned>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	4e0f      	ldr	r6, [pc, #60]	@ (8003f50 <sbrk_aligned+0x40>)
 8003f14:	460c      	mov	r4, r1
 8003f16:	6831      	ldr	r1, [r6, #0]
 8003f18:	4605      	mov	r5, r0
 8003f1a:	b911      	cbnz	r1, 8003f22 <sbrk_aligned+0x12>
 8003f1c:	f000 f9d6 	bl	80042cc <_sbrk_r>
 8003f20:	6030      	str	r0, [r6, #0]
 8003f22:	4621      	mov	r1, r4
 8003f24:	4628      	mov	r0, r5
 8003f26:	f000 f9d1 	bl	80042cc <_sbrk_r>
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	d103      	bne.n	8003f36 <sbrk_aligned+0x26>
 8003f2e:	f04f 34ff 	mov.w	r4, #4294967295
 8003f32:	4620      	mov	r0, r4
 8003f34:	bd70      	pop	{r4, r5, r6, pc}
 8003f36:	1cc4      	adds	r4, r0, #3
 8003f38:	f024 0403 	bic.w	r4, r4, #3
 8003f3c:	42a0      	cmp	r0, r4
 8003f3e:	d0f8      	beq.n	8003f32 <sbrk_aligned+0x22>
 8003f40:	1a21      	subs	r1, r4, r0
 8003f42:	4628      	mov	r0, r5
 8003f44:	f000 f9c2 	bl	80042cc <_sbrk_r>
 8003f48:	3001      	adds	r0, #1
 8003f4a:	d1f2      	bne.n	8003f32 <sbrk_aligned+0x22>
 8003f4c:	e7ef      	b.n	8003f2e <sbrk_aligned+0x1e>
 8003f4e:	bf00      	nop
 8003f50:	200002d0 	.word	0x200002d0

08003f54 <_malloc_r>:
 8003f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f58:	1ccd      	adds	r5, r1, #3
 8003f5a:	f025 0503 	bic.w	r5, r5, #3
 8003f5e:	3508      	adds	r5, #8
 8003f60:	2d0c      	cmp	r5, #12
 8003f62:	bf38      	it	cc
 8003f64:	250c      	movcc	r5, #12
 8003f66:	2d00      	cmp	r5, #0
 8003f68:	4606      	mov	r6, r0
 8003f6a:	db01      	blt.n	8003f70 <_malloc_r+0x1c>
 8003f6c:	42a9      	cmp	r1, r5
 8003f6e:	d904      	bls.n	8003f7a <_malloc_r+0x26>
 8003f70:	230c      	movs	r3, #12
 8003f72:	6033      	str	r3, [r6, #0]
 8003f74:	2000      	movs	r0, #0
 8003f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004050 <_malloc_r+0xfc>
 8003f7e:	f000 f869 	bl	8004054 <__malloc_lock>
 8003f82:	f8d8 3000 	ldr.w	r3, [r8]
 8003f86:	461c      	mov	r4, r3
 8003f88:	bb44      	cbnz	r4, 8003fdc <_malloc_r+0x88>
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f7ff ffbf 	bl	8003f10 <sbrk_aligned>
 8003f92:	1c43      	adds	r3, r0, #1
 8003f94:	4604      	mov	r4, r0
 8003f96:	d158      	bne.n	800404a <_malloc_r+0xf6>
 8003f98:	f8d8 4000 	ldr.w	r4, [r8]
 8003f9c:	4627      	mov	r7, r4
 8003f9e:	2f00      	cmp	r7, #0
 8003fa0:	d143      	bne.n	800402a <_malloc_r+0xd6>
 8003fa2:	2c00      	cmp	r4, #0
 8003fa4:	d04b      	beq.n	800403e <_malloc_r+0xea>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	4639      	mov	r1, r7
 8003faa:	4630      	mov	r0, r6
 8003fac:	eb04 0903 	add.w	r9, r4, r3
 8003fb0:	f000 f98c 	bl	80042cc <_sbrk_r>
 8003fb4:	4581      	cmp	r9, r0
 8003fb6:	d142      	bne.n	800403e <_malloc_r+0xea>
 8003fb8:	6821      	ldr	r1, [r4, #0]
 8003fba:	1a6d      	subs	r5, r5, r1
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f7ff ffa6 	bl	8003f10 <sbrk_aligned>
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d03a      	beq.n	800403e <_malloc_r+0xea>
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	442b      	add	r3, r5
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	bb62      	cbnz	r2, 8004030 <_malloc_r+0xdc>
 8003fd6:	f8c8 7000 	str.w	r7, [r8]
 8003fda:	e00f      	b.n	8003ffc <_malloc_r+0xa8>
 8003fdc:	6822      	ldr	r2, [r4, #0]
 8003fde:	1b52      	subs	r2, r2, r5
 8003fe0:	d420      	bmi.n	8004024 <_malloc_r+0xd0>
 8003fe2:	2a0b      	cmp	r2, #11
 8003fe4:	d917      	bls.n	8004016 <_malloc_r+0xc2>
 8003fe6:	1961      	adds	r1, r4, r5
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	6025      	str	r5, [r4, #0]
 8003fec:	bf18      	it	ne
 8003fee:	6059      	strne	r1, [r3, #4]
 8003ff0:	6863      	ldr	r3, [r4, #4]
 8003ff2:	bf08      	it	eq
 8003ff4:	f8c8 1000 	streq.w	r1, [r8]
 8003ff8:	5162      	str	r2, [r4, r5]
 8003ffa:	604b      	str	r3, [r1, #4]
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f000 f82f 	bl	8004060 <__malloc_unlock>
 8004002:	f104 000b 	add.w	r0, r4, #11
 8004006:	1d23      	adds	r3, r4, #4
 8004008:	f020 0007 	bic.w	r0, r0, #7
 800400c:	1ac2      	subs	r2, r0, r3
 800400e:	bf1c      	itt	ne
 8004010:	1a1b      	subne	r3, r3, r0
 8004012:	50a3      	strne	r3, [r4, r2]
 8004014:	e7af      	b.n	8003f76 <_malloc_r+0x22>
 8004016:	6862      	ldr	r2, [r4, #4]
 8004018:	42a3      	cmp	r3, r4
 800401a:	bf0c      	ite	eq
 800401c:	f8c8 2000 	streq.w	r2, [r8]
 8004020:	605a      	strne	r2, [r3, #4]
 8004022:	e7eb      	b.n	8003ffc <_malloc_r+0xa8>
 8004024:	4623      	mov	r3, r4
 8004026:	6864      	ldr	r4, [r4, #4]
 8004028:	e7ae      	b.n	8003f88 <_malloc_r+0x34>
 800402a:	463c      	mov	r4, r7
 800402c:	687f      	ldr	r7, [r7, #4]
 800402e:	e7b6      	b.n	8003f9e <_malloc_r+0x4a>
 8004030:	461a      	mov	r2, r3
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	42a3      	cmp	r3, r4
 8004036:	d1fb      	bne.n	8004030 <_malloc_r+0xdc>
 8004038:	2300      	movs	r3, #0
 800403a:	6053      	str	r3, [r2, #4]
 800403c:	e7de      	b.n	8003ffc <_malloc_r+0xa8>
 800403e:	230c      	movs	r3, #12
 8004040:	6033      	str	r3, [r6, #0]
 8004042:	4630      	mov	r0, r6
 8004044:	f000 f80c 	bl	8004060 <__malloc_unlock>
 8004048:	e794      	b.n	8003f74 <_malloc_r+0x20>
 800404a:	6005      	str	r5, [r0, #0]
 800404c:	e7d6      	b.n	8003ffc <_malloc_r+0xa8>
 800404e:	bf00      	nop
 8004050:	200002d4 	.word	0x200002d4

08004054 <__malloc_lock>:
 8004054:	4801      	ldr	r0, [pc, #4]	@ (800405c <__malloc_lock+0x8>)
 8004056:	f7ff bf0e 	b.w	8003e76 <__retarget_lock_acquire_recursive>
 800405a:	bf00      	nop
 800405c:	200002cc 	.word	0x200002cc

08004060 <__malloc_unlock>:
 8004060:	4801      	ldr	r0, [pc, #4]	@ (8004068 <__malloc_unlock+0x8>)
 8004062:	f7ff bf09 	b.w	8003e78 <__retarget_lock_release_recursive>
 8004066:	bf00      	nop
 8004068:	200002cc 	.word	0x200002cc

0800406c <__sflush_r>:
 800406c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004074:	0716      	lsls	r6, r2, #28
 8004076:	4605      	mov	r5, r0
 8004078:	460c      	mov	r4, r1
 800407a:	d454      	bmi.n	8004126 <__sflush_r+0xba>
 800407c:	684b      	ldr	r3, [r1, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	dc02      	bgt.n	8004088 <__sflush_r+0x1c>
 8004082:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	dd48      	ble.n	800411a <__sflush_r+0xae>
 8004088:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800408a:	2e00      	cmp	r6, #0
 800408c:	d045      	beq.n	800411a <__sflush_r+0xae>
 800408e:	2300      	movs	r3, #0
 8004090:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004094:	682f      	ldr	r7, [r5, #0]
 8004096:	6a21      	ldr	r1, [r4, #32]
 8004098:	602b      	str	r3, [r5, #0]
 800409a:	d030      	beq.n	80040fe <__sflush_r+0x92>
 800409c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	0759      	lsls	r1, r3, #29
 80040a2:	d505      	bpl.n	80040b0 <__sflush_r+0x44>
 80040a4:	6863      	ldr	r3, [r4, #4]
 80040a6:	1ad2      	subs	r2, r2, r3
 80040a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80040aa:	b10b      	cbz	r3, 80040b0 <__sflush_r+0x44>
 80040ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040ae:	1ad2      	subs	r2, r2, r3
 80040b0:	2300      	movs	r3, #0
 80040b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040b4:	6a21      	ldr	r1, [r4, #32]
 80040b6:	4628      	mov	r0, r5
 80040b8:	47b0      	blx	r6
 80040ba:	1c43      	adds	r3, r0, #1
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	d106      	bne.n	80040ce <__sflush_r+0x62>
 80040c0:	6829      	ldr	r1, [r5, #0]
 80040c2:	291d      	cmp	r1, #29
 80040c4:	d82b      	bhi.n	800411e <__sflush_r+0xb2>
 80040c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004170 <__sflush_r+0x104>)
 80040c8:	410a      	asrs	r2, r1
 80040ca:	07d6      	lsls	r6, r2, #31
 80040cc:	d427      	bmi.n	800411e <__sflush_r+0xb2>
 80040ce:	2200      	movs	r2, #0
 80040d0:	6062      	str	r2, [r4, #4]
 80040d2:	04d9      	lsls	r1, r3, #19
 80040d4:	6922      	ldr	r2, [r4, #16]
 80040d6:	6022      	str	r2, [r4, #0]
 80040d8:	d504      	bpl.n	80040e4 <__sflush_r+0x78>
 80040da:	1c42      	adds	r2, r0, #1
 80040dc:	d101      	bne.n	80040e2 <__sflush_r+0x76>
 80040de:	682b      	ldr	r3, [r5, #0]
 80040e0:	b903      	cbnz	r3, 80040e4 <__sflush_r+0x78>
 80040e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80040e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040e6:	602f      	str	r7, [r5, #0]
 80040e8:	b1b9      	cbz	r1, 800411a <__sflush_r+0xae>
 80040ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040ee:	4299      	cmp	r1, r3
 80040f0:	d002      	beq.n	80040f8 <__sflush_r+0x8c>
 80040f2:	4628      	mov	r0, r5
 80040f4:	f7ff fec2 	bl	8003e7c <_free_r>
 80040f8:	2300      	movs	r3, #0
 80040fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80040fc:	e00d      	b.n	800411a <__sflush_r+0xae>
 80040fe:	2301      	movs	r3, #1
 8004100:	4628      	mov	r0, r5
 8004102:	47b0      	blx	r6
 8004104:	4602      	mov	r2, r0
 8004106:	1c50      	adds	r0, r2, #1
 8004108:	d1c9      	bne.n	800409e <__sflush_r+0x32>
 800410a:	682b      	ldr	r3, [r5, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0c6      	beq.n	800409e <__sflush_r+0x32>
 8004110:	2b1d      	cmp	r3, #29
 8004112:	d001      	beq.n	8004118 <__sflush_r+0xac>
 8004114:	2b16      	cmp	r3, #22
 8004116:	d11e      	bne.n	8004156 <__sflush_r+0xea>
 8004118:	602f      	str	r7, [r5, #0]
 800411a:	2000      	movs	r0, #0
 800411c:	e022      	b.n	8004164 <__sflush_r+0xf8>
 800411e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004122:	b21b      	sxth	r3, r3
 8004124:	e01b      	b.n	800415e <__sflush_r+0xf2>
 8004126:	690f      	ldr	r7, [r1, #16]
 8004128:	2f00      	cmp	r7, #0
 800412a:	d0f6      	beq.n	800411a <__sflush_r+0xae>
 800412c:	0793      	lsls	r3, r2, #30
 800412e:	680e      	ldr	r6, [r1, #0]
 8004130:	bf08      	it	eq
 8004132:	694b      	ldreq	r3, [r1, #20]
 8004134:	600f      	str	r7, [r1, #0]
 8004136:	bf18      	it	ne
 8004138:	2300      	movne	r3, #0
 800413a:	eba6 0807 	sub.w	r8, r6, r7
 800413e:	608b      	str	r3, [r1, #8]
 8004140:	f1b8 0f00 	cmp.w	r8, #0
 8004144:	dde9      	ble.n	800411a <__sflush_r+0xae>
 8004146:	6a21      	ldr	r1, [r4, #32]
 8004148:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800414a:	4643      	mov	r3, r8
 800414c:	463a      	mov	r2, r7
 800414e:	4628      	mov	r0, r5
 8004150:	47b0      	blx	r6
 8004152:	2800      	cmp	r0, #0
 8004154:	dc08      	bgt.n	8004168 <__sflush_r+0xfc>
 8004156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800415a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800415e:	81a3      	strh	r3, [r4, #12]
 8004160:	f04f 30ff 	mov.w	r0, #4294967295
 8004164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004168:	4407      	add	r7, r0
 800416a:	eba8 0800 	sub.w	r8, r8, r0
 800416e:	e7e7      	b.n	8004140 <__sflush_r+0xd4>
 8004170:	dfbffffe 	.word	0xdfbffffe

08004174 <_fflush_r>:
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	690b      	ldr	r3, [r1, #16]
 8004178:	4605      	mov	r5, r0
 800417a:	460c      	mov	r4, r1
 800417c:	b913      	cbnz	r3, 8004184 <_fflush_r+0x10>
 800417e:	2500      	movs	r5, #0
 8004180:	4628      	mov	r0, r5
 8004182:	bd38      	pop	{r3, r4, r5, pc}
 8004184:	b118      	cbz	r0, 800418e <_fflush_r+0x1a>
 8004186:	6a03      	ldr	r3, [r0, #32]
 8004188:	b90b      	cbnz	r3, 800418e <_fflush_r+0x1a>
 800418a:	f7ff fc8f 	bl	8003aac <__sinit>
 800418e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f3      	beq.n	800417e <_fflush_r+0xa>
 8004196:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004198:	07d0      	lsls	r0, r2, #31
 800419a:	d404      	bmi.n	80041a6 <_fflush_r+0x32>
 800419c:	0599      	lsls	r1, r3, #22
 800419e:	d402      	bmi.n	80041a6 <_fflush_r+0x32>
 80041a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041a2:	f7ff fe68 	bl	8003e76 <__retarget_lock_acquire_recursive>
 80041a6:	4628      	mov	r0, r5
 80041a8:	4621      	mov	r1, r4
 80041aa:	f7ff ff5f 	bl	800406c <__sflush_r>
 80041ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041b0:	07da      	lsls	r2, r3, #31
 80041b2:	4605      	mov	r5, r0
 80041b4:	d4e4      	bmi.n	8004180 <_fflush_r+0xc>
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	059b      	lsls	r3, r3, #22
 80041ba:	d4e1      	bmi.n	8004180 <_fflush_r+0xc>
 80041bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041be:	f7ff fe5b 	bl	8003e78 <__retarget_lock_release_recursive>
 80041c2:	e7dd      	b.n	8004180 <_fflush_r+0xc>

080041c4 <__swhatbuf_r>:
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	460c      	mov	r4, r1
 80041c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041cc:	2900      	cmp	r1, #0
 80041ce:	b096      	sub	sp, #88	@ 0x58
 80041d0:	4615      	mov	r5, r2
 80041d2:	461e      	mov	r6, r3
 80041d4:	da0d      	bge.n	80041f2 <__swhatbuf_r+0x2e>
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	bf14      	ite	ne
 80041e2:	2340      	movne	r3, #64	@ 0x40
 80041e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80041e8:	2000      	movs	r0, #0
 80041ea:	6031      	str	r1, [r6, #0]
 80041ec:	602b      	str	r3, [r5, #0]
 80041ee:	b016      	add	sp, #88	@ 0x58
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
 80041f2:	466a      	mov	r2, sp
 80041f4:	f000 f848 	bl	8004288 <_fstat_r>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	dbec      	blt.n	80041d6 <__swhatbuf_r+0x12>
 80041fc:	9901      	ldr	r1, [sp, #4]
 80041fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004202:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004206:	4259      	negs	r1, r3
 8004208:	4159      	adcs	r1, r3
 800420a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800420e:	e7eb      	b.n	80041e8 <__swhatbuf_r+0x24>

08004210 <__smakebuf_r>:
 8004210:	898b      	ldrh	r3, [r1, #12]
 8004212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004214:	079d      	lsls	r5, r3, #30
 8004216:	4606      	mov	r6, r0
 8004218:	460c      	mov	r4, r1
 800421a:	d507      	bpl.n	800422c <__smakebuf_r+0x1c>
 800421c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	6123      	str	r3, [r4, #16]
 8004224:	2301      	movs	r3, #1
 8004226:	6163      	str	r3, [r4, #20]
 8004228:	b003      	add	sp, #12
 800422a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800422c:	ab01      	add	r3, sp, #4
 800422e:	466a      	mov	r2, sp
 8004230:	f7ff ffc8 	bl	80041c4 <__swhatbuf_r>
 8004234:	9f00      	ldr	r7, [sp, #0]
 8004236:	4605      	mov	r5, r0
 8004238:	4639      	mov	r1, r7
 800423a:	4630      	mov	r0, r6
 800423c:	f7ff fe8a 	bl	8003f54 <_malloc_r>
 8004240:	b948      	cbnz	r0, 8004256 <__smakebuf_r+0x46>
 8004242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004246:	059a      	lsls	r2, r3, #22
 8004248:	d4ee      	bmi.n	8004228 <__smakebuf_r+0x18>
 800424a:	f023 0303 	bic.w	r3, r3, #3
 800424e:	f043 0302 	orr.w	r3, r3, #2
 8004252:	81a3      	strh	r3, [r4, #12]
 8004254:	e7e2      	b.n	800421c <__smakebuf_r+0xc>
 8004256:	89a3      	ldrh	r3, [r4, #12]
 8004258:	6020      	str	r0, [r4, #0]
 800425a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800425e:	81a3      	strh	r3, [r4, #12]
 8004260:	9b01      	ldr	r3, [sp, #4]
 8004262:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004266:	b15b      	cbz	r3, 8004280 <__smakebuf_r+0x70>
 8004268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800426c:	4630      	mov	r0, r6
 800426e:	f000 f81d 	bl	80042ac <_isatty_r>
 8004272:	b128      	cbz	r0, 8004280 <__smakebuf_r+0x70>
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	f023 0303 	bic.w	r3, r3, #3
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	81a3      	strh	r3, [r4, #12]
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	431d      	orrs	r5, r3
 8004284:	81a5      	strh	r5, [r4, #12]
 8004286:	e7cf      	b.n	8004228 <__smakebuf_r+0x18>

08004288 <_fstat_r>:
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	4d07      	ldr	r5, [pc, #28]	@ (80042a8 <_fstat_r+0x20>)
 800428c:	2300      	movs	r3, #0
 800428e:	4604      	mov	r4, r0
 8004290:	4608      	mov	r0, r1
 8004292:	4611      	mov	r1, r2
 8004294:	602b      	str	r3, [r5, #0]
 8004296:	f7fc fc8f 	bl	8000bb8 <_fstat>
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	d102      	bne.n	80042a4 <_fstat_r+0x1c>
 800429e:	682b      	ldr	r3, [r5, #0]
 80042a0:	b103      	cbz	r3, 80042a4 <_fstat_r+0x1c>
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	bd38      	pop	{r3, r4, r5, pc}
 80042a6:	bf00      	nop
 80042a8:	200002c8 	.word	0x200002c8

080042ac <_isatty_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4d06      	ldr	r5, [pc, #24]	@ (80042c8 <_isatty_r+0x1c>)
 80042b0:	2300      	movs	r3, #0
 80042b2:	4604      	mov	r4, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	602b      	str	r3, [r5, #0]
 80042b8:	f7fc fc8e 	bl	8000bd8 <_isatty>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_isatty_r+0x1a>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_isatty_r+0x1a>
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	200002c8 	.word	0x200002c8

080042cc <_sbrk_r>:
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	4d06      	ldr	r5, [pc, #24]	@ (80042e8 <_sbrk_r+0x1c>)
 80042d0:	2300      	movs	r3, #0
 80042d2:	4604      	mov	r4, r0
 80042d4:	4608      	mov	r0, r1
 80042d6:	602b      	str	r3, [r5, #0]
 80042d8:	f7fc fc96 	bl	8000c08 <_sbrk>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d102      	bne.n	80042e6 <_sbrk_r+0x1a>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	b103      	cbz	r3, 80042e6 <_sbrk_r+0x1a>
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	200002c8 	.word	0x200002c8

080042ec <_init>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr

080042f8 <_fini>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr
