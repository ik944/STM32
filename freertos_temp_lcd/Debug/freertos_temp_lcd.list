
freertos_temp_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007130  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007300  08007300  00008300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073e4  080073e4  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  080073e4  080073e4  000083e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073ec  080073ec  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ec  080073ec  000083ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073f0  080073f0  000083f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080073f4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c58  2000006c  08007460  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cc4  08007460  00009cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b125  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003765  00000000  00000000  000241c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  00027928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122c  00000000  00000000  00029048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a29  00000000  00000000  0002a274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b691  00000000  00000000  0004dc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de118  00000000  00000000  0006932e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147446  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065ac  00000000  00000000  0014748c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0014da38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080072e8 	.word	0x080072e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080072e8 	.word	0x080072e8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <CLCD_send>:

#include     "clcd.h"

void CLCD_send(int type, char data)

{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]

    if (type == DATA4)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d106      	bne.n	8000520 <CLCD_send+0x20>

        HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000518:	484d      	ldr	r0, [pc, #308]	@ (8000650 <CLCD_send+0x150>)
 800051a:	f001 f99f 	bl	800185c <HAL_GPIO_WritePin>
 800051e:	e005      	b.n	800052c <CLCD_send+0x2c>

    else

        HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000526:	484a      	ldr	r0, [pc, #296]	@ (8000650 <CLCD_send+0x150>)
 8000528:	f001 f998 	bl	800185c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000532:	4848      	ldr	r0, [pc, #288]	@ (8000654 <CLCD_send+0x154>)
 8000534:	f001 f992 	bl	800185c <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000538:	2001      	movs	r0, #1
 800053a:	f000 fef5 	bl	8001328 <HAL_Delay>

    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000544:	4843      	ldr	r0, [pc, #268]	@ (8000654 <CLCD_send+0x154>)
 8000546:	f001 f989 	bl	800185c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & (1 << 7)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800054a:	78fb      	ldrb	r3, [r7, #3]
 800054c:	09db      	lsrs	r3, r3, #7
 800054e:	b2db      	uxtb	r3, r3
 8000550:	461a      	mov	r2, r3
 8000552:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000556:	483e      	ldr	r0, [pc, #248]	@ (8000650 <CLCD_send+0x150>)
 8000558:	f001 f980 	bl	800185c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & (1 << 6)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	119b      	asrs	r3, r3, #6
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	b2db      	uxtb	r3, r3
 8000568:	461a      	mov	r2, r3
 800056a:	2180      	movs	r1, #128	@ 0x80
 800056c:	4838      	ldr	r0, [pc, #224]	@ (8000650 <CLCD_send+0x150>)
 800056e:	f001 f975 	bl	800185c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & (1 << 5)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000572:	78fb      	ldrb	r3, [r7, #3]
 8000574:	115b      	asrs	r3, r3, #5
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	b2db      	uxtb	r3, r3
 800057e:	461a      	mov	r2, r3
 8000580:	2140      	movs	r1, #64	@ 0x40
 8000582:	4833      	ldr	r0, [pc, #204]	@ (8000650 <CLCD_send+0x150>)
 8000584:	f001 f96a 	bl	800185c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & (1 << 4)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	111b      	asrs	r3, r3, #4
 800058c:	b2db      	uxtb	r3, r3
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	2120      	movs	r1, #32
 8000598:	482d      	ldr	r0, [pc, #180]	@ (8000650 <CLCD_send+0x150>)
 800059a:	f001 f95f 	bl	800185c <HAL_GPIO_WritePin>

    HAL_Delay(1);
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 fec2 	bl	8001328 <HAL_Delay>

    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005aa:	482a      	ldr	r0, [pc, #168]	@ (8000654 <CLCD_send+0x154>)
 80005ac:	f001 f956 	bl	800185c <HAL_GPIO_WritePin>

    HAL_Delay(1);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 feb9 	bl	8001328 <HAL_Delay>

    if (type != CMD8)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d045      	beq.n	8000648 <CLCD_send+0x148>

    {

        HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c2:	4824      	ldr	r0, [pc, #144]	@ (8000654 <CLCD_send+0x154>)
 80005c4:	f001 f94a 	bl	800185c <HAL_GPIO_WritePin>

        HAL_Delay(1);
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 fead 	bl	8001328 <HAL_Delay>

        HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d4:	481f      	ldr	r0, [pc, #124]	@ (8000654 <CLCD_send+0x154>)
 80005d6:	f001 f941 	bl	800185c <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & (1 << 3)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005da:	78fb      	ldrb	r3, [r7, #3]
 80005dc:	10db      	asrs	r3, r3, #3
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ec:	4818      	ldr	r0, [pc, #96]	@ (8000650 <CLCD_send+0x150>)
 80005ee:	f001 f935 	bl	800185c <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & (1 << 2)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005f2:	78fb      	ldrb	r3, [r7, #3]
 80005f4:	109b      	asrs	r3, r3, #2
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	2180      	movs	r1, #128	@ 0x80
 8000602:	4813      	ldr	r0, [pc, #76]	@ (8000650 <CLCD_send+0x150>)
 8000604:	f001 f92a 	bl	800185c <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & (1 << 1)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	105b      	asrs	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	2140      	movs	r1, #64	@ 0x40
 8000618:	480d      	ldr	r0, [pc, #52]	@ (8000650 <CLCD_send+0x150>)
 800061a:	f001 f91f 	bl	800185c <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & (1 << 0)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	2120      	movs	r1, #32
 800062a:	4809      	ldr	r0, [pc, #36]	@ (8000650 <CLCD_send+0x150>)
 800062c:	f001 f916 	bl	800185c <HAL_GPIO_WritePin>

        HAL_Delay(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fe79 	bl	8001328 <HAL_Delay>

        HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800063c:	4805      	ldr	r0, [pc, #20]	@ (8000654 <CLCD_send+0x154>)
 800063e:	f001 f90d 	bl	800185c <HAL_GPIO_WritePin>

        HAL_Delay(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 fe70 	bl	8001328 <HAL_Delay>
    }
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020800 	.word	0x40020800
 8000654:	40020000 	.word	0x40020000

08000658 <CLCD_init>:

void CLCD_init()

{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

       HAL_Delay(15);                                       // wait for 15ms from power-on
 800065c:	200f      	movs	r0, #15
 800065e:	f000 fe63 	bl	8001328 <HAL_Delay>

       CLCD_send(CMD8, FUNCTION_SET | BIT_8);         // Initial Value
 8000662:	2130      	movs	r1, #48	@ 0x30
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff ff4b 	bl	8000500 <CLCD_send>

       HAL_Delay(5);                                  // wait for 5ms from power-on
 800066a:	2005      	movs	r0, #5
 800066c:	f000 fe5c 	bl	8001328 <HAL_Delay>

       CLCD_send(CMD8, FUNCTION_SET | BIT_8);         // Initial Value
 8000670:	2130      	movs	r1, #48	@ 0x30
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff ff44 	bl	8000500 <CLCD_send>

       HAL_Delay(1);                                  // wait for 1ms from power-on
 8000678:	2001      	movs	r0, #1
 800067a:	f000 fe55 	bl	8001328 <HAL_Delay>

       CLCD_send(CMD8, FUNCTION_SET | BIT_8);         // Initial Value
 800067e:	2130      	movs	r1, #48	@ 0x30
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff ff3d 	bl	8000500 <CLCD_send>

       CLCD_send(CMD8, FUNCTION_SET | BIT_4);         // Function Set = 4 Bit Interface + 2 Line + 5x8 Dot
 8000686:	2120      	movs	r1, #32
 8000688:	2000      	movs	r0, #0
 800068a:	f7ff ff39 	bl	8000500 <CLCD_send>

       CLCD_send(CMD4, FUNCTION_SET | BIT_4 | LINE_2 | DOT_58);    // Function Set = 4 Bit Interface + 2 Line + 5x8 Dot
 800068e:	2128      	movs	r1, #40	@ 0x28
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff ff35 	bl	8000500 <CLCD_send>

       CLCD_send(CMD4, DISP_MODE_SET | DISP_OFF);           // Display Off
 8000696:	2108      	movs	r1, #8
 8000698:	2001      	movs	r0, #1
 800069a:	f7ff ff31 	bl	8000500 <CLCD_send>

       CLCD_send(CMD4, CLEAR_DISPLAY);                // Clear Display, Curror Position = 0
 800069e:	2101      	movs	r1, #1
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff ff2d 	bl	8000500 <CLCD_send>

       CLCD_send(CMD4, ENTRI_SET | CURSOR_INC | CURSOR_NOSHIFT);   // Entry Mode Set = Cursor Increment + Cursor No Shift
 80006a6:	2106      	movs	r1, #6
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff29 	bl	8000500 <CLCD_send>

       CLCD_send(CMD4, DISP_MODE_SET | DISP_ON | CURSOR_OFF | BLINK_OFF); // Display Set = Display On + Cursor Off + Blink Off
 80006ae:	210c      	movs	r1, #12
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff ff25 	bl	8000500 <CLCD_send>

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}

080006ba <printFirstRow>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printFirstRow(const char *text)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
  CLCD_send(CMD4, 0x80); 
 80006c2:	2180      	movs	r1, #128	@ 0x80
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff1b 	bl	8000500 <CLCD_send>
  while (*text)
 80006ca:	e007      	b.n	80006dc <printFirstRow+0x22>
  {
    CLCD_send(DATA4, *text++); 
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	1c5a      	adds	r2, r3, #1
 80006d0:	607a      	str	r2, [r7, #4]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	2002      	movs	r0, #2
 80006d8:	f7ff ff12 	bl	8000500 <CLCD_send>
  while (*text)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1f3      	bne.n	80006cc <printFirstRow+0x12>
  }
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <printSecondRow>:

void printSecondRow(const char *text)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  CLCD_send(CMD4, 0xC0); 
 80006f6:	21c0      	movs	r1, #192	@ 0xc0
 80006f8:	2001      	movs	r0, #1
 80006fa:	f7ff ff01 	bl	8000500 <CLCD_send>
  while (*text)
 80006fe:	e007      	b.n	8000710 <printSecondRow+0x22>
  {
    CLCD_send(DATA4, *text++); 
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	2002      	movs	r0, #2
 800070c:	f7ff fef8 	bl	8000500 <CLCD_send>
  while (*text)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f3      	bne.n	8000700 <printSecondRow+0x12>
  }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <fnd_display>:
uint32_t count = 0;
uint32_t curtick = 0, prevTick = 0;
uint32_t num3, num2, num1, num0;
volatile uint8_t i2c1_buffer[2];
void fnd_display(int num, int position, int time_ms, int dot_flag)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	603b      	str	r3, [r7, #0]
	int i;
	switch (position) {
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	2b03      	cmp	r3, #3
 8000736:	d867      	bhi.n	8000808 <fnd_display+0xe4>
 8000738:	a201      	add	r2, pc, #4	@ (adr r2, 8000740 <fnd_display+0x1c>)
 800073a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073e:	bf00      	nop
 8000740:	080007db 	.word	0x080007db
 8000744:	080007ad 	.word	0x080007ad
 8000748:	0800077f 	.word	0x0800077f
 800074c:	08000751 	.word	0x08000751
	case 3:
		HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG1_Pin, SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2108      	movs	r1, #8
 8000754:	4886      	ldr	r0, [pc, #536]	@ (8000970 <fnd_display+0x24c>)
 8000756:	f001 f881 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG2_GPIO_Port, DIG2_Pin, RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	4884      	ldr	r0, [pc, #528]	@ (8000970 <fnd_display+0x24c>)
 8000760:	f001 f87c 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800076a:	4882      	ldr	r0, [pc, #520]	@ (8000974 <fnd_display+0x250>)
 800076c:	f001 f876 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000776:	487f      	ldr	r0, [pc, #508]	@ (8000974 <fnd_display+0x250>)
 8000778:	f001 f870 	bl	800185c <HAL_GPIO_WritePin>
		break;
 800077c:	e044      	b.n	8000808 <fnd_display+0xe4>
	case 2:
		HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG1_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2108      	movs	r1, #8
 8000782:	487b      	ldr	r0, [pc, #492]	@ (8000970 <fnd_display+0x24c>)
 8000784:	f001 f86a 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG2_GPIO_Port, DIG2_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2110      	movs	r1, #16
 800078c:	4878      	ldr	r0, [pc, #480]	@ (8000970 <fnd_display+0x24c>)
 800078e:	f001 f865 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000798:	4876      	ldr	r0, [pc, #472]	@ (8000974 <fnd_display+0x250>)
 800079a:	f001 f85f 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a4:	4873      	ldr	r0, [pc, #460]	@ (8000974 <fnd_display+0x250>)
 80007a6:	f001 f859 	bl	800185c <HAL_GPIO_WritePin>
		break;
 80007aa:	e02d      	b.n	8000808 <fnd_display+0xe4>
	case 1:
		HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG1_Pin, RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2108      	movs	r1, #8
 80007b0:	486f      	ldr	r0, [pc, #444]	@ (8000970 <fnd_display+0x24c>)
 80007b2:	f001 f853 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG2_GPIO_Port, DIG2_Pin, RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2110      	movs	r1, #16
 80007ba:	486d      	ldr	r0, [pc, #436]	@ (8000970 <fnd_display+0x24c>)
 80007bc:	f001 f84e 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007c6:	486b      	ldr	r0, [pc, #428]	@ (8000974 <fnd_display+0x250>)
 80007c8:	f001 f848 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007d2:	4868      	ldr	r0, [pc, #416]	@ (8000974 <fnd_display+0x250>)
 80007d4:	f001 f842 	bl	800185c <HAL_GPIO_WritePin>
		break;
 80007d8:	e016      	b.n	8000808 <fnd_display+0xe4>
	case 0:
		HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG1_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4864      	ldr	r0, [pc, #400]	@ (8000970 <fnd_display+0x24c>)
 80007e0:	f001 f83c 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG2_GPIO_Port, DIG2_Pin, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2110      	movs	r1, #16
 80007e8:	4861      	ldr	r0, [pc, #388]	@ (8000970 <fnd_display+0x24c>)
 80007ea:	f001 f837 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007f4:	485f      	ldr	r0, [pc, #380]	@ (8000974 <fnd_display+0x250>)
 80007f6:	f001 f831 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000800:	485c      	ldr	r0, [pc, #368]	@ (8000974 <fnd_display+0x250>)
 8000802:	f001 f82b 	bl	800185c <HAL_GPIO_WritePin>
		break;
 8000806:	bf00      	nop
	}
  	for (i=0; i<12; i++)
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	e09b      	b.n	8000946 <fnd_display+0x222>
	{
		if((number[num] & (1<<i))!=0)
 800080e:	4a5a      	ldr	r2, [pc, #360]	@ (8000978 <fnd_display+0x254>)
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	4413      	add	r3, r2
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa42 f303 	asr.w	r3, r2, r3
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	2b00      	cmp	r3, #0
 8000824:	d046      	beq.n	80008b4 <fnd_display+0x190>
		{
			switch (i)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	2b07      	cmp	r3, #7
 800082a:	f200 8089 	bhi.w	8000940 <fnd_display+0x21c>
 800082e:	a201      	add	r2, pc, #4	@ (adr r2, 8000834 <fnd_display+0x110>)
 8000830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000834:	08000855 	.word	0x08000855
 8000838:	08000861 	.word	0x08000861
 800083c:	0800086d 	.word	0x0800086d
 8000840:	08000879 	.word	0x08000879
 8000844:	08000885 	.word	0x08000885
 8000848:	08000891 	.word	0x08000891
 800084c:	0800089d 	.word	0x0800089d
 8000850:	080008a9 	.word	0x080008a9
			{
			case 0 : HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET); break;
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4848      	ldr	r0, [pc, #288]	@ (800097c <fnd_display+0x258>)
 800085a:	f000 ffff 	bl	800185c <HAL_GPIO_WritePin>
 800085e:	e06f      	b.n	8000940 <fnd_display+0x21c>
			case 1 : HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET); break;
 8000860:	2201      	movs	r2, #1
 8000862:	2102      	movs	r1, #2
 8000864:	4845      	ldr	r0, [pc, #276]	@ (800097c <fnd_display+0x258>)
 8000866:	f000 fff9 	bl	800185c <HAL_GPIO_WritePin>
 800086a:	e069      	b.n	8000940 <fnd_display+0x21c>
			case 2 : HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET); break;
 800086c:	2201      	movs	r2, #1
 800086e:	2104      	movs	r1, #4
 8000870:	4842      	ldr	r0, [pc, #264]	@ (800097c <fnd_display+0x258>)
 8000872:	f000 fff3 	bl	800185c <HAL_GPIO_WritePin>
 8000876:	e063      	b.n	8000940 <fnd_display+0x21c>
			case 3 : HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET); break;
 8000878:	2201      	movs	r2, #1
 800087a:	2108      	movs	r1, #8
 800087c:	483f      	ldr	r0, [pc, #252]	@ (800097c <fnd_display+0x258>)
 800087e:	f000 ffed 	bl	800185c <HAL_GPIO_WritePin>
 8000882:	e05d      	b.n	8000940 <fnd_display+0x21c>
			case 4 : HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET); break;
 8000884:	2201      	movs	r2, #1
 8000886:	2110      	movs	r1, #16
 8000888:	483c      	ldr	r0, [pc, #240]	@ (800097c <fnd_display+0x258>)
 800088a:	f000 ffe7 	bl	800185c <HAL_GPIO_WritePin>
 800088e:	e057      	b.n	8000940 <fnd_display+0x21c>
			case 5 : HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET); break;
 8000890:	2201      	movs	r2, #1
 8000892:	2120      	movs	r1, #32
 8000894:	4839      	ldr	r0, [pc, #228]	@ (800097c <fnd_display+0x258>)
 8000896:	f000 ffe1 	bl	800185c <HAL_GPIO_WritePin>
 800089a:	e051      	b.n	8000940 <fnd_display+0x21c>
			case 6 : HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET); break;
 800089c:	2201      	movs	r2, #1
 800089e:	2140      	movs	r1, #64	@ 0x40
 80008a0:	4836      	ldr	r0, [pc, #216]	@ (800097c <fnd_display+0x258>)
 80008a2:	f000 ffdb 	bl	800185c <HAL_GPIO_WritePin>
 80008a6:	e04b      	b.n	8000940 <fnd_display+0x21c>
			case 7 : HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, GPIO_PIN_SET); break;
 80008a8:	2201      	movs	r2, #1
 80008aa:	2180      	movs	r1, #128	@ 0x80
 80008ac:	4833      	ldr	r0, [pc, #204]	@ (800097c <fnd_display+0x258>)
 80008ae:	f000 ffd5 	bl	800185c <HAL_GPIO_WritePin>
 80008b2:	e045      	b.n	8000940 <fnd_display+0x21c>
			}
		}else
			{
				switch(i)
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	2b07      	cmp	r3, #7
 80008b8:	d842      	bhi.n	8000940 <fnd_display+0x21c>
 80008ba:	a201      	add	r2, pc, #4	@ (adr r2, 80008c0 <fnd_display+0x19c>)
 80008bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c0:	080008e1 	.word	0x080008e1
 80008c4:	080008ed 	.word	0x080008ed
 80008c8:	080008f9 	.word	0x080008f9
 80008cc:	08000905 	.word	0x08000905
 80008d0:	08000911 	.word	0x08000911
 80008d4:	0800091d 	.word	0x0800091d
 80008d8:	08000929 	.word	0x08000929
 80008dc:	08000935 	.word	0x08000935
				{
				case 0 : HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET); break;
 80008e0:	2200      	movs	r2, #0
 80008e2:	2101      	movs	r1, #1
 80008e4:	4825      	ldr	r0, [pc, #148]	@ (800097c <fnd_display+0x258>)
 80008e6:	f000 ffb9 	bl	800185c <HAL_GPIO_WritePin>
 80008ea:	e029      	b.n	8000940 <fnd_display+0x21c>
				case 1 : HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET); break;
 80008ec:	2200      	movs	r2, #0
 80008ee:	2102      	movs	r1, #2
 80008f0:	4822      	ldr	r0, [pc, #136]	@ (800097c <fnd_display+0x258>)
 80008f2:	f000 ffb3 	bl	800185c <HAL_GPIO_WritePin>
 80008f6:	e023      	b.n	8000940 <fnd_display+0x21c>
				case 2 : HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET); break;
 80008f8:	2200      	movs	r2, #0
 80008fa:	2104      	movs	r1, #4
 80008fc:	481f      	ldr	r0, [pc, #124]	@ (800097c <fnd_display+0x258>)
 80008fe:	f000 ffad 	bl	800185c <HAL_GPIO_WritePin>
 8000902:	e01d      	b.n	8000940 <fnd_display+0x21c>
				case 3 : HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET); break;
 8000904:	2200      	movs	r2, #0
 8000906:	2108      	movs	r1, #8
 8000908:	481c      	ldr	r0, [pc, #112]	@ (800097c <fnd_display+0x258>)
 800090a:	f000 ffa7 	bl	800185c <HAL_GPIO_WritePin>
 800090e:	e017      	b.n	8000940 <fnd_display+0x21c>
				case 4 : HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET); break;
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	4819      	ldr	r0, [pc, #100]	@ (800097c <fnd_display+0x258>)
 8000916:	f000 ffa1 	bl	800185c <HAL_GPIO_WritePin>
 800091a:	e011      	b.n	8000940 <fnd_display+0x21c>
				case 5 : HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET); break;
 800091c:	2200      	movs	r2, #0
 800091e:	2120      	movs	r1, #32
 8000920:	4816      	ldr	r0, [pc, #88]	@ (800097c <fnd_display+0x258>)
 8000922:	f000 ff9b 	bl	800185c <HAL_GPIO_WritePin>
 8000926:	e00b      	b.n	8000940 <fnd_display+0x21c>
				case 6 : HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET); break;
 8000928:	2200      	movs	r2, #0
 800092a:	2140      	movs	r1, #64	@ 0x40
 800092c:	4813      	ldr	r0, [pc, #76]	@ (800097c <fnd_display+0x258>)
 800092e:	f000 ff95 	bl	800185c <HAL_GPIO_WritePin>
 8000932:	e005      	b.n	8000940 <fnd_display+0x21c>
				case 7 : HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, GPIO_PIN_RESET); break;
 8000934:	2200      	movs	r2, #0
 8000936:	2180      	movs	r1, #128	@ 0x80
 8000938:	4810      	ldr	r0, [pc, #64]	@ (800097c <fnd_display+0x258>)
 800093a:	f000 ff8f 	bl	800185c <HAL_GPIO_WritePin>
 800093e:	bf00      	nop
  	for (i=0; i<12; i++)
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	3301      	adds	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	2b0b      	cmp	r3, #11
 800094a:	f77f af60 	ble.w	800080e <fnd_display+0xea>
				}
			}
		}
    if(dot_flag ==DOT)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d104      	bne.n	800095e <fnd_display+0x23a>
    HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2180      	movs	r1, #128	@ 0x80
 8000958:	4808      	ldr	r0, [pc, #32]	@ (800097c <fnd_display+0x258>)
 800095a:	f000 ff7f 	bl	800185c <HAL_GPIO_WritePin>
	HAL_Delay(time_ms);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fce1 	bl	8001328 <HAL_Delay>
	}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40020800 	.word	0x40020800
 8000974:	40020000 	.word	0x40020000
 8000978:	20000000 	.word	0x20000000
 800097c:	40020400 	.word	0x40020400

08000980 <display_temperature>:
  
  void display_temperature(uint8_t *buffer)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    int temp, sign;
    uint8_t decimal;
    temp = (*buffer << 8) | *(buffer + 1);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	021b      	lsls	r3, r3, #8
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	3201      	adds	r2, #1
 8000992:	7812      	ldrb	r2, [r2, #0]
 8000994:	4313      	orrs	r3, r2
 8000996:	61fb      	str	r3, [r7, #28]
    if ((temp & (1 << 15)))
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d009      	beq.n	80009b6 <display_temperature+0x36>
    {
        sign = MINUS;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
        temp = (~temp & 0x7FE0) + 0x20;
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	43da      	mvns	r2, r3
 80009aa:	f647 73e0 	movw	r3, #32736	@ 0x7fe0
 80009ae:	4013      	ands	r3, r2
 80009b0:	3320      	adds	r3, #32
 80009b2:	61fb      	str	r3, [r7, #28]
 80009b4:	e001      	b.n	80009ba <display_temperature+0x3a>
    }
    else
    {
        sign = PLUS;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
    }

    decimal = (temp & (1 << 7)) ? DECIMAL_ZERO : DECIMAL_FIVE; 
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	bf0c      	ite	eq
 80009c4:	2301      	moveq	r3, #1
 80009c6:	2300      	movne	r3, #0
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	75fb      	strb	r3, [r7, #23]

    temp >>= 7; 
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	11db      	asrs	r3, r3, #7
 80009d0:	61fb      	str	r3, [r7, #28]

    
    int integer_part = temp >> 1;
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	105b      	asrs	r3, r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
    int fractional_part = (temp & 0x01) * 5; 
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f003 0201 	and.w	r2, r3, #1
 80009de:	4613      	mov	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]

    
    if (sign == PLUS)
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d106      	bne.n	80009fa <display_temperature+0x7a>
        fnd_display(DIGIT_PLUS, 3, 4, NOT_DOT);
 80009ec:	2300      	movs	r3, #0
 80009ee:	2204      	movs	r2, #4
 80009f0:	2103      	movs	r1, #3
 80009f2:	200a      	movs	r0, #10
 80009f4:	f7ff fe96 	bl	8000724 <fnd_display>
 80009f8:	e005      	b.n	8000a06 <display_temperature+0x86>
    else
        fnd_display(DIGIT_MINUS, 3, 4, NOT_DOT);
 80009fa:	2300      	movs	r3, #0
 80009fc:	2204      	movs	r2, #4
 80009fe:	2103      	movs	r1, #3
 8000a00:	200b      	movs	r0, #11
 8000a02:	f7ff fe8f 	bl	8000724 <fnd_display>

    fnd_display(integer_part / 10, 2, 4, NOT_DOT); 
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <display_temperature+0xd4>)
 8000a0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a0e:	1092      	asrs	r2, r2, #2
 8000a10:	17db      	asrs	r3, r3, #31
 8000a12:	1ad0      	subs	r0, r2, r3
 8000a14:	2300      	movs	r3, #0
 8000a16:	2204      	movs	r2, #4
 8000a18:	2102      	movs	r1, #2
 8000a1a:	f7ff fe83 	bl	8000724 <fnd_display>
    fnd_display(integer_part % 10, 1, 4, DOT);     
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <display_temperature+0xd4>)
 8000a22:	fb83 1302 	smull	r1, r3, r3, r2
 8000a26:	1099      	asrs	r1, r3, #2
 8000a28:	17d3      	asrs	r3, r2, #31
 8000a2a:	1ac8      	subs	r0, r1, r3
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4403      	add	r3, r0
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	1ad0      	subs	r0, r2, r3
 8000a36:	2301      	movs	r3, #1
 8000a38:	2204      	movs	r2, #4
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	f7ff fe72 	bl	8000724 <fnd_display>

    
    fnd_display(fractional_part, 0, 4, NOT_DOT);
 8000a40:	2300      	movs	r3, #0
 8000a42:	2204      	movs	r2, #4
 8000a44:	2100      	movs	r1, #0
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f7ff fe6c 	bl	8000724 <fnd_display>
}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	66666667 	.word	0x66666667

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
  *i2c1_buffer = 0x00;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <main+0x80>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, ((LM75A_ADDR << 1) | I2C_WRITE), LM75A_CONFIGURATTION_REG_ADDR, 8, i2c1_buffer, 1, 100);
 8000a64:	2364      	movs	r3, #100	@ 0x64
 8000a66:	9302      	str	r3, [sp, #8]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <main+0x80>)
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2308      	movs	r3, #8
 8000a72:	2201      	movs	r2, #1
 8000a74:	2198      	movs	r1, #152	@ 0x98
 8000a76:	4819      	ldr	r0, [pc, #100]	@ (8000adc <main+0x84>)
 8000a78:	f001 fa80 	bl	8001f7c <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Read(&hi2c1, ((LM75A_ADDR << 1) | I2C_WRITE), LM75A_TEMPERATURE_REG_ADDR, 8, i2c1_buffer, 2, 100);
 8000a7c:	2364      	movs	r3, #100	@ 0x64
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	2302      	movs	r3, #2
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <main+0x80>)
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2308      	movs	r3, #8
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2198      	movs	r1, #152	@ 0x98
 8000a8e:	4813      	ldr	r0, [pc, #76]	@ (8000adc <main+0x84>)
 8000a90:	f001 fb6e 	bl	8002170 <HAL_I2C_Mem_Read>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a94:	f000 fc06 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a98:	f000 f82e 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9c:	f000 f8f2 	bl	8000c84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000aa0:	f000 f8c6 	bl	8000c30 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000aa4:	f000 f896 	bl	8000bd4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  CLCD_init();
 8000aa8:	f7ff fdd6 	bl	8000658 <CLCD_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aac:	f003 fdd8 	bl	8004660 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CLCDTask */
  CLCDTaskHandle = osThreadNew(StartDefaultTask, NULL, &CLCDTask_attributes);
 8000ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae0 <main+0x88>)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	480b      	ldr	r0, [pc, #44]	@ (8000ae4 <main+0x8c>)
 8000ab6:	f003 fe1d 	bl	80046f4 <osThreadNew>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <main+0x90>)
 8000abe:	6013      	str	r3, [r2, #0]

  /* creation of TEMP */
  TEMPHandle = osThreadNew(StartTask02, NULL, &TEMP_attributes);
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <main+0x94>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	480a      	ldr	r0, [pc, #40]	@ (8000af0 <main+0x98>)
 8000ac6:	f003 fe15 	bl	80046f4 <osThreadNew>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a09      	ldr	r2, [pc, #36]	@ (8000af4 <main+0x9c>)
 8000ace:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ad0:	f003 fdea 	bl	80046a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <main+0x7c>
 8000ad8:	2000014c 	.word	0x2000014c
 8000adc:	20000088 	.word	0x20000088
 8000ae0:	08007384 	.word	0x08007384
 8000ae4:	08000dbd 	.word	0x08000dbd
 8000ae8:	20000124 	.word	0x20000124
 8000aec:	080073a8 	.word	0x080073a8
 8000af0:	08000e21 	.word	0x08000e21
 8000af4:	20000128 	.word	0x20000128

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	@ 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2234      	movs	r2, #52	@ 0x34
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f006 fb06 	bl	8007118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <SystemClock_Config+0xd4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	4a29      	ldr	r2, [pc, #164]	@ (8000bcc <SystemClock_Config+0xd4>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2c:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <SystemClock_Config+0xd4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <SystemClock_Config+0xd8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b44:	4a22      	ldr	r2, [pc, #136]	@ (8000bd0 <SystemClock_Config+0xd8>)
 8000b46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <SystemClock_Config+0xd8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b60:	2310      	movs	r3, #16
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b64:	2302      	movs	r3, #2
 8000b66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b70:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b76:	2304      	movs	r3, #4
 8000b78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4618      	mov	r0, r3
 8000b88:	f002 fd22 	bl	80035d0 <HAL_RCC_OscConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b92:	f000 f9e7 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b96:	230f      	movs	r3, #15
 8000b98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 f990 	bl	8002ed8 <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bbe:	f000 f9d1 	bl	8000f64 <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3750      	adds	r7, #80	@ 0x50
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bda:	4a13      	ldr	r2, [pc, #76]	@ (8000c28 <MX_I2C1_Init+0x54>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000be0:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <MX_I2C1_Init+0x58>)
 8000be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bf2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c12:	f000 fe3d 	bl	8001890 <HAL_I2C_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 f9a2 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000088 	.word	0x20000088
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	000186a0 	.word	0x000186a0

08000c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <MX_USART2_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c68:	f003 f9f2 	bl	8004050 <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f000 f977 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000dc 	.word	0x200000dc
 8000c80:	40004400 	.word	0x40004400

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b43      	ldr	r3, [pc, #268]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a42      	ldr	r2, [pc, #264]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b40      	ldr	r3, [pc, #256]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b3c      	ldr	r3, [pc, #240]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a3b      	ldr	r2, [pc, #236]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b39      	ldr	r3, [pc, #228]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a34      	ldr	r2, [pc, #208]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8000dac <MX_GPIO_Init+0x128>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIG1_Pin|DIG2_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8000d10:	4827      	ldr	r0, [pc, #156]	@ (8000db0 <MX_GPIO_Init+0x12c>)
 8000d12:	f000 fda3 	bl	800185c <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIG4_Pin|DIG3_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8000d1c:	4825      	ldr	r0, [pc, #148]	@ (8000db4 <MX_GPIO_Init+0x130>)
 8000d1e:	f000 fd9d 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|LED_Pin
 8000d22:	2200      	movs	r2, #0
 8000d24:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 8000d28:	4823      	ldr	r0, [pc, #140]	@ (8000db8 <MX_GPIO_Init+0x134>)
 8000d2a:	f000 fd97 	bl	800185c <HAL_GPIO_WritePin>
                          |D_Pin|E_Pin|F_Pin|G_Pin
                          |DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d34:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	481a      	ldr	r0, [pc, #104]	@ (8000db0 <MX_GPIO_Init+0x12c>)
 8000d46:	f000 fbf5 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG1_Pin DIG2_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = DIG1_Pin|DIG2_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000d4a:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8000d4e:	617b      	str	r3, [r7, #20]
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4813      	ldr	r0, [pc, #76]	@ (8000db0 <MX_GPIO_Init+0x12c>)
 8000d64:	f000 fbe6 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DIG4_Pin DIG3_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DIG4_Pin|DIG3_Pin|LCD_E_Pin;
 8000d68:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <MX_GPIO_Init+0x130>)
 8000d82:	f000 fbd7 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin LED_Pin
                           D_Pin E_Pin F_Pin G_Pin
                           DP_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|LED_Pin
 8000d86:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8000d8a:	617b      	str	r3, [r7, #20]
                          |D_Pin|E_Pin|F_Pin|G_Pin
                          |DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <MX_GPIO_Init+0x134>)
 8000da0:	f000 fbc8 	bl	8001534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	@ 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40020400 	.word	0x40020400

08000dbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for (;;)
  {
    CLCD_init();
 8000dc4:	f7ff fc48 	bl	8000658 <CLCD_init>
    printFirstRow("MCSTECH INC!");
 8000dc8:	480f      	ldr	r0, [pc, #60]	@ (8000e08 <StartDefaultTask+0x4c>)
 8000dca:	f7ff fc76 	bl	80006ba <printFirstRow>
    printSecondRow("Institute");
 8000dce:	480f      	ldr	r0, [pc, #60]	@ (8000e0c <StartDefaultTask+0x50>)
 8000dd0:	f7ff fc8d 	bl	80006ee <printSecondRow>
    HAL_Delay(2000);
 8000dd4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dd8:	f000 faa6 	bl	8001328 <HAL_Delay>

    printFirstRow("Senior Staff");
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <StartDefaultTask+0x54>)
 8000dde:	f7ff fc6c 	bl	80006ba <printFirstRow>
    printSecondRow("LEE IN KANG");
 8000de2:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <StartDefaultTask+0x58>)
 8000de4:	f7ff fc83 	bl	80006ee <printSecondRow>
    HAL_Delay(2000);
 8000de8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dec:	f000 fa9c 	bl	8001328 <HAL_Delay>

    printFirstRow("My phone number");
 8000df0:	4809      	ldr	r0, [pc, #36]	@ (8000e18 <StartDefaultTask+0x5c>)
 8000df2:	f7ff fc62 	bl	80006ba <printFirstRow>
    printSecondRow("010-9105-4918");
 8000df6:	4809      	ldr	r0, [pc, #36]	@ (8000e1c <StartDefaultTask+0x60>)
 8000df8:	f7ff fc79 	bl	80006ee <printSecondRow>
    HAL_Delay(2000);
 8000dfc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e00:	f000 fa92 	bl	8001328 <HAL_Delay>
  {
 8000e04:	bf00      	nop
 8000e06:	e7dd      	b.n	8000dc4 <StartDefaultTask+0x8>
 8000e08:	08007314 	.word	0x08007314
 8000e0c:	08007324 	.word	0x08007324
 8000e10:	08007330 	.word	0x08007330
 8000e14:	08007340 	.word	0x08007340
 8000e18:	0800734c 	.word	0x0800734c
 8000e1c:	0800735c 	.word	0x0800735c

08000e20 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
    for(;;)
  { 
    temperature_displaying = 1; 
 8000e28:	4b38      	ldr	r3, [pc, #224]	@ (8000f0c <StartTask02+0xec>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]
    
    if(HAL_I2C_Master_Receive(&hi2c1,((LM75A_ADDR<<1)|I2C_WRITE), i2c1_buffer, 2, 100) == HAL_OK)
 8000e2e:	2364      	movs	r3, #100	@ 0x64
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2302      	movs	r3, #2
 8000e34:	4a36      	ldr	r2, [pc, #216]	@ (8000f10 <StartTask02+0xf0>)
 8000e36:	2198      	movs	r1, #152	@ 0x98
 8000e38:	4836      	ldr	r0, [pc, #216]	@ (8000f14 <StartTask02+0xf4>)
 8000e3a:	f000 fe6d 	bl	8001b18 <HAL_I2C_Master_Receive>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <StartTask02+0x2a>
      display_temperature(i2c1_buffer);
 8000e44:	4832      	ldr	r0, [pc, #200]	@ (8000f10 <StartTask02+0xf0>)
 8000e46:	f7ff fd9b 	bl	8000980 <display_temperature>

    temperature_displaying = 0;
 8000e4a:	4b30      	ldr	r3, [pc, #192]	@ (8000f0c <StartTask02+0xec>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]

    /* USER CODE END WHILE */
    if (((curtick = HAL_GetTick()) - prevTick) >= 1000)
 8000e50:	f000 fa5e 	bl	8001310 <HAL_GetTick>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4a30      	ldr	r2, [pc, #192]	@ (8000f18 <StartTask02+0xf8>)
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <StartTask02+0xf8>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <StartTask02+0xfc>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e68:	d319      	bcc.n	8000e9e <StartTask02+0x7e>
    {
      prevTick = curtick;
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f18 <StartTask02+0xf8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8000f1c <StartTask02+0xfc>)
 8000e70:	6013      	str	r3, [r2, #0]
      if (count == 0)
 8000e72:	4b2b      	ldr	r3, [pc, #172]	@ (8000f20 <StartTask02+0x100>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10c      	bne.n	8000e94 <StartTask02+0x74>
      {
        if (count != 0)
 8000e7a:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <StartTask02+0x100>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00d      	beq.n	8000e9e <StartTask02+0x7e>
        {
          count--;
 8000e82:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <StartTask02+0x100>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	4a25      	ldr	r2, [pc, #148]	@ (8000f20 <StartTask02+0x100>)
 8000e8a:	6013      	str	r3, [r2, #0]
          count = 0;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <StartTask02+0x100>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e004      	b.n	8000e9e <StartTask02+0x7e>
        }
      }
      else
        count--;
 8000e94:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <StartTask02+0x100>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <StartTask02+0x100>)
 8000e9c:	6013      	str	r3, [r2, #0]
    }
    num3 = count / 1000;         // 1000
 8000e9e:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <StartTask02+0x100>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a20      	ldr	r2, [pc, #128]	@ (8000f24 <StartTask02+0x104>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <StartTask02+0x108>)
 8000eac:	6013      	str	r3, [r2, #0]
    num2 = (count % 1000) / 100; // 100
 8000eae:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <StartTask02+0x100>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <StartTask02+0x104>)
 8000eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8000eb8:	099b      	lsrs	r3, r3, #6
 8000eba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ebe:	fb01 f303 	mul.w	r3, r1, r3
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	4a19      	ldr	r2, [pc, #100]	@ (8000f2c <StartTask02+0x10c>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	4a18      	ldr	r2, [pc, #96]	@ (8000f30 <StartTask02+0x110>)
 8000ece:	6013      	str	r3, [r2, #0]
    num1 = (count % 100) / 10;   // 10
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <StartTask02+0x100>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <StartTask02+0x10c>)
 8000ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2164      	movs	r1, #100	@ 0x64
 8000ede:	fb01 f303 	mul.w	r3, r1, r3
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	4a13      	ldr	r2, [pc, #76]	@ (8000f34 <StartTask02+0x114>)
 8000ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <StartTask02+0x118>)
 8000eee:	6013      	str	r3, [r2, #0]
    num0 = count % 10;           // 1
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <StartTask02+0x100>)
 8000ef2:	6819      	ldr	r1, [r3, #0]
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <StartTask02+0x114>)
 8000ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	1aca      	subs	r2, r1, r3
 8000f06:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <StartTask02+0x11c>)
 8000f08:	601a      	str	r2, [r3, #0]
    temperature_displaying = 1; 
 8000f0a:	e78d      	b.n	8000e28 <StartTask02+0x8>
 8000f0c:	2000012c 	.word	0x2000012c
 8000f10:	2000014c 	.word	0x2000014c
 8000f14:	20000088 	.word	0x20000088
 8000f18:	20000134 	.word	0x20000134
 8000f1c:	20000138 	.word	0x20000138
 8000f20:	20000130 	.word	0x20000130
 8000f24:	10624dd3 	.word	0x10624dd3
 8000f28:	2000013c 	.word	0x2000013c
 8000f2c:	51eb851f 	.word	0x51eb851f
 8000f30:	20000140 	.word	0x20000140
 8000f34:	cccccccd 	.word	0xcccccccd
 8000f38:	20000144 	.word	0x20000144
 8000f3c:	20000148 	.word	0x20000148

08000f40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f52:	f000 f9c9 	bl	80012e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40001000 	.word	0x40001000

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <Error_Handler+0x8>

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_MspInit+0x54>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	4a11      	ldr	r2, [pc, #68]	@ (8000fc4 <HAL_MspInit+0x54>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <HAL_MspInit+0x54>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <HAL_MspInit+0x54>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <HAL_MspInit+0x54>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <HAL_MspInit+0x54>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	210f      	movs	r1, #15
 8000fb2:	f06f 0001 	mvn.w	r0, #1
 8000fb6:	f000 fa93 	bl	80014e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	@ 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	@ (800104c <HAL_I2C_MspInit+0x84>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d12c      	bne.n	8001044 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <HAL_I2C_MspInit+0x88>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a17      	ldr	r2, [pc, #92]	@ (8001050 <HAL_I2C_MspInit+0x88>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <HAL_I2C_MspInit+0x88>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001006:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100c:	2312      	movs	r3, #18
 800100e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001018:	2304      	movs	r3, #4
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	@ (8001054 <HAL_I2C_MspInit+0x8c>)
 8001024:	f000 fa86 	bl	8001534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HAL_I2C_MspInit+0x88>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <HAL_I2C_MspInit+0x88>)
 8001032:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001036:	6413      	str	r3, [r2, #64]	@ 0x40
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <HAL_I2C_MspInit+0x88>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	@ 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40005400 	.word	0x40005400
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a19      	ldr	r2, [pc, #100]	@ (80010dc <HAL_UART_MspInit+0x84>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d12b      	bne.n	80010d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	4a17      	ldr	r2, [pc, #92]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 8001084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001088:	6413      	str	r3, [r2, #64]	@ 0x40
 800108a:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <HAL_UART_MspInit+0x88>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010b2:	230c      	movs	r3, #12
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c2:	2307      	movs	r3, #7
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <HAL_UART_MspInit+0x8c>)
 80010ce:	f000 fa31 	bl	8001534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	@ 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40004400 	.word	0x40004400
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000

080010e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08e      	sub	sp, #56	@ 0x38
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	4b33      	ldr	r3, [pc, #204]	@ (80011cc <HAL_InitTick+0xe4>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	4a32      	ldr	r2, [pc, #200]	@ (80011cc <HAL_InitTick+0xe4>)
 8001102:	f043 0310 	orr.w	r3, r3, #16
 8001106:	6413      	str	r3, [r2, #64]	@ 0x40
 8001108:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <HAL_InitTick+0xe4>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001114:	f107 0210 	add.w	r2, r7, #16
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fff4 	bl	800310c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800112a:	2b00      	cmp	r3, #0
 800112c:	d103      	bne.n	8001136 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800112e:	f001 ffc5 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 8001132:	6378      	str	r0, [r7, #52]	@ 0x34
 8001134:	e004      	b.n	8001140 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001136:	f001 ffc1 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 800113a:	4603      	mov	r3, r0
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001142:	4a23      	ldr	r2, [pc, #140]	@ (80011d0 <HAL_InitTick+0xe8>)
 8001144:	fba2 2303 	umull	r2, r3, r2, r3
 8001148:	0c9b      	lsrs	r3, r3, #18
 800114a:	3b01      	subs	r3, #1
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800114e:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <HAL_InitTick+0xec>)
 8001150:	4a21      	ldr	r2, [pc, #132]	@ (80011d8 <HAL_InitTick+0xf0>)
 8001152:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001154:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <HAL_InitTick+0xec>)
 8001156:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800115a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800115c:	4a1d      	ldr	r2, [pc, #116]	@ (80011d4 <HAL_InitTick+0xec>)
 800115e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001160:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001162:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <HAL_InitTick+0xec>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <HAL_InitTick+0xec>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <HAL_InitTick+0xec>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001174:	4817      	ldr	r0, [pc, #92]	@ (80011d4 <HAL_InitTick+0xec>)
 8001176:	f002 fcc9 	bl	8003b0c <HAL_TIM_Base_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001180:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001184:	2b00      	cmp	r3, #0
 8001186:	d11b      	bne.n	80011c0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001188:	4812      	ldr	r0, [pc, #72]	@ (80011d4 <HAL_InitTick+0xec>)
 800118a:	f002 fd19 	bl	8003bc0 <HAL_TIM_Base_Start_IT>
 800118e:	4603      	mov	r3, r0
 8001190:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001194:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001198:	2b00      	cmp	r3, #0
 800119a:	d111      	bne.n	80011c0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800119c:	2036      	movs	r0, #54	@ 0x36
 800119e:	f000 f9bb 	bl	8001518 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d808      	bhi.n	80011ba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	2036      	movs	r0, #54	@ 0x36
 80011ae:	f000 f997 	bl	80014e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_InitTick+0xf4>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	e002      	b.n	80011c0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3738      	adds	r7, #56	@ 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	431bde83 	.word	0x431bde83
 80011d4:	20000150 	.word	0x20000150
 80011d8:	40001000 	.word	0x40001000
 80011dc:	20000010 	.word	0x20000010

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <NMI_Handler+0x4>

080011e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <UsageFault_Handler+0x4>

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800121c:	4802      	ldr	r0, [pc, #8]	@ (8001228 <TIM6_DAC_IRQHandler+0x10>)
 800121e:	f002 fd3f 	bl	8003ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000150 	.word	0x20000150

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	@ (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001288 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001254:	f7ff ffea 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	@ (8001290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	@ (800129c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800127e:	f005 ffa9 	bl	80071d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff fbe9 	bl	8000a58 <main>
  bx  lr    
 8001286:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001294:	080073f4 	.word	0x080073f4
  ldr r2, =_sbss
 8001298:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800129c:	20004cc4 	.word	0x20004cc4

080012a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <HAL_Init+0x40>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <HAL_Init+0x40>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <HAL_Init+0x40>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 f8fc 	bl	80014ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	200f      	movs	r0, #15
 80012d4:	f7ff ff08 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fe4a 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	@ (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000014 	.word	0x20000014
 800130c:	20000198 	.word	0x20000198

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000198 	.word	0x20000198

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff ffee 	bl	8001310 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffde 	bl	8001310 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000014 	.word	0x20000014

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4907      	ldr	r1, [pc, #28]	@ (800140c <__NVIC_EnableIRQ+0x38>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	@ (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	@ (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	@ 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	@ 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff4c 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f2:	f7ff ff61 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 80014f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	6978      	ldr	r0, [r7, #20]
 80014fe:	f7ff ffb1 	bl	8001464 <NVIC_EncodePriority>
 8001502:	4602      	mov	r2, r0
 8001504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff80 	bl	8001410 <__NVIC_SetPriority>
}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff54 	bl	80013d4 <__NVIC_EnableIRQ>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	@ 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	e165      	b.n	800181c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001550:	2201      	movs	r2, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	429a      	cmp	r2, r3
 800156a:	f040 8154 	bne.w	8001816 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d005      	beq.n	8001586 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	2b02      	cmp	r3, #2
 8001584:	d130      	bne.n	80015e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015bc:	2201      	movs	r2, #1
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 0201 	and.w	r2, r3, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d017      	beq.n	8001624 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d123      	bne.n	8001678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	08da      	lsrs	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3208      	adds	r2, #8
 8001638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	69b9      	ldr	r1, [r7, #24]
 8001674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0203 	and.w	r2, r3, #3
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80ae 	beq.w	8001816 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b5d      	ldr	r3, [pc, #372]	@ (8001834 <HAL_GPIO_Init+0x300>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001834 <HAL_GPIO_Init+0x300>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001834 <HAL_GPIO_Init+0x300>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016d6:	4a58      	ldr	r2, [pc, #352]	@ (8001838 <HAL_GPIO_Init+0x304>)
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	220f      	movs	r2, #15
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4f      	ldr	r2, [pc, #316]	@ (800183c <HAL_GPIO_Init+0x308>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d025      	beq.n	800174e <HAL_GPIO_Init+0x21a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4e      	ldr	r2, [pc, #312]	@ (8001840 <HAL_GPIO_Init+0x30c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01f      	beq.n	800174a <HAL_GPIO_Init+0x216>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4d      	ldr	r2, [pc, #308]	@ (8001844 <HAL_GPIO_Init+0x310>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x212>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4c      	ldr	r2, [pc, #304]	@ (8001848 <HAL_GPIO_Init+0x314>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x20e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4b      	ldr	r2, [pc, #300]	@ (800184c <HAL_GPIO_Init+0x318>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x20a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4a      	ldr	r2, [pc, #296]	@ (8001850 <HAL_GPIO_Init+0x31c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x206>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a49      	ldr	r2, [pc, #292]	@ (8001854 <HAL_GPIO_Init+0x320>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x202>
 8001732:	2306      	movs	r3, #6
 8001734:	e00c      	b.n	8001750 <HAL_GPIO_Init+0x21c>
 8001736:	2307      	movs	r3, #7
 8001738:	e00a      	b.n	8001750 <HAL_GPIO_Init+0x21c>
 800173a:	2305      	movs	r3, #5
 800173c:	e008      	b.n	8001750 <HAL_GPIO_Init+0x21c>
 800173e:	2304      	movs	r3, #4
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x21c>
 8001742:	2303      	movs	r3, #3
 8001744:	e004      	b.n	8001750 <HAL_GPIO_Init+0x21c>
 8001746:	2302      	movs	r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x21c>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x21c>
 800174e:	2300      	movs	r3, #0
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4093      	lsls	r3, r2
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001760:	4935      	ldr	r1, [pc, #212]	@ (8001838 <HAL_GPIO_Init+0x304>)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176e:	4b3a      	ldr	r3, [pc, #232]	@ (8001858 <HAL_GPIO_Init+0x324>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001792:	4a31      	ldr	r2, [pc, #196]	@ (8001858 <HAL_GPIO_Init+0x324>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001798:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <HAL_GPIO_Init+0x324>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017bc:	4a26      	ldr	r2, [pc, #152]	@ (8001858 <HAL_GPIO_Init+0x324>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c2:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <HAL_GPIO_Init+0x324>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001858 <HAL_GPIO_Init+0x324>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <HAL_GPIO_Init+0x324>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001810:	4a11      	ldr	r2, [pc, #68]	@ (8001858 <HAL_GPIO_Init+0x324>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b0f      	cmp	r3, #15
 8001820:	f67f ae96 	bls.w	8001550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3724      	adds	r7, #36	@ 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40013800 	.word	0x40013800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40021400 	.word	0x40021400
 8001854:	40021800 	.word	0x40021800
 8001858:	40013c00 	.word	0x40013c00

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001878:	e003      	b.n	8001882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	041a      	lsls	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	619a      	str	r2, [r3, #24]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e12b      	b.n	8001afa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fb86 	bl	8000fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2224      	movs	r2, #36	@ 0x24
 80018c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018f4:	f001 fbe2 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 80018f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4a81      	ldr	r2, [pc, #516]	@ (8001b04 <HAL_I2C_Init+0x274>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d807      	bhi.n	8001914 <HAL_I2C_Init+0x84>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a80      	ldr	r2, [pc, #512]	@ (8001b08 <HAL_I2C_Init+0x278>)
 8001908:	4293      	cmp	r3, r2
 800190a:	bf94      	ite	ls
 800190c:	2301      	movls	r3, #1
 800190e:	2300      	movhi	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e006      	b.n	8001922 <HAL_I2C_Init+0x92>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a7d      	ldr	r2, [pc, #500]	@ (8001b0c <HAL_I2C_Init+0x27c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	bf94      	ite	ls
 800191c:	2301      	movls	r3, #1
 800191e:	2300      	movhi	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0e7      	b.n	8001afa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a78      	ldr	r2, [pc, #480]	@ (8001b10 <HAL_I2C_Init+0x280>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0c9b      	lsrs	r3, r3, #18
 8001934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a6a      	ldr	r2, [pc, #424]	@ (8001b04 <HAL_I2C_Init+0x274>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d802      	bhi.n	8001964 <HAL_I2C_Init+0xd4>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3301      	adds	r3, #1
 8001962:	e009      	b.n	8001978 <HAL_I2C_Init+0xe8>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	4a69      	ldr	r2, [pc, #420]	@ (8001b14 <HAL_I2C_Init+0x284>)
 8001970:	fba2 2303 	umull	r2, r3, r2, r3
 8001974:	099b      	lsrs	r3, r3, #6
 8001976:	3301      	adds	r3, #1
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	430b      	orrs	r3, r1
 800197e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800198a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	495c      	ldr	r1, [pc, #368]	@ (8001b04 <HAL_I2C_Init+0x274>)
 8001994:	428b      	cmp	r3, r1
 8001996:	d819      	bhi.n	80019cc <HAL_I2C_Init+0x13c>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1e59      	subs	r1, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a6:	1c59      	adds	r1, r3, #1
 80019a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019ac:	400b      	ands	r3, r1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00a      	beq.n	80019c8 <HAL_I2C_Init+0x138>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1e59      	subs	r1, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c0:	3301      	adds	r3, #1
 80019c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c6:	e051      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 80019c8:	2304      	movs	r3, #4
 80019ca:	e04f      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d111      	bne.n	80019f8 <HAL_I2C_Init+0x168>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1e58      	subs	r0, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6859      	ldr	r1, [r3, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	440b      	add	r3, r1
 80019e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	e012      	b.n	8001a1e <HAL_I2C_Init+0x18e>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1e58      	subs	r0, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	0099      	lsls	r1, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Init+0x196>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e022      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10e      	bne.n	8001a4c <HAL_I2C_Init+0x1bc>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1e58      	subs	r0, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6859      	ldr	r1, [r3, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	440b      	add	r3, r1
 8001a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a40:	3301      	adds	r3, #1
 8001a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a4a:	e00f      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1e58      	subs	r0, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	0099      	lsls	r1, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a62:	3301      	adds	r3, #1
 8001a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	6809      	ldr	r1, [r1, #0]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6911      	ldr	r1, [r2, #16]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68d2      	ldr	r2, [r2, #12]
 8001aa6:	4311      	orrs	r1, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	000186a0 	.word	0x000186a0
 8001b08:	001e847f 	.word	0x001e847f
 8001b0c:	003d08ff 	.word	0x003d08ff
 8001b10:	431bde83 	.word	0x431bde83
 8001b14:	10624dd3 	.word	0x10624dd3

08001b18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	@ 0x30
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	461a      	mov	r2, r3
 8001b24:	460b      	mov	r3, r1
 8001b26:	817b      	strh	r3, [r7, #10]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff fbf0 	bl	8001310 <HAL_GetTick>
 8001b30:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	f040 8217 	bne.w	8001f6e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2319      	movs	r3, #25
 8001b46:	2201      	movs	r2, #1
 8001b48:	497c      	ldr	r1, [pc, #496]	@ (8001d3c <HAL_I2C_Master_Receive+0x224>)
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 ff8e 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
 8001b58:	e20a      	b.n	8001f70 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_I2C_Master_Receive+0x50>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e203      	b.n	8001f70 <HAL_I2C_Master_Receive+0x458>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d007      	beq.n	8001b8e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2222      	movs	r2, #34	@ 0x22
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2210      	movs	r2, #16
 8001baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	893a      	ldrh	r2, [r7, #8]
 8001bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4a5c      	ldr	r2, [pc, #368]	@ (8001d40 <HAL_I2C_Master_Receive+0x228>)
 8001bce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bd0:	8979      	ldrh	r1, [r7, #10]
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 fcfc 	bl	80025d4 <I2C_MasterRequestRead>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e1c4      	b.n	8001f70 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d113      	bne.n	8001c16 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	623b      	str	r3, [r7, #32]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	623b      	str	r3, [r7, #32]
 8001c02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e198      	b.n	8001f48 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d11b      	bne.n	8001c56 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	e178      	b.n	8001f48 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d11b      	bne.n	8001c96 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	e158      	b.n	8001f48 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ca4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001cbc:	e144      	b.n	8001f48 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	f200 80f1 	bhi.w	8001eaa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d123      	bne.n	8001d18 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f001 f873 	bl	8002dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e145      	b.n	8001f70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d16:	e117      	b.n	8001f48 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d14e      	bne.n	8001dbe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d26:	2200      	movs	r2, #0
 8001d28:	4906      	ldr	r1, [pc, #24]	@ (8001d44 <HAL_I2C_Master_Receive+0x22c>)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fe9e 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d008      	beq.n	8001d48 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e11a      	b.n	8001f70 <HAL_I2C_Master_Receive+0x458>
 8001d3a:	bf00      	nop
 8001d3c:	00100002 	.word	0x00100002
 8001d40:	ffff0000 	.word	0xffff0000
 8001d44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001dbc:	e0c4      	b.n	8001f48 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	496c      	ldr	r1, [pc, #432]	@ (8001f78 <HAL_I2C_Master_Receive+0x460>)
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 fe4f 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0cb      	b.n	8001f70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001de6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e20:	2200      	movs	r2, #0
 8001e22:	4955      	ldr	r1, [pc, #340]	@ (8001f78 <HAL_I2C_Master_Receive+0x460>)
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fe21 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e09d      	b.n	8001f70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ea8:	e04e      	b.n	8001f48 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 ff86 	bl	8002dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e058      	b.n	8001f70 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d124      	bne.n	8001f48 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d107      	bne.n	8001f16 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f14:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f47f aeb6 	bne.w	8001cbe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001f6e:	2302      	movs	r3, #2
  }
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3728      	adds	r7, #40	@ 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	00010004 	.word	0x00010004

08001f7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	4608      	mov	r0, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	817b      	strh	r3, [r7, #10]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	813b      	strh	r3, [r7, #8]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f96:	f7ff f9bb 	bl	8001310 <HAL_GetTick>
 8001f9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	f040 80d9 	bne.w	800215c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2319      	movs	r3, #25
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	496d      	ldr	r1, [pc, #436]	@ (8002168 <HAL_I2C_Mem_Write+0x1ec>)
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fd59 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e0cc      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2C_Mem_Write+0x56>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e0c5      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d007      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002006:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2221      	movs	r2, #33	@ 0x21
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2240      	movs	r2, #64	@ 0x40
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a3a      	ldr	r2, [r7, #32]
 8002022:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002028:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a4d      	ldr	r2, [pc, #308]	@ (800216c <HAL_I2C_Mem_Write+0x1f0>)
 8002038:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800203a:	88f8      	ldrh	r0, [r7, #6]
 800203c:	893a      	ldrh	r2, [r7, #8]
 800203e:	8979      	ldrh	r1, [r7, #10]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4603      	mov	r3, r0
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fb90 	bl	8002770 <I2C_RequestMemoryWrite>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d052      	beq.n	80020fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e081      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fe1e 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00d      	beq.n	8002086 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	2b04      	cmp	r3, #4
 8002070:	d107      	bne.n	8002082 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06b      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d11b      	bne.n	80020fc <HAL_I2C_Mem_Write+0x180>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d017      	beq.n	80020fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d0:	781a      	ldrb	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1aa      	bne.n	800205a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fe11 	bl	8002d30 <I2C_WaitOnBTFFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00d      	beq.n	8002130 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	2b04      	cmp	r3, #4
 800211a:	d107      	bne.n	800212c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800212a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e016      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800213e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	e000      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800215c:	2302      	movs	r3, #2
  }
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	00100002 	.word	0x00100002
 800216c:	ffff0000 	.word	0xffff0000

08002170 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	@ 0x30
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	4608      	mov	r0, r1
 800217a:	4611      	mov	r1, r2
 800217c:	461a      	mov	r2, r3
 800217e:	4603      	mov	r3, r0
 8002180:	817b      	strh	r3, [r7, #10]
 8002182:	460b      	mov	r3, r1
 8002184:	813b      	strh	r3, [r7, #8]
 8002186:	4613      	mov	r3, r2
 8002188:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800218a:	f7ff f8c1 	bl	8001310 <HAL_GetTick>
 800218e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b20      	cmp	r3, #32
 800219a:	f040 8214 	bne.w	80025c6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2319      	movs	r3, #25
 80021a4:	2201      	movs	r2, #1
 80021a6:	497b      	ldr	r1, [pc, #492]	@ (8002394 <HAL_I2C_Mem_Read+0x224>)
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fc5f 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
 80021b6:	e207      	b.n	80025c8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_Mem_Read+0x56>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e200      	b.n	80025c8 <HAL_I2C_Mem_Read+0x458>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d007      	beq.n	80021ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2222      	movs	r2, #34	@ 0x22
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2240      	movs	r2, #64	@ 0x40
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002216:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800221c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a5b      	ldr	r2, [pc, #364]	@ (8002398 <HAL_I2C_Mem_Read+0x228>)
 800222c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800222e:	88f8      	ldrh	r0, [r7, #6]
 8002230:	893a      	ldrh	r2, [r7, #8]
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	4603      	mov	r3, r0
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fb2c 	bl	800289c <I2C_RequestMemoryRead>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e1bc      	b.n	80025c8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002252:	2b00      	cmp	r3, #0
 8002254:	d113      	bne.n	800227e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	623b      	str	r3, [r7, #32]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	623b      	str	r3, [r7, #32]
 800226a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e190      	b.n	80025a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002282:	2b01      	cmp	r3, #1
 8002284:	d11b      	bne.n	80022be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002294:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e170      	b.n	80025a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d11b      	bne.n	80022fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	e150      	b.n	80025a0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002314:	e144      	b.n	80025a0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231a:	2b03      	cmp	r3, #3
 800231c:	f200 80f1 	bhi.w	8002502 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002324:	2b01      	cmp	r3, #1
 8002326:	d123      	bne.n	8002370 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800232a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fd47 	bl	8002dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e145      	b.n	80025c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800236e:	e117      	b.n	80025a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002374:	2b02      	cmp	r3, #2
 8002376:	d14e      	bne.n	8002416 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800237e:	2200      	movs	r2, #0
 8002380:	4906      	ldr	r1, [pc, #24]	@ (800239c <HAL_I2C_Mem_Read+0x22c>)
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fb72 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e11a      	b.n	80025c8 <HAL_I2C_Mem_Read+0x458>
 8002392:	bf00      	nop
 8002394:	00100002 	.word	0x00100002
 8002398:	ffff0000 	.word	0xffff0000
 800239c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002414:	e0c4      	b.n	80025a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241c:	2200      	movs	r2, #0
 800241e:	496c      	ldr	r1, [pc, #432]	@ (80025d0 <HAL_I2C_Mem_Read+0x460>)
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fb23 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0cb      	b.n	80025c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800243e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002478:	2200      	movs	r2, #0
 800247a:	4955      	ldr	r1, [pc, #340]	@ (80025d0 <HAL_I2C_Mem_Read+0x460>)
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 faf5 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e09d      	b.n	80025c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800249a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002500:	e04e      	b.n	80025a0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002504:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fc5a 	bl	8002dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e058      	b.n	80025c8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b04      	cmp	r3, #4
 8002554:	d124      	bne.n	80025a0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	2b03      	cmp	r3, #3
 800255c:	d107      	bne.n	800256e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800256c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f47f aeb6 	bne.w	8002316 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3728      	adds	r7, #40	@ 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	00010004 	.word	0x00010004

080025d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	460b      	mov	r3, r1
 80025e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d006      	beq.n	800260e <I2C_MasterRequestRead+0x3a>
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d003      	beq.n	800260e <I2C_MasterRequestRead+0x3a>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800260c:	d108      	bne.n	8002620 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e00b      	b.n	8002638 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	2b11      	cmp	r3, #17
 8002626:	d107      	bne.n	8002638 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002636:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fa11 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800265e:	d103      	bne.n	8002668 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e079      	b.n	8002760 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002674:	d108      	bne.n	8002688 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002676:	897b      	ldrh	r3, [r7, #10]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	b2da      	uxtb	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	611a      	str	r2, [r3, #16]
 8002686:	e05f      	b.n	8002748 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002688:	897b      	ldrh	r3, [r7, #10]
 800268a:	11db      	asrs	r3, r3, #7
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 0306 	and.w	r3, r3, #6
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f063 030f 	orn	r3, r3, #15
 8002698:	b2da      	uxtb	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4930      	ldr	r1, [pc, #192]	@ (8002768 <I2C_MasterRequestRead+0x194>)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fa5a 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e054      	b.n	8002760 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4929      	ldr	r1, [pc, #164]	@ (800276c <I2C_MasterRequestRead+0x198>)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fa4a 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e044      	b.n	8002760 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f9af 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002722:	d103      	bne.n	800272c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e017      	b.n	8002760 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002730:	897b      	ldrh	r3, [r7, #10]
 8002732:	11db      	asrs	r3, r3, #7
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f003 0306 	and.w	r3, r3, #6
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f063 030e 	orn	r3, r3, #14
 8002740:	b2da      	uxtb	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4907      	ldr	r1, [pc, #28]	@ (800276c <I2C_MasterRequestRead+0x198>)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fa06 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	00010008 	.word	0x00010008
 800276c:	00010002 	.word	0x00010002

08002770 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	4608      	mov	r0, r1
 800277a:	4611      	mov	r1, r2
 800277c:	461a      	mov	r2, r3
 800277e:	4603      	mov	r3, r0
 8002780:	817b      	strh	r3, [r7, #10]
 8002782:	460b      	mov	r3, r1
 8002784:	813b      	strh	r3, [r7, #8]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f960 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027c0:	d103      	bne.n	80027ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e05f      	b.n	800288e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	6a3a      	ldr	r2, [r7, #32]
 80027e2:	492d      	ldr	r1, [pc, #180]	@ (8002898 <I2C_RequestMemoryWrite+0x128>)
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f9bb 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e04c      	b.n	800288e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800280c:	6a39      	ldr	r1, [r7, #32]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fa46 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	2b04      	cmp	r3, #4
 8002820:	d107      	bne.n	8002832 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e02b      	b.n	800288e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800283c:	893b      	ldrh	r3, [r7, #8]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	611a      	str	r2, [r3, #16]
 8002846:	e021      	b.n	800288c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002848:	893b      	ldrh	r3, [r7, #8]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b29b      	uxth	r3, r3
 800284e:	b2da      	uxtb	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002858:	6a39      	ldr	r1, [r7, #32]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fa20 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	2b04      	cmp	r3, #4
 800286c:	d107      	bne.n	800287e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e005      	b.n	800288e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002882:	893b      	ldrh	r3, [r7, #8]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	00010002 	.word	0x00010002

0800289c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	4608      	mov	r0, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	461a      	mov	r2, r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	817b      	strh	r3, [r7, #10]
 80028ae:	460b      	mov	r3, r1
 80028b0:	813b      	strh	r3, [r7, #8]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	2200      	movs	r2, #0
 80028de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f8c2 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00d      	beq.n	800290a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028fc:	d103      	bne.n	8002906 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002904:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0aa      	b.n	8002a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800290a:	897b      	ldrh	r3, [r7, #10]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	6a3a      	ldr	r2, [r7, #32]
 800291e:	4952      	ldr	r1, [pc, #328]	@ (8002a68 <I2C_RequestMemoryRead+0x1cc>)
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f91d 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e097      	b.n	8002a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002948:	6a39      	ldr	r1, [r7, #32]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f9a8 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	2b04      	cmp	r3, #4
 800295c:	d107      	bne.n	800296e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e076      	b.n	8002a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002978:	893b      	ldrh	r3, [r7, #8]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	611a      	str	r2, [r3, #16]
 8002982:	e021      	b.n	80029c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002984:	893b      	ldrh	r3, [r7, #8]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	b29b      	uxth	r3, r3
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002994:	6a39      	ldr	r1, [r7, #32]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f982 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d107      	bne.n	80029ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e050      	b.n	8002a60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029be:	893b      	ldrh	r3, [r7, #8]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ca:	6a39      	ldr	r1, [r7, #32]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f967 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d107      	bne.n	80029f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e035      	b.n	8002a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f82b 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a2a:	d103      	bne.n	8002a34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e013      	b.n	8002a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a38:	897b      	ldrh	r3, [r7, #10]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	6a3a      	ldr	r2, [r7, #32]
 8002a4c:	4906      	ldr	r1, [pc, #24]	@ (8002a68 <I2C_RequestMemoryRead+0x1cc>)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f886 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	00010002 	.word	0x00010002

08002a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a7c:	e048      	b.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d044      	beq.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7fe fc43 	bl	8001310 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d139      	bne.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10d      	bne.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	43da      	mvns	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	e00c      	b.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4013      	ands	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf0c      	ite	eq
 8002ad4:	2301      	moveq	r3, #1
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d116      	bne.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e023      	b.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10d      	bne.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	43da      	mvns	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4013      	ands	r3, r2
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	e00c      	b.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	43da      	mvns	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4013      	ands	r3, r2
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d093      	beq.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b6e:	e071      	b.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b7e:	d123      	bne.n	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e067      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d041      	beq.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd0:	f7fe fb9e 	bl	8001310 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d136      	bne.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d10c      	bne.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	e00b      	b.n	8002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	43da      	mvns	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e021      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d10c      	bne.n	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	43da      	mvns	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf14      	ite	ne
 8002c70:	2301      	movne	r3, #1
 8002c72:	2300      	moveq	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e00b      	b.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf14      	ite	ne
 8002c8a:	2301      	movne	r3, #1
 8002c8c:	2300      	moveq	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f af6d 	bne.w	8002b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cac:	e034      	b.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f8e3 	bl	8002e7a <I2C_IsAcknowledgeFailed>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e034      	b.n	8002d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d028      	beq.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7fe fb23 	bl	8001310 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11d      	bne.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce6:	2b80      	cmp	r3, #128	@ 0x80
 8002ce8:	d016      	beq.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d22:	2b80      	cmp	r3, #128	@ 0x80
 8002d24:	d1c3      	bne.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f89b 	bl	8002e7a <I2C_IsAcknowledgeFailed>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e034      	b.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d028      	beq.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe fadb 	bl	8001310 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11d      	bne.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d016      	beq.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e007      	b.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d1c3      	bne.n	8002d3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dcc:	e049      	b.n	8002e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d119      	bne.n	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0210 	mvn.w	r2, #16
 8002de4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e030      	b.n	8002e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e10:	f7fe fa7e 	bl	8001310 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d302      	bcc.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11d      	bne.n	8002e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e30:	2b40      	cmp	r3, #64	@ 0x40
 8002e32:	d016      	beq.n	8002e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e007      	b.n	8002e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6c:	2b40      	cmp	r3, #64	@ 0x40
 8002e6e:	d1ae      	bne.n	8002dce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e90:	d11b      	bne.n	8002eca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	f043 0204 	orr.w	r2, r3, #4
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0cc      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b68      	ldr	r3, [pc, #416]	@ (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d90c      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b65      	ldr	r3, [pc, #404]	@ (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b63      	ldr	r3, [pc, #396]	@ (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0b8      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f2c:	4b59      	ldr	r3, [pc, #356]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a58      	ldr	r2, [pc, #352]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f44:	4b53      	ldr	r3, [pc, #332]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a52      	ldr	r2, [pc, #328]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f50:	4b50      	ldr	r3, [pc, #320]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	494d      	ldr	r1, [pc, #308]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d044      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	4b47      	ldr	r3, [pc, #284]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d119      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e07f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d003      	beq.n	8002f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b3f      	ldr	r3, [pc, #252]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e06f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e067      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb6:	4b37      	ldr	r3, [pc, #220]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f023 0203 	bic.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4934      	ldr	r1, [pc, #208]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe f9a2 	bl	8001310 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fe f99e 	bl	8001310 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e04f      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 020c 	and.w	r2, r3, #12
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d1eb      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b25      	ldr	r3, [pc, #148]	@ (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d20c      	bcs.n	8003020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b22      	ldr	r3, [pc, #136]	@ (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b20      	ldr	r3, [pc, #128]	@ (8003090 <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e032      	b.n	8003086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302c:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4916      	ldr	r1, [pc, #88]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800304a:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	490e      	ldr	r1, [pc, #56]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800305e:	f000 f887 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8003062:	4602      	mov	r2, r0
 8003064:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	490a      	ldr	r1, [pc, #40]	@ (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	5ccb      	ldrb	r3, [r1, r3]
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	4a09      	ldr	r2, [pc, #36]	@ (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800307a:	4b09      	ldr	r3, [pc, #36]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe f832 	bl	80010e8 <HAL_InitTick>

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023c00 	.word	0x40023c00
 8003094:	40023800 	.word	0x40023800
 8003098:	080073cc 	.word	0x080073cc
 800309c:	2000000c 	.word	0x2000000c
 80030a0:	20000010 	.word	0x20000010

080030a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a8:	4b03      	ldr	r3, [pc, #12]	@ (80030b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030aa:	681b      	ldr	r3, [r3, #0]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	2000000c 	.word	0x2000000c

080030bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030c0:	f7ff fff0 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0a9b      	lsrs	r3, r3, #10
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4903      	ldr	r1, [pc, #12]	@ (80030e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	080073dc 	.word	0x080073dc

080030e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030e8:	f7ff ffdc 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	0b5b      	lsrs	r3, r3, #13
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4903      	ldr	r1, [pc, #12]	@ (8003108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40023800 	.word	0x40023800
 8003108:	080073dc 	.word	0x080073dc

0800310c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	220f      	movs	r2, #15
 800311a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800311c:	4b12      	ldr	r3, [pc, #72]	@ (8003168 <HAL_RCC_GetClockConfig+0x5c>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0203 	and.w	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003128:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <HAL_RCC_GetClockConfig+0x5c>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <HAL_RCC_GetClockConfig+0x5c>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003140:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <HAL_RCC_GetClockConfig+0x5c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	08db      	lsrs	r3, r3, #3
 8003146:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800314e:	4b07      	ldr	r3, [pc, #28]	@ (800316c <HAL_RCC_GetClockConfig+0x60>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 020f 	and.w	r2, r3, #15
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	601a      	str	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	40023c00 	.word	0x40023c00

08003170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003174:	b0ae      	sub	sp, #184	@ 0xb8
 8003176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003196:	4bcb      	ldr	r3, [pc, #812]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	f200 8206 	bhi.w	80035b0 <HAL_RCC_GetSysClockFreq+0x440>
 80031a4:	a201      	add	r2, pc, #4	@ (adr r2, 80031ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	080031e1 	.word	0x080031e1
 80031b0:	080035b1 	.word	0x080035b1
 80031b4:	080035b1 	.word	0x080035b1
 80031b8:	080035b1 	.word	0x080035b1
 80031bc:	080031e9 	.word	0x080031e9
 80031c0:	080035b1 	.word	0x080035b1
 80031c4:	080035b1 	.word	0x080035b1
 80031c8:	080035b1 	.word	0x080035b1
 80031cc:	080031f1 	.word	0x080031f1
 80031d0:	080035b1 	.word	0x080035b1
 80031d4:	080035b1 	.word	0x080035b1
 80031d8:	080035b1 	.word	0x080035b1
 80031dc:	080033e1 	.word	0x080033e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4bb9      	ldr	r3, [pc, #740]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80031e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80031e6:	e1e7      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031e8:	4bb8      	ldr	r3, [pc, #736]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80031ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031ee:	e1e3      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f0:	4bb4      	ldr	r3, [pc, #720]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fc:	4bb1      	ldr	r3, [pc, #708]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d071      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003208:	4bae      	ldr	r3, [pc, #696]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	099b      	lsrs	r3, r3, #6
 800320e:	2200      	movs	r2, #0
 8003210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003214:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800321c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003220:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800322a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800322e:	4622      	mov	r2, r4
 8003230:	462b      	mov	r3, r5
 8003232:	f04f 0000 	mov.w	r0, #0
 8003236:	f04f 0100 	mov.w	r1, #0
 800323a:	0159      	lsls	r1, r3, #5
 800323c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003240:	0150      	lsls	r0, r2, #5
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4621      	mov	r1, r4
 8003248:	1a51      	subs	r1, r2, r1
 800324a:	6439      	str	r1, [r7, #64]	@ 0x40
 800324c:	4629      	mov	r1, r5
 800324e:	eb63 0301 	sbc.w	r3, r3, r1
 8003252:	647b      	str	r3, [r7, #68]	@ 0x44
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003260:	4649      	mov	r1, r9
 8003262:	018b      	lsls	r3, r1, #6
 8003264:	4641      	mov	r1, r8
 8003266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800326a:	4641      	mov	r1, r8
 800326c:	018a      	lsls	r2, r1, #6
 800326e:	4641      	mov	r1, r8
 8003270:	1a51      	subs	r1, r2, r1
 8003272:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003274:	4649      	mov	r1, r9
 8003276:	eb63 0301 	sbc.w	r3, r3, r1
 800327a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003288:	4649      	mov	r1, r9
 800328a:	00cb      	lsls	r3, r1, #3
 800328c:	4641      	mov	r1, r8
 800328e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003292:	4641      	mov	r1, r8
 8003294:	00ca      	lsls	r2, r1, #3
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	4603      	mov	r3, r0
 800329c:	4622      	mov	r2, r4
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80032a2:	462b      	mov	r3, r5
 80032a4:	460a      	mov	r2, r1
 80032a6:	eb42 0303 	adc.w	r3, r2, r3
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032b8:	4629      	mov	r1, r5
 80032ba:	024b      	lsls	r3, r1, #9
 80032bc:	4621      	mov	r1, r4
 80032be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032c2:	4621      	mov	r1, r4
 80032c4:	024a      	lsls	r2, r1, #9
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032ce:	2200      	movs	r2, #0
 80032d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80032dc:	f7fc ff98 	bl	8000210 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032ea:	e067      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ec:	4b75      	ldr	r3, [pc, #468]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80032fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003304:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003306:	2300      	movs	r3, #0
 8003308:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800330a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800330e:	4622      	mov	r2, r4
 8003310:	462b      	mov	r3, r5
 8003312:	f04f 0000 	mov.w	r0, #0
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	0159      	lsls	r1, r3, #5
 800331c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003320:	0150      	lsls	r0, r2, #5
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4621      	mov	r1, r4
 8003328:	1a51      	subs	r1, r2, r1
 800332a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800332c:	4629      	mov	r1, r5
 800332e:	eb63 0301 	sbc.w	r3, r3, r1
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003340:	4649      	mov	r1, r9
 8003342:	018b      	lsls	r3, r1, #6
 8003344:	4641      	mov	r1, r8
 8003346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800334a:	4641      	mov	r1, r8
 800334c:	018a      	lsls	r2, r1, #6
 800334e:	4641      	mov	r1, r8
 8003350:	ebb2 0a01 	subs.w	sl, r2, r1
 8003354:	4649      	mov	r1, r9
 8003356:	eb63 0b01 	sbc.w	fp, r3, r1
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003366:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800336a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800336e:	4692      	mov	sl, r2
 8003370:	469b      	mov	fp, r3
 8003372:	4623      	mov	r3, r4
 8003374:	eb1a 0303 	adds.w	r3, sl, r3
 8003378:	623b      	str	r3, [r7, #32]
 800337a:	462b      	mov	r3, r5
 800337c:	eb4b 0303 	adc.w	r3, fp, r3
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800338e:	4629      	mov	r1, r5
 8003390:	028b      	lsls	r3, r1, #10
 8003392:	4621      	mov	r1, r4
 8003394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003398:	4621      	mov	r1, r4
 800339a:	028a      	lsls	r2, r1, #10
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033a4:	2200      	movs	r2, #0
 80033a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80033a8:	677a      	str	r2, [r7, #116]	@ 0x74
 80033aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80033ae:	f7fc ff2f 	bl	8000210 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4613      	mov	r3, r2
 80033b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033bc:	4b41      	ldr	r3, [pc, #260]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	3301      	adds	r3, #1
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80033ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033de:	e0eb      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e0:	4b38      	ldr	r3, [pc, #224]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ec:	4b35      	ldr	r3, [pc, #212]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d06b      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f8:	4b32      	ldr	r3, [pc, #200]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	2200      	movs	r2, #0
 8003400:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003402:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003404:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340a:	663b      	str	r3, [r7, #96]	@ 0x60
 800340c:	2300      	movs	r3, #0
 800340e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003410:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003414:	4622      	mov	r2, r4
 8003416:	462b      	mov	r3, r5
 8003418:	f04f 0000 	mov.w	r0, #0
 800341c:	f04f 0100 	mov.w	r1, #0
 8003420:	0159      	lsls	r1, r3, #5
 8003422:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003426:	0150      	lsls	r0, r2, #5
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4621      	mov	r1, r4
 800342e:	1a51      	subs	r1, r2, r1
 8003430:	61b9      	str	r1, [r7, #24]
 8003432:	4629      	mov	r1, r5
 8003434:	eb63 0301 	sbc.w	r3, r3, r1
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003446:	4659      	mov	r1, fp
 8003448:	018b      	lsls	r3, r1, #6
 800344a:	4651      	mov	r1, sl
 800344c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003450:	4651      	mov	r1, sl
 8003452:	018a      	lsls	r2, r1, #6
 8003454:	4651      	mov	r1, sl
 8003456:	ebb2 0801 	subs.w	r8, r2, r1
 800345a:	4659      	mov	r1, fp
 800345c:	eb63 0901 	sbc.w	r9, r3, r1
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003470:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003474:	4690      	mov	r8, r2
 8003476:	4699      	mov	r9, r3
 8003478:	4623      	mov	r3, r4
 800347a:	eb18 0303 	adds.w	r3, r8, r3
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	462b      	mov	r3, r5
 8003482:	eb49 0303 	adc.w	r3, r9, r3
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003494:	4629      	mov	r1, r5
 8003496:	024b      	lsls	r3, r1, #9
 8003498:	4621      	mov	r1, r4
 800349a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800349e:	4621      	mov	r1, r4
 80034a0:	024a      	lsls	r2, r1, #9
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034aa:	2200      	movs	r2, #0
 80034ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80034b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034b4:	f7fc feac 	bl	8000210 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034c2:	e065      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x420>
 80034c4:	40023800 	.word	0x40023800
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d0:	4b3d      	ldr	r3, [pc, #244]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	2200      	movs	r2, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	4611      	mov	r1, r2
 80034dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80034e2:	2300      	movs	r3, #0
 80034e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80034e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80034ea:	4642      	mov	r2, r8
 80034ec:	464b      	mov	r3, r9
 80034ee:	f04f 0000 	mov.w	r0, #0
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	0159      	lsls	r1, r3, #5
 80034f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fc:	0150      	lsls	r0, r2, #5
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4641      	mov	r1, r8
 8003504:	1a51      	subs	r1, r2, r1
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	4649      	mov	r1, r9
 800350a:	eb63 0301 	sbc.w	r3, r3, r1
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800351c:	4659      	mov	r1, fp
 800351e:	018b      	lsls	r3, r1, #6
 8003520:	4651      	mov	r1, sl
 8003522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003526:	4651      	mov	r1, sl
 8003528:	018a      	lsls	r2, r1, #6
 800352a:	4651      	mov	r1, sl
 800352c:	1a54      	subs	r4, r2, r1
 800352e:	4659      	mov	r1, fp
 8003530:	eb63 0501 	sbc.w	r5, r3, r1
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	00eb      	lsls	r3, r5, #3
 800353e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003542:	00e2      	lsls	r2, r4, #3
 8003544:	4614      	mov	r4, r2
 8003546:	461d      	mov	r5, r3
 8003548:	4643      	mov	r3, r8
 800354a:	18e3      	adds	r3, r4, r3
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	464b      	mov	r3, r9
 8003550:	eb45 0303 	adc.w	r3, r5, r3
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003562:	4629      	mov	r1, r5
 8003564:	028b      	lsls	r3, r1, #10
 8003566:	4621      	mov	r1, r4
 8003568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800356c:	4621      	mov	r1, r4
 800356e:	028a      	lsls	r2, r1, #10
 8003570:	4610      	mov	r0, r2
 8003572:	4619      	mov	r1, r3
 8003574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003578:	2200      	movs	r2, #0
 800357a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800357c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800357e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003582:	f7fc fe45 	bl	8000210 <__aeabi_uldivmod>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4613      	mov	r3, r2
 800358c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003590:	4b0d      	ldr	r3, [pc, #52]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	0f1b      	lsrs	r3, r3, #28
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800359e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035ae:	e003      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80035b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	37b8      	adds	r7, #184	@ 0xb8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800
 80035cc:	00f42400 	.word	0x00f42400

080035d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e28d      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8083 	beq.w	80036f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035f0:	4b94      	ldr	r3, [pc, #592]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d019      	beq.n	8003630 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035fc:	4b91      	ldr	r3, [pc, #580]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003604:	2b08      	cmp	r3, #8
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003608:	4b8e      	ldr	r3, [pc, #568]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003610:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003614:	d00c      	beq.n	8003630 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003616:	4b8b      	ldr	r3, [pc, #556]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d112      	bne.n	8003648 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003622:	4b88      	ldr	r3, [pc, #544]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362e:	d10b      	bne.n	8003648 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	4b84      	ldr	r3, [pc, #528]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d05b      	beq.n	80036f4 <HAL_RCC_OscConfig+0x124>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d157      	bne.n	80036f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e25a      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003650:	d106      	bne.n	8003660 <HAL_RCC_OscConfig+0x90>
 8003652:	4b7c      	ldr	r3, [pc, #496]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7b      	ldr	r2, [pc, #492]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e01d      	b.n	800369c <HAL_RCC_OscConfig+0xcc>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0xb4>
 800366a:	4b76      	ldr	r3, [pc, #472]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a75      	ldr	r2, [pc, #468]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b73      	ldr	r3, [pc, #460]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a72      	ldr	r2, [pc, #456]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0xcc>
 8003684:	4b6f      	ldr	r3, [pc, #444]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6e      	ldr	r2, [pc, #440]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 800368a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b6c      	ldr	r3, [pc, #432]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6b      	ldr	r2, [pc, #428]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800369a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fd fe34 	bl	8001310 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fd fe30 	bl	8001310 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	@ 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e21f      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b61      	ldr	r3, [pc, #388]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0xdc>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fd fe20 	bl	8001310 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fd fe1c 	bl	8001310 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	@ 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e20b      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	4b57      	ldr	r3, [pc, #348]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x104>
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d06f      	beq.n	80037e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003702:	4b50      	ldr	r3, [pc, #320]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b00      	cmp	r3, #0
 800370c:	d017      	beq.n	800373e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800370e:	4b4d      	ldr	r3, [pc, #308]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003716:	2b08      	cmp	r3, #8
 8003718:	d105      	bne.n	8003726 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800371a:	4b4a      	ldr	r3, [pc, #296]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003726:	4b47      	ldr	r3, [pc, #284]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800372e:	2b0c      	cmp	r3, #12
 8003730:	d11c      	bne.n	800376c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003732:	4b44      	ldr	r3, [pc, #272]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d116      	bne.n	800376c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	4b41      	ldr	r3, [pc, #260]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_RCC_OscConfig+0x186>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d001      	beq.n	8003756 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e1d3      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003756:	4b3b      	ldr	r3, [pc, #236]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4937      	ldr	r1, [pc, #220]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376a:	e03a      	b.n	80037e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d020      	beq.n	80037b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003774:	4b34      	ldr	r3, [pc, #208]	@ (8003848 <HAL_RCC_OscConfig+0x278>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fd fdc9 	bl	8001310 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003782:	f7fd fdc5 	bl	8001310 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e1b4      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003794:	4b2b      	ldr	r3, [pc, #172]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a0:	4b28      	ldr	r3, [pc, #160]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4925      	ldr	r1, [pc, #148]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]
 80037b4:	e015      	b.n	80037e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b6:	4b24      	ldr	r3, [pc, #144]	@ (8003848 <HAL_RCC_OscConfig+0x278>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fd fda8 	bl	8001310 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c4:	f7fd fda4 	bl	8001310 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e193      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d036      	beq.n	800385c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f6:	4b15      	ldr	r3, [pc, #84]	@ (800384c <HAL_RCC_OscConfig+0x27c>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fc:	f7fd fd88 	bl	8001310 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003804:	f7fd fd84 	bl	8001310 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e173      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003816:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <HAL_RCC_OscConfig+0x274>)
 8003818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x234>
 8003822:	e01b      	b.n	800385c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003824:	4b09      	ldr	r3, [pc, #36]	@ (800384c <HAL_RCC_OscConfig+0x27c>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fd fd71 	bl	8001310 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	e00e      	b.n	8003850 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003832:	f7fd fd6d 	bl	8001310 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d907      	bls.n	8003850 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e15c      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
 8003844:	40023800 	.word	0x40023800
 8003848:	42470000 	.word	0x42470000
 800384c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	4b8a      	ldr	r3, [pc, #552]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ea      	bne.n	8003832 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8097 	beq.w	8003998 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386e:	4b83      	ldr	r3, [pc, #524]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	4a7e      	ldr	r2, [pc, #504]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003888:	6413      	str	r3, [r2, #64]	@ 0x40
 800388a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389a:	4b79      	ldr	r3, [pc, #484]	@ (8003a80 <HAL_RCC_OscConfig+0x4b0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d118      	bne.n	80038d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a6:	4b76      	ldr	r3, [pc, #472]	@ (8003a80 <HAL_RCC_OscConfig+0x4b0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a75      	ldr	r2, [pc, #468]	@ (8003a80 <HAL_RCC_OscConfig+0x4b0>)
 80038ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b2:	f7fd fd2d 	bl	8001310 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ba:	f7fd fd29 	bl	8001310 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e118      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003a80 <HAL_RCC_OscConfig+0x4b0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d106      	bne.n	80038ee <HAL_RCC_OscConfig+0x31e>
 80038e0:	4b66      	ldr	r3, [pc, #408]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e4:	4a65      	ldr	r2, [pc, #404]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ec:	e01c      	b.n	8003928 <HAL_RCC_OscConfig+0x358>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0x340>
 80038f6:	4b61      	ldr	r3, [pc, #388]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fa:	4a60      	ldr	r2, [pc, #384]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 80038fc:	f043 0304 	orr.w	r3, r3, #4
 8003900:	6713      	str	r3, [r2, #112]	@ 0x70
 8003902:	4b5e      	ldr	r3, [pc, #376]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003906:	4a5d      	ldr	r2, [pc, #372]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6713      	str	r3, [r2, #112]	@ 0x70
 800390e:	e00b      	b.n	8003928 <HAL_RCC_OscConfig+0x358>
 8003910:	4b5a      	ldr	r3, [pc, #360]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003914:	4a59      	ldr	r2, [pc, #356]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	@ 0x70
 800391c:	4b57      	ldr	r3, [pc, #348]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003920:	4a56      	ldr	r2, [pc, #344]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003922:	f023 0304 	bic.w	r3, r3, #4
 8003926:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d015      	beq.n	800395c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd fcee 	bl	8001310 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fd fcea 	bl	8001310 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0d7      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0ee      	beq.n	8003938 <HAL_RCC_OscConfig+0x368>
 800395a:	e014      	b.n	8003986 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fd fcd8 	bl	8001310 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003962:	e00a      	b.n	800397a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003964:	f7fd fcd4 	bl	8001310 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e0c1      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397a:	4b40      	ldr	r3, [pc, #256]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1ee      	bne.n	8003964 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003990:	4a3a      	ldr	r2, [pc, #232]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003996:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80ad 	beq.w	8003afc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039a2:	4b36      	ldr	r3, [pc, #216]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d060      	beq.n	8003a70 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d145      	bne.n	8003a42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b6:	4b33      	ldr	r3, [pc, #204]	@ (8003a84 <HAL_RCC_OscConfig+0x4b4>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fd fca8 	bl	8001310 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fd fca4 	bl	8001310 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e093      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	4b29      	ldr	r3, [pc, #164]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	3b01      	subs	r3, #1
 80039fc:	041b      	lsls	r3, r3, #16
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0c:	071b      	lsls	r3, r3, #28
 8003a0e:	491b      	ldr	r1, [pc, #108]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a14:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <HAL_RCC_OscConfig+0x4b4>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1a:	f7fd fc79 	bl	8001310 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fd fc75 	bl	8001310 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e064      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a34:	4b11      	ldr	r3, [pc, #68]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x452>
 8003a40:	e05c      	b.n	8003afc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <HAL_RCC_OscConfig+0x4b4>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fd fc62 	bl	8001310 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a50:	f7fd fc5e 	bl	8001310 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e04d      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <HAL_RCC_OscConfig+0x4ac>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x480>
 8003a6e:	e045      	b.n	8003afc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d107      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e040      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40007000 	.word	0x40007000
 8003a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a88:	4b1f      	ldr	r3, [pc, #124]	@ (8003b08 <HAL_RCC_OscConfig+0x538>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d030      	beq.n	8003af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d129      	bne.n	8003af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d122      	bne.n	8003af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d119      	bne.n	8003af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d10f      	bne.n	8003af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800

08003b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e041      	b.n	8003ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f839 	bl	8003baa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f000 f9c0 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d001      	beq.n	8003bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e04e      	b.n	8003c76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a23      	ldr	r2, [pc, #140]	@ (8003c84 <HAL_TIM_Base_Start_IT+0xc4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d022      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x80>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c02:	d01d      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x80>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	@ (8003c88 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d018      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x80>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1e      	ldr	r2, [pc, #120]	@ (8003c8c <HAL_TIM_Base_Start_IT+0xcc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x80>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c90 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x80>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1b      	ldr	r2, [pc, #108]	@ (8003c94 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x80>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a19      	ldr	r2, [pc, #100]	@ (8003c98 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_TIM_Base_Start_IT+0x80>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a18      	ldr	r2, [pc, #96]	@ (8003c9c <HAL_TIM_Base_Start_IT+0xdc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d111      	bne.n	8003c64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d010      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c62:	e007      	b.n	8003c74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40010400 	.word	0x40010400
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40001800 	.word	0x40001800

08003ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d020      	beq.n	8003d04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01b      	beq.n	8003d04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0202 	mvn.w	r2, #2
 8003cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f8d2 	bl	8003e94 <HAL_TIM_IC_CaptureCallback>
 8003cf0:	e005      	b.n	8003cfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f8c4 	bl	8003e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f8d5 	bl	8003ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d020      	beq.n	8003d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01b      	beq.n	8003d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0204 	mvn.w	r2, #4
 8003d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f8ac 	bl	8003e94 <HAL_TIM_IC_CaptureCallback>
 8003d3c:	e005      	b.n	8003d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f89e 	bl	8003e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f8af 	bl	8003ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d020      	beq.n	8003d9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01b      	beq.n	8003d9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0208 	mvn.w	r2, #8
 8003d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2204      	movs	r2, #4
 8003d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f886 	bl	8003e94 <HAL_TIM_IC_CaptureCallback>
 8003d88:	e005      	b.n	8003d96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f878 	bl	8003e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f889 	bl	8003ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d020      	beq.n	8003de8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01b      	beq.n	8003de8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0210 	mvn.w	r2, #16
 8003db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f860 	bl	8003e94 <HAL_TIM_IC_CaptureCallback>
 8003dd4:	e005      	b.n	8003de2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f852 	bl	8003e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f863 	bl	8003ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d007      	beq.n	8003e0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0201 	mvn.w	r2, #1
 8003e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd f89a 	bl	8000f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00c      	beq.n	8003e30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f906 	bl	800403c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00c      	beq.n	8003e54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f834 	bl	8003ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00c      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0220 	mvn.w	r2, #32
 8003e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f8d8 	bl	8004028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a46      	ldr	r2, [pc, #280]	@ (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eee:	d00f      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a43      	ldr	r2, [pc, #268]	@ (8004000 <TIM_Base_SetConfig+0x130>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00b      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a42      	ldr	r2, [pc, #264]	@ (8004004 <TIM_Base_SetConfig+0x134>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a41      	ldr	r2, [pc, #260]	@ (8004008 <TIM_Base_SetConfig+0x138>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a40      	ldr	r2, [pc, #256]	@ (800400c <TIM_Base_SetConfig+0x13c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a35      	ldr	r2, [pc, #212]	@ (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f30:	d027      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a32      	ldr	r2, [pc, #200]	@ (8004000 <TIM_Base_SetConfig+0x130>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d023      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a31      	ldr	r2, [pc, #196]	@ (8004004 <TIM_Base_SetConfig+0x134>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01f      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a30      	ldr	r2, [pc, #192]	@ (8004008 <TIM_Base_SetConfig+0x138>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a2f      	ldr	r2, [pc, #188]	@ (800400c <TIM_Base_SetConfig+0x13c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d017      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a2e      	ldr	r2, [pc, #184]	@ (8004010 <TIM_Base_SetConfig+0x140>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8004014 <TIM_Base_SetConfig+0x144>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00f      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a2c      	ldr	r2, [pc, #176]	@ (8004018 <TIM_Base_SetConfig+0x148>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800401c <TIM_Base_SetConfig+0x14c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d007      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a2a      	ldr	r2, [pc, #168]	@ (8004020 <TIM_Base_SetConfig+0x150>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d003      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a29      	ldr	r2, [pc, #164]	@ (8004024 <TIM_Base_SetConfig+0x154>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d108      	bne.n	8003f94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a10      	ldr	r2, [pc, #64]	@ (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0xf8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a12      	ldr	r2, [pc, #72]	@ (800400c <TIM_Base_SetConfig+0x13c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d103      	bne.n	8003fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f023 0201 	bic.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]
  }
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40010400 	.word	0x40010400
 8004010:	40014000 	.word	0x40014000
 8004014:	40014400 	.word	0x40014400
 8004018:	40014800 	.word	0x40014800
 800401c:	40001800 	.word	0x40001800
 8004020:	40001c00 	.word	0x40001c00
 8004024:	40002000 	.word	0x40002000

08004028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e042      	b.n	80040e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fc ffee 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2224      	movs	r2, #36	@ 0x24
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f82b 	bl	80040f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f4:	b0c0      	sub	sp, #256	@ 0x100
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	68d9      	ldr	r1, [r3, #12]
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	ea40 0301 	orr.w	r3, r0, r1
 8004118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	431a      	orrs	r2, r3
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	431a      	orrs	r2, r3
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004148:	f021 010c 	bic.w	r1, r1, #12
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004156:	430b      	orrs	r3, r1
 8004158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416a:	6999      	ldr	r1, [r3, #24]
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	ea40 0301 	orr.w	r3, r0, r1
 8004176:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4b8f      	ldr	r3, [pc, #572]	@ (80043bc <UART_SetConfig+0x2cc>)
 8004180:	429a      	cmp	r2, r3
 8004182:	d005      	beq.n	8004190 <UART_SetConfig+0xa0>
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b8d      	ldr	r3, [pc, #564]	@ (80043c0 <UART_SetConfig+0x2d0>)
 800418c:	429a      	cmp	r2, r3
 800418e:	d104      	bne.n	800419a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004190:	f7fe ffa8 	bl	80030e4 <HAL_RCC_GetPCLK2Freq>
 8004194:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004198:	e003      	b.n	80041a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800419a:	f7fe ff8f 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 800419e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ac:	f040 810c 	bne.w	80043c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041b4:	2200      	movs	r2, #0
 80041b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80041c2:	4622      	mov	r2, r4
 80041c4:	462b      	mov	r3, r5
 80041c6:	1891      	adds	r1, r2, r2
 80041c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041ca:	415b      	adcs	r3, r3
 80041cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041d2:	4621      	mov	r1, r4
 80041d4:	eb12 0801 	adds.w	r8, r2, r1
 80041d8:	4629      	mov	r1, r5
 80041da:	eb43 0901 	adc.w	r9, r3, r1
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041f2:	4690      	mov	r8, r2
 80041f4:	4699      	mov	r9, r3
 80041f6:	4623      	mov	r3, r4
 80041f8:	eb18 0303 	adds.w	r3, r8, r3
 80041fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004200:	462b      	mov	r3, r5
 8004202:	eb49 0303 	adc.w	r3, r9, r3
 8004206:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004216:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800421a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800421e:	460b      	mov	r3, r1
 8004220:	18db      	adds	r3, r3, r3
 8004222:	653b      	str	r3, [r7, #80]	@ 0x50
 8004224:	4613      	mov	r3, r2
 8004226:	eb42 0303 	adc.w	r3, r2, r3
 800422a:	657b      	str	r3, [r7, #84]	@ 0x54
 800422c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004230:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004234:	f7fb ffec 	bl	8000210 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4b61      	ldr	r3, [pc, #388]	@ (80043c4 <UART_SetConfig+0x2d4>)
 800423e:	fba3 2302 	umull	r2, r3, r3, r2
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	011c      	lsls	r4, r3, #4
 8004246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800424a:	2200      	movs	r2, #0
 800424c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004250:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004254:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004258:	4642      	mov	r2, r8
 800425a:	464b      	mov	r3, r9
 800425c:	1891      	adds	r1, r2, r2
 800425e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004260:	415b      	adcs	r3, r3
 8004262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004264:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004268:	4641      	mov	r1, r8
 800426a:	eb12 0a01 	adds.w	sl, r2, r1
 800426e:	4649      	mov	r1, r9
 8004270:	eb43 0b01 	adc.w	fp, r3, r1
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004280:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004288:	4692      	mov	sl, r2
 800428a:	469b      	mov	fp, r3
 800428c:	4643      	mov	r3, r8
 800428e:	eb1a 0303 	adds.w	r3, sl, r3
 8004292:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004296:	464b      	mov	r3, r9
 8004298:	eb4b 0303 	adc.w	r3, fp, r3
 800429c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80042b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042b4:	460b      	mov	r3, r1
 80042b6:	18db      	adds	r3, r3, r3
 80042b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ba:	4613      	mov	r3, r2
 80042bc:	eb42 0303 	adc.w	r3, r2, r3
 80042c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80042ca:	f7fb ffa1 	bl	8000210 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4611      	mov	r1, r2
 80042d4:	4b3b      	ldr	r3, [pc, #236]	@ (80043c4 <UART_SetConfig+0x2d4>)
 80042d6:	fba3 2301 	umull	r2, r3, r3, r1
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2264      	movs	r2, #100	@ 0x64
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	1acb      	subs	r3, r1, r3
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042ea:	4b36      	ldr	r3, [pc, #216]	@ (80043c4 <UART_SetConfig+0x2d4>)
 80042ec:	fba3 2302 	umull	r2, r3, r3, r2
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042f8:	441c      	add	r4, r3
 80042fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004304:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004308:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800430c:	4642      	mov	r2, r8
 800430e:	464b      	mov	r3, r9
 8004310:	1891      	adds	r1, r2, r2
 8004312:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004314:	415b      	adcs	r3, r3
 8004316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800431c:	4641      	mov	r1, r8
 800431e:	1851      	adds	r1, r2, r1
 8004320:	6339      	str	r1, [r7, #48]	@ 0x30
 8004322:	4649      	mov	r1, r9
 8004324:	414b      	adcs	r3, r1
 8004326:	637b      	str	r3, [r7, #52]	@ 0x34
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004334:	4659      	mov	r1, fp
 8004336:	00cb      	lsls	r3, r1, #3
 8004338:	4651      	mov	r1, sl
 800433a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800433e:	4651      	mov	r1, sl
 8004340:	00ca      	lsls	r2, r1, #3
 8004342:	4610      	mov	r0, r2
 8004344:	4619      	mov	r1, r3
 8004346:	4603      	mov	r3, r0
 8004348:	4642      	mov	r2, r8
 800434a:	189b      	adds	r3, r3, r2
 800434c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004350:	464b      	mov	r3, r9
 8004352:	460a      	mov	r2, r1
 8004354:	eb42 0303 	adc.w	r3, r2, r3
 8004358:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004368:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800436c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004370:	460b      	mov	r3, r1
 8004372:	18db      	adds	r3, r3, r3
 8004374:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004376:	4613      	mov	r3, r2
 8004378:	eb42 0303 	adc.w	r3, r2, r3
 800437c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800437e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004382:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004386:	f7fb ff43 	bl	8000210 <__aeabi_uldivmod>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <UART_SetConfig+0x2d4>)
 8004390:	fba3 1302 	umull	r1, r3, r3, r2
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	2164      	movs	r1, #100	@ 0x64
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	3332      	adds	r3, #50	@ 0x32
 80043a2:	4a08      	ldr	r2, [pc, #32]	@ (80043c4 <UART_SetConfig+0x2d4>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	f003 0207 	and.w	r2, r3, #7
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4422      	add	r2, r4
 80043b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043b8:	e106      	b.n	80045c8 <UART_SetConfig+0x4d8>
 80043ba:	bf00      	nop
 80043bc:	40011000 	.word	0x40011000
 80043c0:	40011400 	.word	0x40011400
 80043c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80043d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043da:	4642      	mov	r2, r8
 80043dc:	464b      	mov	r3, r9
 80043de:	1891      	adds	r1, r2, r2
 80043e0:	6239      	str	r1, [r7, #32]
 80043e2:	415b      	adcs	r3, r3
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043ea:	4641      	mov	r1, r8
 80043ec:	1854      	adds	r4, r2, r1
 80043ee:	4649      	mov	r1, r9
 80043f0:	eb43 0501 	adc.w	r5, r3, r1
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	00eb      	lsls	r3, r5, #3
 80043fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004402:	00e2      	lsls	r2, r4, #3
 8004404:	4614      	mov	r4, r2
 8004406:	461d      	mov	r5, r3
 8004408:	4643      	mov	r3, r8
 800440a:	18e3      	adds	r3, r4, r3
 800440c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004410:	464b      	mov	r3, r9
 8004412:	eb45 0303 	adc.w	r3, r5, r3
 8004416:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004426:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004436:	4629      	mov	r1, r5
 8004438:	008b      	lsls	r3, r1, #2
 800443a:	4621      	mov	r1, r4
 800443c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004440:	4621      	mov	r1, r4
 8004442:	008a      	lsls	r2, r1, #2
 8004444:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004448:	f7fb fee2 	bl	8000210 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4b60      	ldr	r3, [pc, #384]	@ (80045d4 <UART_SetConfig+0x4e4>)
 8004452:	fba3 2302 	umull	r2, r3, r3, r2
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	011c      	lsls	r4, r3, #4
 800445a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800445e:	2200      	movs	r2, #0
 8004460:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004464:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004468:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800446c:	4642      	mov	r2, r8
 800446e:	464b      	mov	r3, r9
 8004470:	1891      	adds	r1, r2, r2
 8004472:	61b9      	str	r1, [r7, #24]
 8004474:	415b      	adcs	r3, r3
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800447c:	4641      	mov	r1, r8
 800447e:	1851      	adds	r1, r2, r1
 8004480:	6139      	str	r1, [r7, #16]
 8004482:	4649      	mov	r1, r9
 8004484:	414b      	adcs	r3, r1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004494:	4659      	mov	r1, fp
 8004496:	00cb      	lsls	r3, r1, #3
 8004498:	4651      	mov	r1, sl
 800449a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800449e:	4651      	mov	r1, sl
 80044a0:	00ca      	lsls	r2, r1, #3
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	4642      	mov	r2, r8
 80044aa:	189b      	adds	r3, r3, r2
 80044ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044b0:	464b      	mov	r3, r9
 80044b2:	460a      	mov	r2, r1
 80044b4:	eb42 0303 	adc.w	r3, r2, r3
 80044b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80044d4:	4649      	mov	r1, r9
 80044d6:	008b      	lsls	r3, r1, #2
 80044d8:	4641      	mov	r1, r8
 80044da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044de:	4641      	mov	r1, r8
 80044e0:	008a      	lsls	r2, r1, #2
 80044e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044e6:	f7fb fe93 	bl	8000210 <__aeabi_uldivmod>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	4b38      	ldr	r3, [pc, #224]	@ (80045d4 <UART_SetConfig+0x4e4>)
 80044f2:	fba3 2301 	umull	r2, r3, r3, r1
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	2264      	movs	r2, #100	@ 0x64
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	1acb      	subs	r3, r1, r3
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	3332      	adds	r3, #50	@ 0x32
 8004504:	4a33      	ldr	r2, [pc, #204]	@ (80045d4 <UART_SetConfig+0x4e4>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004510:	441c      	add	r4, r3
 8004512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004516:	2200      	movs	r2, #0
 8004518:	673b      	str	r3, [r7, #112]	@ 0x70
 800451a:	677a      	str	r2, [r7, #116]	@ 0x74
 800451c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	1891      	adds	r1, r2, r2
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	415b      	adcs	r3, r3
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004530:	4641      	mov	r1, r8
 8004532:	1851      	adds	r1, r2, r1
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	4649      	mov	r1, r9
 8004538:	414b      	adcs	r3, r1
 800453a:	607b      	str	r3, [r7, #4]
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004548:	4659      	mov	r1, fp
 800454a:	00cb      	lsls	r3, r1, #3
 800454c:	4651      	mov	r1, sl
 800454e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004552:	4651      	mov	r1, sl
 8004554:	00ca      	lsls	r2, r1, #3
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	4603      	mov	r3, r0
 800455c:	4642      	mov	r2, r8
 800455e:	189b      	adds	r3, r3, r2
 8004560:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004562:	464b      	mov	r3, r9
 8004564:	460a      	mov	r2, r1
 8004566:	eb42 0303 	adc.w	r3, r2, r3
 800456a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	663b      	str	r3, [r7, #96]	@ 0x60
 8004576:	667a      	str	r2, [r7, #100]	@ 0x64
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004584:	4649      	mov	r1, r9
 8004586:	008b      	lsls	r3, r1, #2
 8004588:	4641      	mov	r1, r8
 800458a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800458e:	4641      	mov	r1, r8
 8004590:	008a      	lsls	r2, r1, #2
 8004592:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004596:	f7fb fe3b 	bl	8000210 <__aeabi_uldivmod>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4b0d      	ldr	r3, [pc, #52]	@ (80045d4 <UART_SetConfig+0x4e4>)
 80045a0:	fba3 1302 	umull	r1, r3, r3, r2
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	2164      	movs	r1, #100	@ 0x64
 80045a8:	fb01 f303 	mul.w	r3, r1, r3
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	3332      	adds	r3, #50	@ 0x32
 80045b2:	4a08      	ldr	r2, [pc, #32]	@ (80045d4 <UART_SetConfig+0x4e4>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	f003 020f 	and.w	r2, r3, #15
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4422      	add	r2, r4
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80045ce:	46bd      	mov	sp, r7
 80045d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d4:	51eb851f 	.word	0x51eb851f

080045d8 <__NVIC_SetPriority>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	db0a      	blt.n	8004602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	490c      	ldr	r1, [pc, #48]	@ (8004624 <__NVIC_SetPriority+0x4c>)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	0112      	lsls	r2, r2, #4
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	440b      	add	r3, r1
 80045fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004600:	e00a      	b.n	8004618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	4908      	ldr	r1, [pc, #32]	@ (8004628 <__NVIC_SetPriority+0x50>)
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	3b04      	subs	r3, #4
 8004610:	0112      	lsls	r2, r2, #4
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	440b      	add	r3, r1
 8004616:	761a      	strb	r2, [r3, #24]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	e000e100 	.word	0xe000e100
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004630:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <SysTick_Handler+0x1c>)
 8004632:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004634:	f001 fcf4 	bl	8006020 <xTaskGetSchedulerState>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800463e:	f002 faeb 	bl	8006c18 <xPortSysTickHandler>
  }
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	e000e010 	.word	0xe000e010

0800464c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004650:	2100      	movs	r1, #0
 8004652:	f06f 0004 	mvn.w	r0, #4
 8004656:	f7ff ffbf 	bl	80045d8 <__NVIC_SetPriority>
#endif
}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004666:	f3ef 8305 	mrs	r3, IPSR
 800466a:	603b      	str	r3, [r7, #0]
  return(result);
 800466c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004672:	f06f 0305 	mvn.w	r3, #5
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	e00c      	b.n	8004694 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800467a:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <osKernelInitialize+0x44>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d105      	bne.n	800468e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004682:	4b08      	ldr	r3, [pc, #32]	@ (80046a4 <osKernelInitialize+0x44>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004688:	2300      	movs	r3, #0
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	e002      	b.n	8004694 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004694:	687b      	ldr	r3, [r7, #4]
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	2000019c 	.word	0x2000019c

080046a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ae:	f3ef 8305 	mrs	r3, IPSR
 80046b2:	603b      	str	r3, [r7, #0]
  return(result);
 80046b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80046ba:	f06f 0305 	mvn.w	r3, #5
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	e010      	b.n	80046e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <osKernelStart+0x48>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d109      	bne.n	80046de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046ca:	f7ff ffbf 	bl	800464c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046ce:	4b08      	ldr	r3, [pc, #32]	@ (80046f0 <osKernelStart+0x48>)
 80046d0:	2202      	movs	r2, #2
 80046d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046d4:	f001 f840 	bl	8005758 <vTaskStartScheduler>
      stat = osOK;
 80046d8:	2300      	movs	r3, #0
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	e002      	b.n	80046e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046de:	f04f 33ff 	mov.w	r3, #4294967295
 80046e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046e4:	687b      	ldr	r3, [r7, #4]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	2000019c 	.word	0x2000019c

080046f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08e      	sub	sp, #56	@ 0x38
 80046f8:	af04      	add	r7, sp, #16
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004704:	f3ef 8305 	mrs	r3, IPSR
 8004708:	617b      	str	r3, [r7, #20]
  return(result);
 800470a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800470c:	2b00      	cmp	r3, #0
 800470e:	d17e      	bne.n	800480e <osThreadNew+0x11a>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d07b      	beq.n	800480e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004716:	2380      	movs	r3, #128	@ 0x80
 8004718:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800471a:	2318      	movs	r3, #24
 800471c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d045      	beq.n	80047ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <osThreadNew+0x48>
        name = attr->name;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <osThreadNew+0x6e>
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b38      	cmp	r3, #56	@ 0x38
 8004754:	d805      	bhi.n	8004762 <osThreadNew+0x6e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <osThreadNew+0x72>
        return (NULL);
 8004762:	2300      	movs	r3, #0
 8004764:	e054      	b.n	8004810 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <osThreadNew+0xa8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2ba7      	cmp	r3, #167	@ 0xa7
 8004784:	d90a      	bls.n	800479c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800478a:	2b00      	cmp	r3, #0
 800478c:	d006      	beq.n	800479c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <osThreadNew+0xa8>
        mem = 1;
 8004796:	2301      	movs	r3, #1
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	e010      	b.n	80047be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10c      	bne.n	80047be <osThreadNew+0xca>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d108      	bne.n	80047be <osThreadNew+0xca>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <osThreadNew+0xca>
          mem = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	e001      	b.n	80047be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d110      	bne.n	80047e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047cc:	9202      	str	r2, [sp, #8]
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	6a3a      	ldr	r2, [r7, #32]
 80047d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fdfe 	bl	80053dc <xTaskCreateStatic>
 80047e0:	4603      	mov	r3, r0
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	e013      	b.n	800480e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d110      	bne.n	800480e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	f107 0310 	add.w	r3, r7, #16
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fe4c 	bl	800549c <xTaskCreate>
 8004804:	4603      	mov	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d001      	beq.n	800480e <osThreadNew+0x11a>
            hTask = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800480e:	693b      	ldr	r3, [r7, #16]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3728      	adds	r7, #40	@ 0x28
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4a07      	ldr	r2, [pc, #28]	@ (8004844 <vApplicationGetIdleTaskMemory+0x2c>)
 8004828:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a06      	ldr	r2, [pc, #24]	@ (8004848 <vApplicationGetIdleTaskMemory+0x30>)
 800482e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2280      	movs	r2, #128	@ 0x80
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	200001a0 	.word	0x200001a0
 8004848:	20000248 	.word	0x20000248

0800484c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a07      	ldr	r2, [pc, #28]	@ (8004878 <vApplicationGetTimerTaskMemory+0x2c>)
 800485c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4a06      	ldr	r2, [pc, #24]	@ (800487c <vApplicationGetTimerTaskMemory+0x30>)
 8004862:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800486a:	601a      	str	r2, [r3, #0]
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	20000448 	.word	0x20000448
 800487c:	200004f0 	.word	0x200004f0

08004880 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f103 0208 	add.w	r2, r3, #8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f04f 32ff 	mov.w	r2, #4294967295
 8004898:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f103 0208 	add.w	r2, r3, #8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f103 0208 	add.w	r2, r3, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d103      	bne.n	8004942 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e00c      	b.n	800495c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3308      	adds	r3, #8
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e002      	b.n	8004950 <vListInsert+0x2e>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	429a      	cmp	r2, r3
 800495a:	d2f6      	bcs.n	800494a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6892      	ldr	r2, [r2, #8]
 80049aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6852      	ldr	r2, [r2, #4]
 80049b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d103      	bne.n	80049c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	1e5a      	subs	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	e7fd      	b.n	8004a10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a14:	f002 f870 	bl	8006af8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a20:	68f9      	ldr	r1, [r7, #12]
 8004a22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	441a      	add	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a44:	3b01      	subs	r3, #1
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	441a      	add	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	22ff      	movs	r2, #255	@ 0xff
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	22ff      	movs	r2, #255	@ 0xff
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d114      	bne.n	8004a94 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01a      	beq.n	8004aa8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3310      	adds	r3, #16
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 f90c 	bl	8005c94 <xTaskRemoveFromEventList>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d012      	beq.n	8004aa8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a82:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab8 <xQueueGenericReset+0xd0>)
 8004a84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	e009      	b.n	8004aa8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3310      	adds	r3, #16
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff fef1 	bl	8004880 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3324      	adds	r3, #36	@ 0x24
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff feec 	bl	8004880 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004aa8:	f002 f858 	bl	8006b5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004aac:	2301      	movs	r3, #1
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08e      	sub	sp, #56	@ 0x38
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	e7fd      	b.n	8004b02 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <xQueueGenericCreateStatic+0x56>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <xQueueGenericCreateStatic+0x5a>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <xQueueGenericCreateStatic+0x5c>
 8004b16:	2300      	movs	r3, #0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10b      	bne.n	8004b34 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	623b      	str	r3, [r7, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	e7fd      	b.n	8004b30 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <xQueueGenericCreateStatic+0x84>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <xQueueGenericCreateStatic+0x88>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <xQueueGenericCreateStatic+0x8a>
 8004b44:	2300      	movs	r3, #0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	61fb      	str	r3, [r7, #28]
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	e7fd      	b.n	8004b5e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b62:	2350      	movs	r3, #80	@ 0x50
 8004b64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b50      	cmp	r3, #80	@ 0x50
 8004b6a:	d00b      	beq.n	8004b84 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	61bb      	str	r3, [r7, #24]
}
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	e7fd      	b.n	8004b80 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f805 	bl	8004bb6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3730      	adds	r7, #48	@ 0x30
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e002      	b.n	8004bd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004be4:	2101      	movs	r1, #1
 8004be6:	69b8      	ldr	r0, [r7, #24]
 8004be8:	f7ff fefe 	bl	80049e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08e      	sub	sp, #56	@ 0x38
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10b      	bne.n	8004c30 <xQueueGenericSend+0x34>
	__asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c2a:	bf00      	nop
 8004c2c:	bf00      	nop
 8004c2e:	e7fd      	b.n	8004c2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d103      	bne.n	8004c3e <xQueueGenericSend+0x42>
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <xQueueGenericSend+0x46>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <xQueueGenericSend+0x48>
 8004c42:	2300      	movs	r3, #0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <xQueueGenericSend+0x64>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c5a:	bf00      	nop
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d103      	bne.n	8004c6e <xQueueGenericSend+0x72>
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <xQueueGenericSend+0x76>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <xQueueGenericSend+0x78>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <xQueueGenericSend+0x94>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	623b      	str	r3, [r7, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	bf00      	nop
 8004c8e:	e7fd      	b.n	8004c8c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c90:	f001 f9c6 	bl	8006020 <xTaskGetSchedulerState>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d102      	bne.n	8004ca0 <xQueueGenericSend+0xa4>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <xQueueGenericSend+0xa8>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <xQueueGenericSend+0xaa>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10b      	bne.n	8004cc2 <xQueueGenericSend+0xc6>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	61fb      	str	r3, [r7, #28]
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	e7fd      	b.n	8004cbe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cc2:	f001 ff19 	bl	8006af8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <xQueueGenericSend+0xdc>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d129      	bne.n	8004d2c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cde:	f000 fa0f 	bl	8005100 <prvCopyDataToQueue>
 8004ce2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d010      	beq.n	8004d0e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cee:	3324      	adds	r3, #36	@ 0x24
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 ffcf 	bl	8005c94 <xTaskRemoveFromEventList>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d013      	beq.n	8004d24 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8004dfc <xQueueGenericSend+0x200>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	e00a      	b.n	8004d24 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d14:	4b39      	ldr	r3, [pc, #228]	@ (8004dfc <xQueueGenericSend+0x200>)
 8004d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d24:	f001 ff1a 	bl	8006b5c <vPortExitCritical>
				return pdPASS;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e063      	b.n	8004df4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d32:	f001 ff13 	bl	8006b5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	e05c      	b.n	8004df4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d40:	f107 0314 	add.w	r3, r7, #20
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 f809 	bl	8005d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d4e:	f001 ff05 	bl	8006b5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d52:	f000 fd71 	bl	8005838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d56:	f001 fecf 	bl	8006af8 <vPortEnterCritical>
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d60:	b25b      	sxtb	r3, r3
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d103      	bne.n	8004d70 <xQueueGenericSend+0x174>
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d103      	bne.n	8004d86 <xQueueGenericSend+0x18a>
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d86:	f001 fee9 	bl	8006b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d8a:	1d3a      	adds	r2, r7, #4
 8004d8c:	f107 0314 	add.w	r3, r7, #20
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fff8 	bl	8005d88 <xTaskCheckForTimeOut>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d124      	bne.n	8004de8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004da0:	f000 faa6 	bl	80052f0 <prvIsQueueFull>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d018      	beq.n	8004ddc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	3310      	adds	r3, #16
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	4611      	mov	r1, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 ff1c 	bl	8005bf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004db8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dba:	f000 fa31 	bl	8005220 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dbe:	f000 fd49 	bl	8005854 <xTaskResumeAll>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f47f af7c 	bne.w	8004cc2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004dca:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <xQueueGenericSend+0x200>)
 8004dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	e772      	b.n	8004cc2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ddc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dde:	f000 fa1f 	bl	8005220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004de2:	f000 fd37 	bl	8005854 <xTaskResumeAll>
 8004de6:	e76c      	b.n	8004cc2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004de8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dea:	f000 fa19 	bl	8005220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dee:	f000 fd31 	bl	8005854 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004df2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3738      	adds	r7, #56	@ 0x38
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	e000ed04 	.word	0xe000ed04

08004e00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b090      	sub	sp, #64	@ 0x40
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d103      	bne.n	8004e3e <xQueueGenericSendFromISR+0x3e>
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <xQueueGenericSendFromISR+0x42>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <xQueueGenericSendFromISR+0x44>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10b      	bne.n	8004e60 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	e7fd      	b.n	8004e5c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d103      	bne.n	8004e6e <xQueueGenericSendFromISR+0x6e>
 8004e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <xQueueGenericSendFromISR+0x72>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <xQueueGenericSendFromISR+0x74>
 8004e72:	2300      	movs	r3, #0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10b      	bne.n	8004e90 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	623b      	str	r3, [r7, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	bf00      	nop
 8004e8e:	e7fd      	b.n	8004e8c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e90:	f001 ff12 	bl	8006cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e94:	f3ef 8211 	mrs	r2, BASEPRI
 8004e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	61fa      	str	r2, [r7, #28]
 8004eaa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004eac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004eae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d302      	bcc.n	8004ec2 <xQueueGenericSendFromISR+0xc2>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d12f      	bne.n	8004f22 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ec8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ed8:	f000 f912 	bl	8005100 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004edc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d112      	bne.n	8004f0c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d016      	beq.n	8004f1c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	3324      	adds	r3, #36	@ 0x24
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fece 	bl	8005c94 <xTaskRemoveFromEventList>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00e      	beq.n	8004f1c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00b      	beq.n	8004f1c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e007      	b.n	8004f1c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f10:	3301      	adds	r3, #1
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	b25a      	sxtb	r2, r3
 8004f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004f20:	e001      	b.n	8004f26 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f28:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3740      	adds	r7, #64	@ 0x40
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	@ 0x30
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10b      	bne.n	8004f6e <xQueueReceive+0x32>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	623b      	str	r3, [r7, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	e7fd      	b.n	8004f6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <xQueueReceive+0x40>
 8004f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <xQueueReceive+0x44>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e000      	b.n	8004f82 <xQueueReceive+0x46>
 8004f80:	2300      	movs	r3, #0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <xQueueReceive+0x62>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	61fb      	str	r3, [r7, #28]
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	e7fd      	b.n	8004f9a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f9e:	f001 f83f 	bl	8006020 <xTaskGetSchedulerState>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <xQueueReceive+0x72>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <xQueueReceive+0x76>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <xQueueReceive+0x78>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10b      	bne.n	8004fd0 <xQueueReceive+0x94>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	61bb      	str	r3, [r7, #24]
}
 8004fca:	bf00      	nop
 8004fcc:	bf00      	nop
 8004fce:	e7fd      	b.n	8004fcc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fd0:	f001 fd92 	bl	8006af8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01f      	beq.n	8005020 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fe4:	f000 f8f6 	bl	80051d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	1e5a      	subs	r2, r3, #1
 8004fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00f      	beq.n	8005018 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffa:	3310      	adds	r3, #16
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fe49 	bl	8005c94 <xTaskRemoveFromEventList>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005008:	4b3c      	ldr	r3, [pc, #240]	@ (80050fc <xQueueReceive+0x1c0>)
 800500a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005018:	f001 fda0 	bl	8006b5c <vPortExitCritical>
				return pdPASS;
 800501c:	2301      	movs	r3, #1
 800501e:	e069      	b.n	80050f4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005026:	f001 fd99 	bl	8006b5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800502a:	2300      	movs	r3, #0
 800502c:	e062      	b.n	80050f4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800502e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005034:	f107 0310 	add.w	r3, r7, #16
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fe8f 	bl	8005d5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800503e:	2301      	movs	r3, #1
 8005040:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005042:	f001 fd8b 	bl	8006b5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005046:	f000 fbf7 	bl	8005838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800504a:	f001 fd55 	bl	8006af8 <vPortEnterCritical>
 800504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005054:	b25b      	sxtb	r3, r3
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505a:	d103      	bne.n	8005064 <xQueueReceive+0x128>
 800505c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005066:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800506a:	b25b      	sxtb	r3, r3
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d103      	bne.n	800507a <xQueueReceive+0x13e>
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800507a:	f001 fd6f 	bl	8006b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800507e:	1d3a      	adds	r2, r7, #4
 8005080:	f107 0310 	add.w	r3, r7, #16
 8005084:	4611      	mov	r1, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fe7e 	bl	8005d88 <xTaskCheckForTimeOut>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d123      	bne.n	80050da <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005092:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005094:	f000 f916 	bl	80052c4 <prvIsQueueEmpty>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d017      	beq.n	80050ce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	3324      	adds	r3, #36	@ 0x24
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4611      	mov	r1, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fda2 	bl	8005bf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050ae:	f000 f8b7 	bl	8005220 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050b2:	f000 fbcf 	bl	8005854 <xTaskResumeAll>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d189      	bne.n	8004fd0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80050bc:	4b0f      	ldr	r3, [pc, #60]	@ (80050fc <xQueueReceive+0x1c0>)
 80050be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	e780      	b.n	8004fd0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050d0:	f000 f8a6 	bl	8005220 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050d4:	f000 fbbe 	bl	8005854 <xTaskResumeAll>
 80050d8:	e77a      	b.n	8004fd0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050dc:	f000 f8a0 	bl	8005220 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050e0:	f000 fbb8 	bl	8005854 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050e6:	f000 f8ed 	bl	80052c4 <prvIsQueueEmpty>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f43f af6f 	beq.w	8004fd0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3730      	adds	r7, #48	@ 0x30
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	e000ed04 	.word	0xe000ed04

08005100 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10d      	bne.n	800513a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d14d      	bne.n	80051c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 ff96 	bl	800605c <xTaskPriorityDisinherit>
 8005130:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	609a      	str	r2, [r3, #8]
 8005138:	e043      	b.n	80051c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d119      	bne.n	8005174 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6858      	ldr	r0, [r3, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	461a      	mov	r2, r3
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	f002 f868 	bl	8007220 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005158:	441a      	add	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	d32b      	bcc.n	80051c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	e026      	b.n	80051c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	68d8      	ldr	r0, [r3, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517c:	461a      	mov	r2, r3
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	f002 f84e 	bl	8007220 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	425b      	negs	r3, r3
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d207      	bcs.n	80051b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a8:	425b      	negs	r3, r3
 80051aa:	441a      	add	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d105      	bne.n	80051c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	3b01      	subs	r3, #1
 80051c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80051ca:	697b      	ldr	r3, [r7, #20]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d018      	beq.n	8005218 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ee:	441a      	add	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d303      	bcc.n	8005208 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68d9      	ldr	r1, [r3, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	461a      	mov	r2, r3
 8005212:	6838      	ldr	r0, [r7, #0]
 8005214:	f002 f804 	bl	8007220 <memcpy>
	}
}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005228:	f001 fc66 	bl	8006af8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005232:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005234:	e011      	b.n	800525a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d012      	beq.n	8005264 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3324      	adds	r3, #36	@ 0x24
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fd26 	bl	8005c94 <xTaskRemoveFromEventList>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800524e:	f000 fdff 	bl	8005e50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	3b01      	subs	r3, #1
 8005256:	b2db      	uxtb	r3, r3
 8005258:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800525a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	dce9      	bgt.n	8005236 <prvUnlockQueue+0x16>
 8005262:	e000      	b.n	8005266 <prvUnlockQueue+0x46>
					break;
 8005264:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	22ff      	movs	r2, #255	@ 0xff
 800526a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800526e:	f001 fc75 	bl	8006b5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005272:	f001 fc41 	bl	8006af8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800527c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800527e:	e011      	b.n	80052a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d012      	beq.n	80052ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3310      	adds	r3, #16
 800528c:	4618      	mov	r0, r3
 800528e:	f000 fd01 	bl	8005c94 <xTaskRemoveFromEventList>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005298:	f000 fdda 	bl	8005e50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800529c:	7bbb      	ldrb	r3, [r7, #14]
 800529e:	3b01      	subs	r3, #1
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	dce9      	bgt.n	8005280 <prvUnlockQueue+0x60>
 80052ac:	e000      	b.n	80052b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	22ff      	movs	r2, #255	@ 0xff
 80052b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80052b8:	f001 fc50 	bl	8006b5c <vPortExitCritical>
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052cc:	f001 fc14 	bl	8006af8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d102      	bne.n	80052de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052d8:	2301      	movs	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e001      	b.n	80052e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052e2:	f001 fc3b 	bl	8006b5c <vPortExitCritical>

	return xReturn;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052f8:	f001 fbfe 	bl	8006af8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005304:	429a      	cmp	r2, r3
 8005306:	d102      	bne.n	800530e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005308:	2301      	movs	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	e001      	b.n	8005312 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005312:	f001 fc23 	bl	8006b5c <vPortExitCritical>

	return xReturn;
 8005316:	68fb      	ldr	r3, [r7, #12]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e014      	b.n	800535a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005330:	4a0f      	ldr	r2, [pc, #60]	@ (8005370 <vQueueAddToRegistry+0x50>)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10b      	bne.n	8005354 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800533c:	490c      	ldr	r1, [pc, #48]	@ (8005370 <vQueueAddToRegistry+0x50>)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005346:	4a0a      	ldr	r2, [pc, #40]	@ (8005370 <vQueueAddToRegistry+0x50>)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4413      	add	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005352:	e006      	b.n	8005362 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b07      	cmp	r3, #7
 800535e:	d9e7      	bls.n	8005330 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	200008f0 	.word	0x200008f0

08005374 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005384:	f001 fbb8 	bl	8006af8 <vPortEnterCritical>
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800538e:	b25b      	sxtb	r3, r3
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d103      	bne.n	800539e <vQueueWaitForMessageRestricted+0x2a>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053a4:	b25b      	sxtb	r3, r3
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d103      	bne.n	80053b4 <vQueueWaitForMessageRestricted+0x40>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053b4:	f001 fbd2 	bl	8006b5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d106      	bne.n	80053ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	3324      	adds	r3, #36	@ 0x24
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fc37 	bl	8005c3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053ce:	6978      	ldr	r0, [r7, #20]
 80053d0:	f7ff ff26 	bl	8005220 <prvUnlockQueue>
	}
 80053d4:	bf00      	nop
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08e      	sub	sp, #56	@ 0x38
 80053e0:	af04      	add	r7, sp, #16
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10b      	bne.n	8005408 <xTaskCreateStatic+0x2c>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	623b      	str	r3, [r7, #32]
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	e7fd      	b.n	8005404 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10b      	bne.n	8005426 <xTaskCreateStatic+0x4a>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	61fb      	str	r3, [r7, #28]
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	e7fd      	b.n	8005422 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005426:	23a8      	movs	r3, #168	@ 0xa8
 8005428:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2ba8      	cmp	r3, #168	@ 0xa8
 800542e:	d00b      	beq.n	8005448 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	61bb      	str	r3, [r7, #24]
}
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	e7fd      	b.n	8005444 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005448:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800544a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01e      	beq.n	800548e <xTaskCreateStatic+0xb2>
 8005450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005452:	2b00      	cmp	r3, #0
 8005454:	d01b      	beq.n	800548e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	2202      	movs	r2, #2
 8005464:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005468:	2300      	movs	r3, #0
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	9302      	str	r3, [sp, #8]
 8005470:	f107 0314 	add.w	r3, r7, #20
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f851 	bl	8005528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005486:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005488:	f000 f8f6 	bl	8005678 <prvAddNewTaskToReadyList>
 800548c:	e001      	b.n	8005492 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005492:	697b      	ldr	r3, [r7, #20]
	}
 8005494:	4618      	mov	r0, r3
 8005496:	3728      	adds	r7, #40	@ 0x28
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	@ 0x30
 80054a0:	af04      	add	r7, sp, #16
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	4613      	mov	r3, r2
 80054aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fc43 	bl	8006d3c <pvPortMalloc>
 80054b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00e      	beq.n	80054dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054be:	20a8      	movs	r0, #168	@ 0xa8
 80054c0:	f001 fc3c 	bl	8006d3c <pvPortMalloc>
 80054c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80054d2:	e005      	b.n	80054e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054d4:	6978      	ldr	r0, [r7, #20]
 80054d6:	f001 fcff 	bl	8006ed8 <vPortFree>
 80054da:	e001      	b.n	80054e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d017      	beq.n	8005516 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	2300      	movs	r3, #0
 80054f2:	9303      	str	r3, [sp, #12]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	9302      	str	r3, [sp, #8]
 80054f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f80f 	bl	8005528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800550a:	69f8      	ldr	r0, [r7, #28]
 800550c:	f000 f8b4 	bl	8005678 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005510:	2301      	movs	r3, #1
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	e002      	b.n	800551c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800551c:	69bb      	ldr	r3, [r7, #24]
	}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005538:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	461a      	mov	r2, r3
 8005540:	21a5      	movs	r1, #165	@ 0xa5
 8005542:	f001 fde9 	bl	8007118 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005550:	3b01      	subs	r3, #1
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00b      	beq.n	8005582 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	617b      	str	r3, [r7, #20]
}
 800557c:	bf00      	nop
 800557e:	bf00      	nop
 8005580:	e7fd      	b.n	800557e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01f      	beq.n	80055c8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	e012      	b.n	80055b4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	4413      	add	r3, r2
 8005594:	7819      	ldrb	r1, [r3, #0]
 8005596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	3334      	adds	r3, #52	@ 0x34
 800559e:	460a      	mov	r2, r1
 80055a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d006      	beq.n	80055bc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	3301      	adds	r3, #1
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	2b0f      	cmp	r3, #15
 80055b8:	d9e9      	bls.n	800558e <prvInitialiseNewTask+0x66>
 80055ba:	e000      	b.n	80055be <prvInitialiseNewTask+0x96>
			{
				break;
 80055bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055c6:	e003      	b.n	80055d0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	2b37      	cmp	r3, #55	@ 0x37
 80055d4:	d901      	bls.n	80055da <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055d6:	2337      	movs	r3, #55	@ 0x37
 80055d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	2200      	movs	r2, #0
 80055ea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ee:	3304      	adds	r3, #4
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff f965 	bl	80048c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	3318      	adds	r3, #24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff f960 	bl	80048c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005604:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005614:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	2200      	movs	r2, #0
 800561a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800561e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005620:	2200      	movs	r2, #0
 8005622:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	3354      	adds	r3, #84	@ 0x54
 800562a:	224c      	movs	r2, #76	@ 0x4c
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f001 fd72 	bl	8007118 <memset>
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	4a0d      	ldr	r2, [pc, #52]	@ (800566c <prvInitialiseNewTask+0x144>)
 8005638:	659a      	str	r2, [r3, #88]	@ 0x58
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	4a0c      	ldr	r2, [pc, #48]	@ (8005670 <prvInitialiseNewTask+0x148>)
 800563e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005642:	4a0c      	ldr	r2, [pc, #48]	@ (8005674 <prvInitialiseNewTask+0x14c>)
 8005644:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	68f9      	ldr	r1, [r7, #12]
 800564a:	69b8      	ldr	r0, [r7, #24]
 800564c:	f001 f924 	bl	8006898 <pxPortInitialiseStack>
 8005650:	4602      	mov	r2, r0
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800565c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005662:	bf00      	nop
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20004b84 	.word	0x20004b84
 8005670:	20004bec 	.word	0x20004bec
 8005674:	20004c54 	.word	0x20004c54

08005678 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005680:	f001 fa3a 	bl	8006af8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005684:	4b2d      	ldr	r3, [pc, #180]	@ (800573c <prvAddNewTaskToReadyList+0xc4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	4a2c      	ldr	r2, [pc, #176]	@ (800573c <prvAddNewTaskToReadyList+0xc4>)
 800568c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800568e:	4b2c      	ldr	r3, [pc, #176]	@ (8005740 <prvAddNewTaskToReadyList+0xc8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005696:	4a2a      	ldr	r2, [pc, #168]	@ (8005740 <prvAddNewTaskToReadyList+0xc8>)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800569c:	4b27      	ldr	r3, [pc, #156]	@ (800573c <prvAddNewTaskToReadyList+0xc4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d110      	bne.n	80056c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056a4:	f000 fbf8 	bl	8005e98 <prvInitialiseTaskLists>
 80056a8:	e00d      	b.n	80056c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056aa:	4b26      	ldr	r3, [pc, #152]	@ (8005744 <prvAddNewTaskToReadyList+0xcc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056b2:	4b23      	ldr	r3, [pc, #140]	@ (8005740 <prvAddNewTaskToReadyList+0xc8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056bc:	429a      	cmp	r2, r3
 80056be:	d802      	bhi.n	80056c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005740 <prvAddNewTaskToReadyList+0xc8>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056c6:	4b20      	ldr	r3, [pc, #128]	@ (8005748 <prvAddNewTaskToReadyList+0xd0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3301      	adds	r3, #1
 80056cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005748 <prvAddNewTaskToReadyList+0xd0>)
 80056ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005748 <prvAddNewTaskToReadyList+0xd0>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056dc:	4b1b      	ldr	r3, [pc, #108]	@ (800574c <prvAddNewTaskToReadyList+0xd4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d903      	bls.n	80056ec <prvAddNewTaskToReadyList+0x74>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	4a18      	ldr	r2, [pc, #96]	@ (800574c <prvAddNewTaskToReadyList+0xd4>)
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4a15      	ldr	r2, [pc, #84]	@ (8005750 <prvAddNewTaskToReadyList+0xd8>)
 80056fa:	441a      	add	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7ff f8e9 	bl	80048da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005708:	f001 fa28 	bl	8006b5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800570c:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <prvAddNewTaskToReadyList+0xcc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00e      	beq.n	8005732 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005714:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <prvAddNewTaskToReadyList+0xc8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	429a      	cmp	r2, r3
 8005720:	d207      	bcs.n	8005732 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005722:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <prvAddNewTaskToReadyList+0xdc>)
 8005724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005732:	bf00      	nop
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000e04 	.word	0x20000e04
 8005740:	20000930 	.word	0x20000930
 8005744:	20000e10 	.word	0x20000e10
 8005748:	20000e20 	.word	0x20000e20
 800574c:	20000e0c 	.word	0x20000e0c
 8005750:	20000934 	.word	0x20000934
 8005754:	e000ed04 	.word	0xe000ed04

08005758 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	@ 0x28
 800575c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005766:	463a      	mov	r2, r7
 8005768:	1d39      	adds	r1, r7, #4
 800576a:	f107 0308 	add.w	r3, r7, #8
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff f852 	bl	8004818 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	9202      	str	r2, [sp, #8]
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	2300      	movs	r3, #0
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	460a      	mov	r2, r1
 8005786:	4924      	ldr	r1, [pc, #144]	@ (8005818 <vTaskStartScheduler+0xc0>)
 8005788:	4824      	ldr	r0, [pc, #144]	@ (800581c <vTaskStartScheduler+0xc4>)
 800578a:	f7ff fe27 	bl	80053dc <xTaskCreateStatic>
 800578e:	4603      	mov	r3, r0
 8005790:	4a23      	ldr	r2, [pc, #140]	@ (8005820 <vTaskStartScheduler+0xc8>)
 8005792:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005794:	4b22      	ldr	r3, [pc, #136]	@ (8005820 <vTaskStartScheduler+0xc8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800579c:	2301      	movs	r3, #1
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	e001      	b.n	80057a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d102      	bne.n	80057b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057ac:	f000 fd1a 	bl	80061e4 <xTimerCreateTimerTask>
 80057b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d11b      	bne.n	80057f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	613b      	str	r3, [r7, #16]
}
 80057ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057cc:	4b15      	ldr	r3, [pc, #84]	@ (8005824 <vTaskStartScheduler+0xcc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3354      	adds	r3, #84	@ 0x54
 80057d2:	4a15      	ldr	r2, [pc, #84]	@ (8005828 <vTaskStartScheduler+0xd0>)
 80057d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057d6:	4b15      	ldr	r3, [pc, #84]	@ (800582c <vTaskStartScheduler+0xd4>)
 80057d8:	f04f 32ff 	mov.w	r2, #4294967295
 80057dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057de:	4b14      	ldr	r3, [pc, #80]	@ (8005830 <vTaskStartScheduler+0xd8>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057e4:	4b13      	ldr	r3, [pc, #76]	@ (8005834 <vTaskStartScheduler+0xdc>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057ea:	f001 f8e1 	bl	80069b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057ee:	e00f      	b.n	8005810 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d10b      	bne.n	8005810 <vTaskStartScheduler+0xb8>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	60fb      	str	r3, [r7, #12]
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	e7fd      	b.n	800580c <vTaskStartScheduler+0xb4>
}
 8005810:	bf00      	nop
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	0800736c 	.word	0x0800736c
 800581c:	08005e69 	.word	0x08005e69
 8005820:	20000e28 	.word	0x20000e28
 8005824:	20000930 	.word	0x20000930
 8005828:	2000001c 	.word	0x2000001c
 800582c:	20000e24 	.word	0x20000e24
 8005830:	20000e10 	.word	0x20000e10
 8005834:	20000e08 	.word	0x20000e08

08005838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800583c:	4b04      	ldr	r3, [pc, #16]	@ (8005850 <vTaskSuspendAll+0x18>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3301      	adds	r3, #1
 8005842:	4a03      	ldr	r2, [pc, #12]	@ (8005850 <vTaskSuspendAll+0x18>)
 8005844:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005846:	bf00      	nop
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	20000e2c 	.word	0x20000e2c

08005854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005862:	4b42      	ldr	r3, [pc, #264]	@ (800596c <xTaskResumeAll+0x118>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <xTaskResumeAll+0x2e>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	603b      	str	r3, [r7, #0]
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005882:	f001 f939 	bl	8006af8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005886:	4b39      	ldr	r3, [pc, #228]	@ (800596c <xTaskResumeAll+0x118>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3b01      	subs	r3, #1
 800588c:	4a37      	ldr	r2, [pc, #220]	@ (800596c <xTaskResumeAll+0x118>)
 800588e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005890:	4b36      	ldr	r3, [pc, #216]	@ (800596c <xTaskResumeAll+0x118>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d162      	bne.n	800595e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005898:	4b35      	ldr	r3, [pc, #212]	@ (8005970 <xTaskResumeAll+0x11c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d05e      	beq.n	800595e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058a0:	e02f      	b.n	8005902 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a2:	4b34      	ldr	r3, [pc, #208]	@ (8005974 <xTaskResumeAll+0x120>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3318      	adds	r3, #24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff f870 	bl	8004994 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff f86b 	bl	8004994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005978 <xTaskResumeAll+0x124>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d903      	bls.n	80058d2 <xTaskResumeAll+0x7e>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005978 <xTaskResumeAll+0x124>)
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4a27      	ldr	r2, [pc, #156]	@ (800597c <xTaskResumeAll+0x128>)
 80058e0:	441a      	add	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3304      	adds	r3, #4
 80058e6:	4619      	mov	r1, r3
 80058e8:	4610      	mov	r0, r2
 80058ea:	f7fe fff6 	bl	80048da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f2:	4b23      	ldr	r3, [pc, #140]	@ (8005980 <xTaskResumeAll+0x12c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d302      	bcc.n	8005902 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80058fc:	4b21      	ldr	r3, [pc, #132]	@ (8005984 <xTaskResumeAll+0x130>)
 80058fe:	2201      	movs	r2, #1
 8005900:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005902:	4b1c      	ldr	r3, [pc, #112]	@ (8005974 <xTaskResumeAll+0x120>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1cb      	bne.n	80058a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005910:	f000 fb66 	bl	8005fe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005914:	4b1c      	ldr	r3, [pc, #112]	@ (8005988 <xTaskResumeAll+0x134>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d010      	beq.n	8005942 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005920:	f000 f846 	bl	80059b0 <xTaskIncrementTick>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800592a:	4b16      	ldr	r3, [pc, #88]	@ (8005984 <xTaskResumeAll+0x130>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3b01      	subs	r3, #1
 8005934:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f1      	bne.n	8005920 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800593c:	4b12      	ldr	r3, [pc, #72]	@ (8005988 <xTaskResumeAll+0x134>)
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005942:	4b10      	ldr	r3, [pc, #64]	@ (8005984 <xTaskResumeAll+0x130>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800594a:	2301      	movs	r3, #1
 800594c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800594e:	4b0f      	ldr	r3, [pc, #60]	@ (800598c <xTaskResumeAll+0x138>)
 8005950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800595e:	f001 f8fd 	bl	8006b5c <vPortExitCritical>

	return xAlreadyYielded;
 8005962:	68bb      	ldr	r3, [r7, #8]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000e2c 	.word	0x20000e2c
 8005970:	20000e04 	.word	0x20000e04
 8005974:	20000dc4 	.word	0x20000dc4
 8005978:	20000e0c 	.word	0x20000e0c
 800597c:	20000934 	.word	0x20000934
 8005980:	20000930 	.word	0x20000930
 8005984:	20000e18 	.word	0x20000e18
 8005988:	20000e14 	.word	0x20000e14
 800598c:	e000ed04 	.word	0xe000ed04

08005990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005996:	4b05      	ldr	r3, [pc, #20]	@ (80059ac <xTaskGetTickCount+0x1c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800599c:	687b      	ldr	r3, [r7, #4]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000e08 	.word	0x20000e08

080059b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ba:	4b4f      	ldr	r3, [pc, #316]	@ (8005af8 <xTaskIncrementTick+0x148>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f040 8090 	bne.w	8005ae4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059c4:	4b4d      	ldr	r3, [pc, #308]	@ (8005afc <xTaskIncrementTick+0x14c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059cc:	4a4b      	ldr	r2, [pc, #300]	@ (8005afc <xTaskIncrementTick+0x14c>)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d121      	bne.n	8005a1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059d8:	4b49      	ldr	r3, [pc, #292]	@ (8005b00 <xTaskIncrementTick+0x150>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	603b      	str	r3, [r7, #0]
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	e7fd      	b.n	80059f6 <xTaskIncrementTick+0x46>
 80059fa:	4b41      	ldr	r3, [pc, #260]	@ (8005b00 <xTaskIncrementTick+0x150>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	4b40      	ldr	r3, [pc, #256]	@ (8005b04 <xTaskIncrementTick+0x154>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a3e      	ldr	r2, [pc, #248]	@ (8005b00 <xTaskIncrementTick+0x150>)
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	4a3e      	ldr	r2, [pc, #248]	@ (8005b04 <xTaskIncrementTick+0x154>)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b08 <xTaskIncrementTick+0x158>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3301      	adds	r3, #1
 8005a14:	4a3c      	ldr	r2, [pc, #240]	@ (8005b08 <xTaskIncrementTick+0x158>)
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	f000 fae2 	bl	8005fe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b0c <xTaskIncrementTick+0x15c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d349      	bcc.n	8005aba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a26:	4b36      	ldr	r3, [pc, #216]	@ (8005b00 <xTaskIncrementTick+0x150>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a30:	4b36      	ldr	r3, [pc, #216]	@ (8005b0c <xTaskIncrementTick+0x15c>)
 8005a32:	f04f 32ff 	mov.w	r2, #4294967295
 8005a36:	601a      	str	r2, [r3, #0]
					break;
 8005a38:	e03f      	b.n	8005aba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a3a:	4b31      	ldr	r3, [pc, #196]	@ (8005b00 <xTaskIncrementTick+0x150>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d203      	bcs.n	8005a5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a52:	4a2e      	ldr	r2, [pc, #184]	@ (8005b0c <xTaskIncrementTick+0x15c>)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a58:	e02f      	b.n	8005aba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe ff98 	bl	8004994 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	3318      	adds	r3, #24
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fe ff8f 	bl	8004994 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a7a:	4b25      	ldr	r3, [pc, #148]	@ (8005b10 <xTaskIncrementTick+0x160>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d903      	bls.n	8005a8a <xTaskIncrementTick+0xda>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	4a22      	ldr	r2, [pc, #136]	@ (8005b10 <xTaskIncrementTick+0x160>)
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4a1f      	ldr	r2, [pc, #124]	@ (8005b14 <xTaskIncrementTick+0x164>)
 8005a98:	441a      	add	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f7fe ff1a 	bl	80048da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8005b18 <xTaskIncrementTick+0x168>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d3b8      	bcc.n	8005a26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ab8:	e7b5      	b.n	8005a26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005aba:	4b17      	ldr	r3, [pc, #92]	@ (8005b18 <xTaskIncrementTick+0x168>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac0:	4914      	ldr	r1, [pc, #80]	@ (8005b14 <xTaskIncrementTick+0x164>)
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	440b      	add	r3, r1
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d901      	bls.n	8005ad6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ad6:	4b11      	ldr	r3, [pc, #68]	@ (8005b1c <xTaskIncrementTick+0x16c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e004      	b.n	8005aee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8005b20 <xTaskIncrementTick+0x170>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	4a0d      	ldr	r2, [pc, #52]	@ (8005b20 <xTaskIncrementTick+0x170>)
 8005aec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005aee:	697b      	ldr	r3, [r7, #20]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20000e2c 	.word	0x20000e2c
 8005afc:	20000e08 	.word	0x20000e08
 8005b00:	20000dbc 	.word	0x20000dbc
 8005b04:	20000dc0 	.word	0x20000dc0
 8005b08:	20000e1c 	.word	0x20000e1c
 8005b0c:	20000e24 	.word	0x20000e24
 8005b10:	20000e0c 	.word	0x20000e0c
 8005b14:	20000934 	.word	0x20000934
 8005b18:	20000930 	.word	0x20000930
 8005b1c:	20000e18 	.word	0x20000e18
 8005b20:	20000e14 	.word	0x20000e14

08005b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd8 <vTaskSwitchContext+0xb4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b32:	4b2a      	ldr	r3, [pc, #168]	@ (8005bdc <vTaskSwitchContext+0xb8>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b38:	e047      	b.n	8005bca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005b3a:	4b28      	ldr	r3, [pc, #160]	@ (8005bdc <vTaskSwitchContext+0xb8>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b40:	4b27      	ldr	r3, [pc, #156]	@ (8005be0 <vTaskSwitchContext+0xbc>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	e011      	b.n	8005b6c <vTaskSwitchContext+0x48>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <vTaskSwitchContext+0x42>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <vTaskSwitchContext+0x3e>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	491d      	ldr	r1, [pc, #116]	@ (8005be4 <vTaskSwitchContext+0xc0>)
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0e3      	beq.n	8005b48 <vTaskSwitchContext+0x24>
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4a16      	ldr	r2, [pc, #88]	@ (8005be4 <vTaskSwitchContext+0xc0>)
 8005b8c:	4413      	add	r3, r2
 8005b8e:	60bb      	str	r3, [r7, #8]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d104      	bne.n	8005bb0 <vTaskSwitchContext+0x8c>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8005be8 <vTaskSwitchContext+0xc4>)
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	4a09      	ldr	r2, [pc, #36]	@ (8005be0 <vTaskSwitchContext+0xbc>)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bc0:	4b09      	ldr	r3, [pc, #36]	@ (8005be8 <vTaskSwitchContext+0xc4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3354      	adds	r3, #84	@ 0x54
 8005bc6:	4a09      	ldr	r2, [pc, #36]	@ (8005bec <vTaskSwitchContext+0xc8>)
 8005bc8:	6013      	str	r3, [r2, #0]
}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	20000e2c 	.word	0x20000e2c
 8005bdc:	20000e18 	.word	0x20000e18
 8005be0:	20000e0c 	.word	0x20000e0c
 8005be4:	20000934 	.word	0x20000934
 8005be8:	20000930 	.word	0x20000930
 8005bec:	2000001c 	.word	0x2000001c

08005bf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10b      	bne.n	8005c18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	60fb      	str	r3, [r7, #12]
}
 8005c12:	bf00      	nop
 8005c14:	bf00      	nop
 8005c16:	e7fd      	b.n	8005c14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c18:	4b07      	ldr	r3, [pc, #28]	@ (8005c38 <vTaskPlaceOnEventList+0x48>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3318      	adds	r3, #24
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fe fe7e 	bl	8004922 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c26:	2101      	movs	r1, #1
 8005c28:	6838      	ldr	r0, [r7, #0]
 8005c2a:	f000 fa87 	bl	800613c <prvAddCurrentTaskToDelayedList>
}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000930 	.word	0x20000930

08005c3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10b      	bne.n	8005c66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	617b      	str	r3, [r7, #20]
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	e7fd      	b.n	8005c62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c66:	4b0a      	ldr	r3, [pc, #40]	@ (8005c90 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3318      	adds	r3, #24
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7fe fe33 	bl	80048da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	68b8      	ldr	r0, [r7, #8]
 8005c84:	f000 fa5a 	bl	800613c <prvAddCurrentTaskToDelayedList>
	}
 8005c88:	bf00      	nop
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000930 	.word	0x20000930

08005c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	60fb      	str	r3, [r7, #12]
}
 8005cbc:	bf00      	nop
 8005cbe:	bf00      	nop
 8005cc0:	e7fd      	b.n	8005cbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fe fe64 	bl	8004994 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8005d44 <xTaskRemoveFromEventList+0xb0>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d11d      	bne.n	8005d10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe fe5b 	bl	8004994 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce2:	4b19      	ldr	r3, [pc, #100]	@ (8005d48 <xTaskRemoveFromEventList+0xb4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d903      	bls.n	8005cf2 <xTaskRemoveFromEventList+0x5e>
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cee:	4a16      	ldr	r2, [pc, #88]	@ (8005d48 <xTaskRemoveFromEventList+0xb4>)
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4a13      	ldr	r2, [pc, #76]	@ (8005d4c <xTaskRemoveFromEventList+0xb8>)
 8005d00:	441a      	add	r2, r3
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f7fe fde6 	bl	80048da <vListInsertEnd>
 8005d0e:	e005      	b.n	8005d1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	3318      	adds	r3, #24
 8005d14:	4619      	mov	r1, r3
 8005d16:	480e      	ldr	r0, [pc, #56]	@ (8005d50 <xTaskRemoveFromEventList+0xbc>)
 8005d18:	f7fe fddf 	bl	80048da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d20:	4b0c      	ldr	r3, [pc, #48]	@ (8005d54 <xTaskRemoveFromEventList+0xc0>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d905      	bls.n	8005d36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <xTaskRemoveFromEventList+0xc4>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e001      	b.n	8005d3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d3a:	697b      	ldr	r3, [r7, #20]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000e2c 	.word	0x20000e2c
 8005d48:	20000e0c 	.word	0x20000e0c
 8005d4c:	20000934 	.word	0x20000934
 8005d50:	20000dc4 	.word	0x20000dc4
 8005d54:	20000930 	.word	0x20000930
 8005d58:	20000e18 	.word	0x20000e18

08005d5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d64:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <vTaskInternalSetTimeOutState+0x24>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d6c:	4b05      	ldr	r3, [pc, #20]	@ (8005d84 <vTaskInternalSetTimeOutState+0x28>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	605a      	str	r2, [r3, #4]
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	20000e1c 	.word	0x20000e1c
 8005d84:	20000e08 	.word	0x20000e08

08005d88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	613b      	str	r3, [r7, #16]
}
 8005daa:	bf00      	nop
 8005dac:	bf00      	nop
 8005dae:	e7fd      	b.n	8005dac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	60fb      	str	r3, [r7, #12]
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005dce:	f000 fe93 	bl	8006af8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e48 <xTaskCheckForTimeOut+0xc0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d102      	bne.n	8005df2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	e023      	b.n	8005e3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b15      	ldr	r3, [pc, #84]	@ (8005e4c <xTaskCheckForTimeOut+0xc4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d007      	beq.n	8005e0e <xTaskCheckForTimeOut+0x86>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d302      	bcc.n	8005e0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	61fb      	str	r3, [r7, #28]
 8005e0c:	e015      	b.n	8005e3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d20b      	bcs.n	8005e30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	1ad2      	subs	r2, r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ff99 	bl	8005d5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	e004      	b.n	8005e3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e36:	2301      	movs	r3, #1
 8005e38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e3a:	f000 fe8f 	bl	8006b5c <vPortExitCritical>

	return xReturn;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3720      	adds	r7, #32
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000e08 	.word	0x20000e08
 8005e4c:	20000e1c 	.word	0x20000e1c

08005e50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e54:	4b03      	ldr	r3, [pc, #12]	@ (8005e64 <vTaskMissedYield+0x14>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	20000e18 	.word	0x20000e18

08005e68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e70:	f000 f852 	bl	8005f18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e74:	4b06      	ldr	r3, [pc, #24]	@ (8005e90 <prvIdleTask+0x28>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d9f9      	bls.n	8005e70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e7c:	4b05      	ldr	r3, [pc, #20]	@ (8005e94 <prvIdleTask+0x2c>)
 8005e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e8c:	e7f0      	b.n	8005e70 <prvIdleTask+0x8>
 8005e8e:	bf00      	nop
 8005e90:	20000934 	.word	0x20000934
 8005e94:	e000ed04 	.word	0xe000ed04

08005e98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	607b      	str	r3, [r7, #4]
 8005ea2:	e00c      	b.n	8005ebe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4a12      	ldr	r2, [pc, #72]	@ (8005ef8 <prvInitialiseTaskLists+0x60>)
 8005eb0:	4413      	add	r3, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fce4 	bl	8004880 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	607b      	str	r3, [r7, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b37      	cmp	r3, #55	@ 0x37
 8005ec2:	d9ef      	bls.n	8005ea4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ec4:	480d      	ldr	r0, [pc, #52]	@ (8005efc <prvInitialiseTaskLists+0x64>)
 8005ec6:	f7fe fcdb 	bl	8004880 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eca:	480d      	ldr	r0, [pc, #52]	@ (8005f00 <prvInitialiseTaskLists+0x68>)
 8005ecc:	f7fe fcd8 	bl	8004880 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ed0:	480c      	ldr	r0, [pc, #48]	@ (8005f04 <prvInitialiseTaskLists+0x6c>)
 8005ed2:	f7fe fcd5 	bl	8004880 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ed6:	480c      	ldr	r0, [pc, #48]	@ (8005f08 <prvInitialiseTaskLists+0x70>)
 8005ed8:	f7fe fcd2 	bl	8004880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005edc:	480b      	ldr	r0, [pc, #44]	@ (8005f0c <prvInitialiseTaskLists+0x74>)
 8005ede:	f7fe fccf 	bl	8004880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8005f10 <prvInitialiseTaskLists+0x78>)
 8005ee4:	4a05      	ldr	r2, [pc, #20]	@ (8005efc <prvInitialiseTaskLists+0x64>)
 8005ee6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f14 <prvInitialiseTaskLists+0x7c>)
 8005eea:	4a05      	ldr	r2, [pc, #20]	@ (8005f00 <prvInitialiseTaskLists+0x68>)
 8005eec:	601a      	str	r2, [r3, #0]
}
 8005eee:	bf00      	nop
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000934 	.word	0x20000934
 8005efc:	20000d94 	.word	0x20000d94
 8005f00:	20000da8 	.word	0x20000da8
 8005f04:	20000dc4 	.word	0x20000dc4
 8005f08:	20000dd8 	.word	0x20000dd8
 8005f0c:	20000df0 	.word	0x20000df0
 8005f10:	20000dbc 	.word	0x20000dbc
 8005f14:	20000dc0 	.word	0x20000dc0

08005f18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f1e:	e019      	b.n	8005f54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f20:	f000 fdea 	bl	8006af8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f24:	4b10      	ldr	r3, [pc, #64]	@ (8005f68 <prvCheckTasksWaitingTermination+0x50>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fe fd2f 	bl	8004994 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f36:	4b0d      	ldr	r3, [pc, #52]	@ (8005f6c <prvCheckTasksWaitingTermination+0x54>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8005f6c <prvCheckTasksWaitingTermination+0x54>)
 8005f3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f40:	4b0b      	ldr	r3, [pc, #44]	@ (8005f70 <prvCheckTasksWaitingTermination+0x58>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	4a0a      	ldr	r2, [pc, #40]	@ (8005f70 <prvCheckTasksWaitingTermination+0x58>)
 8005f48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f4a:	f000 fe07 	bl	8006b5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f810 	bl	8005f74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f54:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <prvCheckTasksWaitingTermination+0x58>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e1      	bne.n	8005f20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f5c:	bf00      	nop
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000dd8 	.word	0x20000dd8
 8005f6c:	20000e04 	.word	0x20000e04
 8005f70:	20000dec 	.word	0x20000dec

08005f74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3354      	adds	r3, #84	@ 0x54
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 f8d1 	bl	8007128 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d108      	bne.n	8005fa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 ff9f 	bl	8006ed8 <vPortFree>
				vPortFree( pxTCB );
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 ff9c 	bl	8006ed8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fa0:	e019      	b.n	8005fd6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d103      	bne.n	8005fb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 ff93 	bl	8006ed8 <vPortFree>
	}
 8005fb2:	e010      	b.n	8005fd6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d00b      	beq.n	8005fd6 <prvDeleteTCB+0x62>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60fb      	str	r3, [r7, #12]
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	e7fd      	b.n	8005fd2 <prvDeleteTCB+0x5e>
	}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <prvResetNextTaskUnblockTime+0x38>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d104      	bne.n	8005ffa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <prvResetNextTaskUnblockTime+0x3c>)
 8005ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ff8:	e008      	b.n	800600c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ffa:	4b07      	ldr	r3, [pc, #28]	@ (8006018 <prvResetNextTaskUnblockTime+0x38>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4a04      	ldr	r2, [pc, #16]	@ (800601c <prvResetNextTaskUnblockTime+0x3c>)
 800600a:	6013      	str	r3, [r2, #0]
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	20000dbc 	.word	0x20000dbc
 800601c:	20000e24 	.word	0x20000e24

08006020 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006026:	4b0b      	ldr	r3, [pc, #44]	@ (8006054 <xTaskGetSchedulerState+0x34>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d102      	bne.n	8006034 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800602e:	2301      	movs	r3, #1
 8006030:	607b      	str	r3, [r7, #4]
 8006032:	e008      	b.n	8006046 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006034:	4b08      	ldr	r3, [pc, #32]	@ (8006058 <xTaskGetSchedulerState+0x38>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800603c:	2302      	movs	r3, #2
 800603e:	607b      	str	r3, [r7, #4]
 8006040:	e001      	b.n	8006046 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006042:	2300      	movs	r3, #0
 8006044:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006046:	687b      	ldr	r3, [r7, #4]
	}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	20000e10 	.word	0x20000e10
 8006058:	20000e2c 	.word	0x20000e2c

0800605c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d058      	beq.n	8006124 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006072:	4b2f      	ldr	r3, [pc, #188]	@ (8006130 <xTaskPriorityDisinherit+0xd4>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	429a      	cmp	r2, r3
 800607a:	d00b      	beq.n	8006094 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60fb      	str	r3, [r7, #12]
}
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	e7fd      	b.n	8006090 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10b      	bne.n	80060b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	60bb      	str	r3, [r7, #8]
}
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	e7fd      	b.n	80060b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b8:	1e5a      	subs	r2, r3, #1
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d02c      	beq.n	8006124 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d128      	bne.n	8006124 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fe fc5c 	bl	8004994 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006134 <xTaskPriorityDisinherit+0xd8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d903      	bls.n	8006104 <xTaskPriorityDisinherit+0xa8>
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006100:	4a0c      	ldr	r2, [pc, #48]	@ (8006134 <xTaskPriorityDisinherit+0xd8>)
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4a09      	ldr	r2, [pc, #36]	@ (8006138 <xTaskPriorityDisinherit+0xdc>)
 8006112:	441a      	add	r2, r3
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	3304      	adds	r3, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4610      	mov	r0, r2
 800611c:	f7fe fbdd 	bl	80048da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006124:	697b      	ldr	r3, [r7, #20]
	}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000930 	.word	0x20000930
 8006134:	20000e0c 	.word	0x20000e0c
 8006138:	20000934 	.word	0x20000934

0800613c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006146:	4b21      	ldr	r3, [pc, #132]	@ (80061cc <prvAddCurrentTaskToDelayedList+0x90>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800614c:	4b20      	ldr	r3, [pc, #128]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3304      	adds	r3, #4
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fc1e 	bl	8004994 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615e:	d10a      	bne.n	8006176 <prvAddCurrentTaskToDelayedList+0x3a>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d007      	beq.n	8006176 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006166:	4b1a      	ldr	r3, [pc, #104]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3304      	adds	r3, #4
 800616c:	4619      	mov	r1, r3
 800616e:	4819      	ldr	r0, [pc, #100]	@ (80061d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006170:	f7fe fbb3 	bl	80048da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006174:	e026      	b.n	80061c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4413      	add	r3, r2
 800617c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800617e:	4b14      	ldr	r3, [pc, #80]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	429a      	cmp	r2, r3
 800618c:	d209      	bcs.n	80061a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800618e:	4b12      	ldr	r3, [pc, #72]	@ (80061d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b0f      	ldr	r3, [pc, #60]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7fe fbc1 	bl	8004922 <vListInsert>
}
 80061a0:	e010      	b.n	80061c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a2:	4b0e      	ldr	r3, [pc, #56]	@ (80061dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b0a      	ldr	r3, [pc, #40]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f7fe fbb7 	bl	8004922 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061b4:	4b0a      	ldr	r3, [pc, #40]	@ (80061e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d202      	bcs.n	80061c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061be:	4a08      	ldr	r2, [pc, #32]	@ (80061e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	6013      	str	r3, [r2, #0]
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000e08 	.word	0x20000e08
 80061d0:	20000930 	.word	0x20000930
 80061d4:	20000df0 	.word	0x20000df0
 80061d8:	20000dc0 	.word	0x20000dc0
 80061dc:	20000dbc 	.word	0x20000dbc
 80061e0:	20000e24 	.word	0x20000e24

080061e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	@ 0x28
 80061e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061ee:	f000 fb13 	bl	8006818 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006268 <xTimerCreateTimerTask+0x84>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d021      	beq.n	800623e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006202:	1d3a      	adds	r2, r7, #4
 8006204:	f107 0108 	add.w	r1, r7, #8
 8006208:	f107 030c 	add.w	r3, r7, #12
 800620c:	4618      	mov	r0, r3
 800620e:	f7fe fb1d 	bl	800484c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	9202      	str	r2, [sp, #8]
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	2302      	movs	r3, #2
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	2300      	movs	r3, #0
 8006222:	460a      	mov	r2, r1
 8006224:	4911      	ldr	r1, [pc, #68]	@ (800626c <xTimerCreateTimerTask+0x88>)
 8006226:	4812      	ldr	r0, [pc, #72]	@ (8006270 <xTimerCreateTimerTask+0x8c>)
 8006228:	f7ff f8d8 	bl	80053dc <xTaskCreateStatic>
 800622c:	4603      	mov	r3, r0
 800622e:	4a11      	ldr	r2, [pc, #68]	@ (8006274 <xTimerCreateTimerTask+0x90>)
 8006230:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006232:	4b10      	ldr	r3, [pc, #64]	@ (8006274 <xTimerCreateTimerTask+0x90>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800623a:	2301      	movs	r3, #1
 800623c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10b      	bne.n	800625c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	613b      	str	r3, [r7, #16]
}
 8006256:	bf00      	nop
 8006258:	bf00      	nop
 800625a:	e7fd      	b.n	8006258 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800625c:	697b      	ldr	r3, [r7, #20]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000e60 	.word	0x20000e60
 800626c:	08007374 	.word	0x08007374
 8006270:	080063b1 	.word	0x080063b1
 8006274:	20000e64 	.word	0x20000e64

08006278 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	@ 0x28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006286:	2300      	movs	r3, #0
 8006288:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10b      	bne.n	80062a8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	623b      	str	r3, [r7, #32]
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	e7fd      	b.n	80062a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062a8:	4b19      	ldr	r3, [pc, #100]	@ (8006310 <xTimerGenericCommand+0x98>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d02a      	beq.n	8006306 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b05      	cmp	r3, #5
 80062c0:	dc18      	bgt.n	80062f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062c2:	f7ff fead 	bl	8006020 <xTaskGetSchedulerState>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d109      	bne.n	80062e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062cc:	4b10      	ldr	r3, [pc, #64]	@ (8006310 <xTimerGenericCommand+0x98>)
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	f107 0110 	add.w	r1, r7, #16
 80062d4:	2300      	movs	r3, #0
 80062d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d8:	f7fe fc90 	bl	8004bfc <xQueueGenericSend>
 80062dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80062de:	e012      	b.n	8006306 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006310 <xTimerGenericCommand+0x98>)
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	f107 0110 	add.w	r1, r7, #16
 80062e8:	2300      	movs	r3, #0
 80062ea:	2200      	movs	r2, #0
 80062ec:	f7fe fc86 	bl	8004bfc <xQueueGenericSend>
 80062f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80062f2:	e008      	b.n	8006306 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062f4:	4b06      	ldr	r3, [pc, #24]	@ (8006310 <xTimerGenericCommand+0x98>)
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	f107 0110 	add.w	r1, r7, #16
 80062fc:	2300      	movs	r3, #0
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	f7fe fd7e 	bl	8004e00 <xQueueGenericSendFromISR>
 8006304:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006308:	4618      	mov	r0, r3
 800630a:	3728      	adds	r7, #40	@ 0x28
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000e60 	.word	0x20000e60

08006314 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af02      	add	r7, sp, #8
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800631e:	4b23      	ldr	r3, [pc, #140]	@ (80063ac <prvProcessExpiredTimer+0x98>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe fb31 	bl	8004994 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d023      	beq.n	8006388 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	18d1      	adds	r1, r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	6978      	ldr	r0, [r7, #20]
 800634e:	f000 f8d5 	bl	80064fc <prvInsertTimerInActiveList>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d020      	beq.n	800639a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006358:	2300      	movs	r3, #0
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	2300      	movs	r3, #0
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	2100      	movs	r1, #0
 8006362:	6978      	ldr	r0, [r7, #20]
 8006364:	f7ff ff88 	bl	8006278 <xTimerGenericCommand>
 8006368:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d114      	bne.n	800639a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	e7fd      	b.n	8006384 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800638e:	f023 0301 	bic.w	r3, r3, #1
 8006392:	b2da      	uxtb	r2, r3
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	6978      	ldr	r0, [r7, #20]
 80063a0:	4798      	blx	r3
}
 80063a2:	bf00      	nop
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000e58 	.word	0x20000e58

080063b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063b8:	f107 0308 	add.w	r3, r7, #8
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 f859 	bl	8006474 <prvGetNextExpireTime>
 80063c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4619      	mov	r1, r3
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f805 	bl	80063d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063ce:	f000 f8d7 	bl	8006580 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063d2:	bf00      	nop
 80063d4:	e7f0      	b.n	80063b8 <prvTimerTask+0x8>
	...

080063d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063e2:	f7ff fa29 	bl	8005838 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063e6:	f107 0308 	add.w	r3, r7, #8
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 f866 	bl	80064bc <prvSampleTimeNow>
 80063f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d130      	bne.n	800645a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <prvProcessTimerOrBlockTask+0x3c>
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	429a      	cmp	r2, r3
 8006404:	d806      	bhi.n	8006414 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006406:	f7ff fa25 	bl	8005854 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ff81 	bl	8006314 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006412:	e024      	b.n	800645e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d008      	beq.n	800642c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800641a:	4b13      	ldr	r3, [pc, #76]	@ (8006468 <prvProcessTimerOrBlockTask+0x90>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <prvProcessTimerOrBlockTask+0x50>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <prvProcessTimerOrBlockTask+0x52>
 8006428:	2300      	movs	r3, #0
 800642a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800642c:	4b0f      	ldr	r3, [pc, #60]	@ (800646c <prvProcessTimerOrBlockTask+0x94>)
 800642e:	6818      	ldr	r0, [r3, #0]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	4619      	mov	r1, r3
 800643a:	f7fe ff9b 	bl	8005374 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800643e:	f7ff fa09 	bl	8005854 <xTaskResumeAll>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006448:	4b09      	ldr	r3, [pc, #36]	@ (8006470 <prvProcessTimerOrBlockTask+0x98>)
 800644a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	f3bf 8f6f 	isb	sy
}
 8006458:	e001      	b.n	800645e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800645a:	f7ff f9fb 	bl	8005854 <xTaskResumeAll>
}
 800645e:	bf00      	nop
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000e5c 	.word	0x20000e5c
 800646c:	20000e60 	.word	0x20000e60
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800647c:	4b0e      	ldr	r3, [pc, #56]	@ (80064b8 <prvGetNextExpireTime+0x44>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <prvGetNextExpireTime+0x16>
 8006486:	2201      	movs	r2, #1
 8006488:	e000      	b.n	800648c <prvGetNextExpireTime+0x18>
 800648a:	2200      	movs	r2, #0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006498:	4b07      	ldr	r3, [pc, #28]	@ (80064b8 <prvGetNextExpireTime+0x44>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e001      	b.n	80064a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064a8:	68fb      	ldr	r3, [r7, #12]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	20000e58 	.word	0x20000e58

080064bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064c4:	f7ff fa64 	bl	8005990 <xTaskGetTickCount>
 80064c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064ca:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <prvSampleTimeNow+0x3c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d205      	bcs.n	80064e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064d4:	f000 f93a 	bl	800674c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e002      	b.n	80064e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064e6:	4a04      	ldr	r2, [pc, #16]	@ (80064f8 <prvSampleTimeNow+0x3c>)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064ec:	68fb      	ldr	r3, [r7, #12]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000e68 	.word	0x20000e68

080064fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	429a      	cmp	r2, r3
 8006520:	d812      	bhi.n	8006548 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	1ad2      	subs	r2, r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	429a      	cmp	r2, r3
 800652e:	d302      	bcc.n	8006536 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	e01b      	b.n	800656e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006536:	4b10      	ldr	r3, [pc, #64]	@ (8006578 <prvInsertTimerInActiveList+0x7c>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3304      	adds	r3, #4
 800653e:	4619      	mov	r1, r3
 8006540:	4610      	mov	r0, r2
 8006542:	f7fe f9ee 	bl	8004922 <vListInsert>
 8006546:	e012      	b.n	800656e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d206      	bcs.n	800655e <prvInsertTimerInActiveList+0x62>
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d302      	bcc.n	800655e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006558:	2301      	movs	r3, #1
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e007      	b.n	800656e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800655e:	4b07      	ldr	r3, [pc, #28]	@ (800657c <prvInsertTimerInActiveList+0x80>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3304      	adds	r3, #4
 8006566:	4619      	mov	r1, r3
 8006568:	4610      	mov	r0, r2
 800656a:	f7fe f9da 	bl	8004922 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800656e:	697b      	ldr	r3, [r7, #20]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	20000e5c 	.word	0x20000e5c
 800657c:	20000e58 	.word	0x20000e58

08006580 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08e      	sub	sp, #56	@ 0x38
 8006584:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006586:	e0ce      	b.n	8006726 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	da19      	bge.n	80065c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800658e:	1d3b      	adds	r3, r7, #4
 8006590:	3304      	adds	r3, #4
 8006592:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10b      	bne.n	80065b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	61fb      	str	r3, [r7, #28]
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	e7fd      	b.n	80065ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065b8:	6850      	ldr	r0, [r2, #4]
 80065ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065bc:	6892      	ldr	r2, [r2, #8]
 80065be:	4611      	mov	r1, r2
 80065c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f2c0 80ae 	blt.w	8006726 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d004      	beq.n	80065e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d8:	3304      	adds	r3, #4
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe f9da 	bl	8004994 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065e0:	463b      	mov	r3, r7
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff ff6a 	bl	80064bc <prvSampleTimeNow>
 80065e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	f200 8097 	bhi.w	8006720 <prvProcessReceivedCommands+0x1a0>
 80065f2:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <prvProcessReceivedCommands+0x78>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	08006621 	.word	0x08006621
 80065fc:	08006621 	.word	0x08006621
 8006600:	08006621 	.word	0x08006621
 8006604:	08006697 	.word	0x08006697
 8006608:	080066ab 	.word	0x080066ab
 800660c:	080066f7 	.word	0x080066f7
 8006610:	08006621 	.word	0x08006621
 8006614:	08006621 	.word	0x08006621
 8006618:	08006697 	.word	0x08006697
 800661c:	080066ab 	.word	0x080066ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006622:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	18d1      	adds	r1, r2, r3
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800663e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006640:	f7ff ff5c 	bl	80064fc <prvInsertTimerInActiveList>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d06c      	beq.n	8006724 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800664a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006650:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d061      	beq.n	8006724 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	441a      	add	r2, r3
 8006668:	2300      	movs	r3, #0
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	2100      	movs	r1, #0
 8006670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006672:	f7ff fe01 	bl	8006278 <xTimerGenericCommand>
 8006676:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d152      	bne.n	8006724 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	61bb      	str	r3, [r7, #24]
}
 8006690:	bf00      	nop
 8006692:	bf00      	nop
 8006694:	e7fd      	b.n	8006692 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006698:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066a8:	e03d      	b.n	8006726 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066b0:	f043 0301 	orr.w	r3, r3, #1
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	617b      	str	r3, [r7, #20]
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	e7fd      	b.n	80066de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	18d1      	adds	r1, r2, r3
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066f0:	f7ff ff04 	bl	80064fc <prvInsertTimerInActiveList>
					break;
 80066f4:	e017      	b.n	8006726 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d103      	bne.n	800670c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006704:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006706:	f000 fbe7 	bl	8006ed8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800670a:	e00c      	b.n	8006726 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800670c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	b2da      	uxtb	r2, r3
 8006718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800671e:	e002      	b.n	8006726 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006720:	bf00      	nop
 8006722:	e000      	b.n	8006726 <prvProcessReceivedCommands+0x1a6>
					break;
 8006724:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006726:	4b08      	ldr	r3, [pc, #32]	@ (8006748 <prvProcessReceivedCommands+0x1c8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	1d39      	adds	r1, r7, #4
 800672c:	2200      	movs	r2, #0
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fc04 	bl	8004f3c <xQueueReceive>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	f47f af26 	bne.w	8006588 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	3730      	adds	r7, #48	@ 0x30
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000e60 	.word	0x20000e60

0800674c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006752:	e049      	b.n	80067e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006754:	4b2e      	ldr	r3, [pc, #184]	@ (8006810 <prvSwitchTimerLists+0xc4>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800675e:	4b2c      	ldr	r3, [pc, #176]	@ (8006810 <prvSwitchTimerLists+0xc4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3304      	adds	r3, #4
 800676c:	4618      	mov	r0, r3
 800676e:	f7fe f911 	bl	8004994 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d02f      	beq.n	80067e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	429a      	cmp	r2, r3
 8006798:	d90e      	bls.n	80067b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006810 <prvSwitchTimerLists+0xc4>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4619      	mov	r1, r3
 80067b0:	4610      	mov	r0, r2
 80067b2:	f7fe f8b6 	bl	8004922 <vListInsert>
 80067b6:	e017      	b.n	80067e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067b8:	2300      	movs	r3, #0
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	2300      	movs	r3, #0
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	2100      	movs	r1, #0
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fd58 	bl	8006278 <xTimerGenericCommand>
 80067c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10b      	bne.n	80067e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	603b      	str	r3, [r7, #0]
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	e7fd      	b.n	80067e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067e8:	4b09      	ldr	r3, [pc, #36]	@ (8006810 <prvSwitchTimerLists+0xc4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1b0      	bne.n	8006754 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067f2:	4b07      	ldr	r3, [pc, #28]	@ (8006810 <prvSwitchTimerLists+0xc4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067f8:	4b06      	ldr	r3, [pc, #24]	@ (8006814 <prvSwitchTimerLists+0xc8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a04      	ldr	r2, [pc, #16]	@ (8006810 <prvSwitchTimerLists+0xc4>)
 80067fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006800:	4a04      	ldr	r2, [pc, #16]	@ (8006814 <prvSwitchTimerLists+0xc8>)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	6013      	str	r3, [r2, #0]
}
 8006806:	bf00      	nop
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000e58 	.word	0x20000e58
 8006814:	20000e5c 	.word	0x20000e5c

08006818 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800681e:	f000 f96b 	bl	8006af8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006822:	4b15      	ldr	r3, [pc, #84]	@ (8006878 <prvCheckForValidListAndQueue+0x60>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d120      	bne.n	800686c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800682a:	4814      	ldr	r0, [pc, #80]	@ (800687c <prvCheckForValidListAndQueue+0x64>)
 800682c:	f7fe f828 	bl	8004880 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006830:	4813      	ldr	r0, [pc, #76]	@ (8006880 <prvCheckForValidListAndQueue+0x68>)
 8006832:	f7fe f825 	bl	8004880 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006836:	4b13      	ldr	r3, [pc, #76]	@ (8006884 <prvCheckForValidListAndQueue+0x6c>)
 8006838:	4a10      	ldr	r2, [pc, #64]	@ (800687c <prvCheckForValidListAndQueue+0x64>)
 800683a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800683c:	4b12      	ldr	r3, [pc, #72]	@ (8006888 <prvCheckForValidListAndQueue+0x70>)
 800683e:	4a10      	ldr	r2, [pc, #64]	@ (8006880 <prvCheckForValidListAndQueue+0x68>)
 8006840:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006842:	2300      	movs	r3, #0
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4b11      	ldr	r3, [pc, #68]	@ (800688c <prvCheckForValidListAndQueue+0x74>)
 8006848:	4a11      	ldr	r2, [pc, #68]	@ (8006890 <prvCheckForValidListAndQueue+0x78>)
 800684a:	2110      	movs	r1, #16
 800684c:	200a      	movs	r0, #10
 800684e:	f7fe f935 	bl	8004abc <xQueueGenericCreateStatic>
 8006852:	4603      	mov	r3, r0
 8006854:	4a08      	ldr	r2, [pc, #32]	@ (8006878 <prvCheckForValidListAndQueue+0x60>)
 8006856:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006858:	4b07      	ldr	r3, [pc, #28]	@ (8006878 <prvCheckForValidListAndQueue+0x60>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006860:	4b05      	ldr	r3, [pc, #20]	@ (8006878 <prvCheckForValidListAndQueue+0x60>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	490b      	ldr	r1, [pc, #44]	@ (8006894 <prvCheckForValidListAndQueue+0x7c>)
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fd5a 	bl	8005320 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800686c:	f000 f976 	bl	8006b5c <vPortExitCritical>
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000e60 	.word	0x20000e60
 800687c:	20000e30 	.word	0x20000e30
 8006880:	20000e44 	.word	0x20000e44
 8006884:	20000e58 	.word	0x20000e58
 8006888:	20000e5c 	.word	0x20000e5c
 800688c:	20000f0c 	.word	0x20000f0c
 8006890:	20000e6c 	.word	0x20000e6c
 8006894:	0800737c 	.word	0x0800737c

08006898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3b04      	subs	r3, #4
 80068a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3b04      	subs	r3, #4
 80068b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f023 0201 	bic.w	r2, r3, #1
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3b04      	subs	r3, #4
 80068c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068c8:	4a0c      	ldr	r2, [pc, #48]	@ (80068fc <pxPortInitialiseStack+0x64>)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3b14      	subs	r3, #20
 80068d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3b04      	subs	r3, #4
 80068de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f06f 0202 	mvn.w	r2, #2
 80068e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3b20      	subs	r3, #32
 80068ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068ee:	68fb      	ldr	r3, [r7, #12]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	08006901 	.word	0x08006901

08006900 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800690a:	4b13      	ldr	r3, [pc, #76]	@ (8006958 <prvTaskExitError+0x58>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d00b      	beq.n	800692c <prvTaskExitError+0x2c>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	60fb      	str	r3, [r7, #12]
}
 8006926:	bf00      	nop
 8006928:	bf00      	nop
 800692a:	e7fd      	b.n	8006928 <prvTaskExitError+0x28>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	60bb      	str	r3, [r7, #8]
}
 800693e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006940:	bf00      	nop
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0fc      	beq.n	8006942 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006948:	bf00      	nop
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20000018 	.word	0x20000018
 800695c:	00000000 	.word	0x00000000

08006960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006960:	4b07      	ldr	r3, [pc, #28]	@ (8006980 <pxCurrentTCBConst2>)
 8006962:	6819      	ldr	r1, [r3, #0]
 8006964:	6808      	ldr	r0, [r1, #0]
 8006966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800696a:	f380 8809 	msr	PSP, r0
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f04f 0000 	mov.w	r0, #0
 8006976:	f380 8811 	msr	BASEPRI, r0
 800697a:	4770      	bx	lr
 800697c:	f3af 8000 	nop.w

08006980 <pxCurrentTCBConst2>:
 8006980:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop

08006988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006988:	4808      	ldr	r0, [pc, #32]	@ (80069ac <prvPortStartFirstTask+0x24>)
 800698a:	6800      	ldr	r0, [r0, #0]
 800698c:	6800      	ldr	r0, [r0, #0]
 800698e:	f380 8808 	msr	MSP, r0
 8006992:	f04f 0000 	mov.w	r0, #0
 8006996:	f380 8814 	msr	CONTROL, r0
 800699a:	b662      	cpsie	i
 800699c:	b661      	cpsie	f
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	df00      	svc	0
 80069a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069aa:	bf00      	nop
 80069ac:	e000ed08 	.word	0xe000ed08

080069b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069b6:	4b47      	ldr	r3, [pc, #284]	@ (8006ad4 <xPortStartScheduler+0x124>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a47      	ldr	r2, [pc, #284]	@ (8006ad8 <xPortStartScheduler+0x128>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d10b      	bne.n	80069d8 <xPortStartScheduler+0x28>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	613b      	str	r3, [r7, #16]
}
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	e7fd      	b.n	80069d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069d8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ad4 <xPortStartScheduler+0x124>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a3f      	ldr	r2, [pc, #252]	@ (8006adc <xPortStartScheduler+0x12c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d10b      	bne.n	80069fa <xPortStartScheduler+0x4a>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	60fb      	str	r3, [r7, #12]
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	e7fd      	b.n	80069f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069fa:	4b39      	ldr	r3, [pc, #228]	@ (8006ae0 <xPortStartScheduler+0x130>)
 80069fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	22ff      	movs	r2, #255	@ 0xff
 8006a0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	4b31      	ldr	r3, [pc, #196]	@ (8006ae4 <xPortStartScheduler+0x134>)
 8006a20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a22:	4b31      	ldr	r3, [pc, #196]	@ (8006ae8 <xPortStartScheduler+0x138>)
 8006a24:	2207      	movs	r2, #7
 8006a26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a28:	e009      	b.n	8006a3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ae8 <xPortStartScheduler+0x138>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	4a2d      	ldr	r2, [pc, #180]	@ (8006ae8 <xPortStartScheduler+0x138>)
 8006a32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a46:	2b80      	cmp	r3, #128	@ 0x80
 8006a48:	d0ef      	beq.n	8006a2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a4a:	4b27      	ldr	r3, [pc, #156]	@ (8006ae8 <xPortStartScheduler+0x138>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f1c3 0307 	rsb	r3, r3, #7
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d00b      	beq.n	8006a6e <xPortStartScheduler+0xbe>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	60bb      	str	r3, [r7, #8]
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	e7fd      	b.n	8006a6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae8 <xPortStartScheduler+0x138>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae8 <xPortStartScheduler+0x138>)
 8006a76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a78:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae8 <xPortStartScheduler+0x138>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a80:	4a19      	ldr	r2, [pc, #100]	@ (8006ae8 <xPortStartScheduler+0x138>)
 8006a82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a8c:	4b17      	ldr	r3, [pc, #92]	@ (8006aec <xPortStartScheduler+0x13c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a16      	ldr	r2, [pc, #88]	@ (8006aec <xPortStartScheduler+0x13c>)
 8006a92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a98:	4b14      	ldr	r3, [pc, #80]	@ (8006aec <xPortStartScheduler+0x13c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a13      	ldr	r2, [pc, #76]	@ (8006aec <xPortStartScheduler+0x13c>)
 8006a9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006aa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006aa4:	f000 f8da 	bl	8006c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006aa8:	4b11      	ldr	r3, [pc, #68]	@ (8006af0 <xPortStartScheduler+0x140>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006aae:	f000 f8f9 	bl	8006ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ab2:	4b10      	ldr	r3, [pc, #64]	@ (8006af4 <xPortStartScheduler+0x144>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8006af4 <xPortStartScheduler+0x144>)
 8006ab8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006abc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006abe:	f7ff ff63 	bl	8006988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ac2:	f7ff f82f 	bl	8005b24 <vTaskSwitchContext>
	prvTaskExitError();
 8006ac6:	f7ff ff1b 	bl	8006900 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	e000ed00 	.word	0xe000ed00
 8006ad8:	410fc271 	.word	0x410fc271
 8006adc:	410fc270 	.word	0x410fc270
 8006ae0:	e000e400 	.word	0xe000e400
 8006ae4:	20000f5c 	.word	0x20000f5c
 8006ae8:	20000f60 	.word	0x20000f60
 8006aec:	e000ed20 	.word	0xe000ed20
 8006af0:	20000018 	.word	0x20000018
 8006af4:	e000ef34 	.word	0xe000ef34

08006af8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	607b      	str	r3, [r7, #4]
}
 8006b10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b12:	4b10      	ldr	r3, [pc, #64]	@ (8006b54 <vPortEnterCritical+0x5c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3301      	adds	r3, #1
 8006b18:	4a0e      	ldr	r2, [pc, #56]	@ (8006b54 <vPortEnterCritical+0x5c>)
 8006b1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <vPortEnterCritical+0x5c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d110      	bne.n	8006b46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b24:	4b0c      	ldr	r3, [pc, #48]	@ (8006b58 <vPortEnterCritical+0x60>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00b      	beq.n	8006b46 <vPortEnterCritical+0x4e>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	603b      	str	r3, [r7, #0]
}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	e7fd      	b.n	8006b42 <vPortEnterCritical+0x4a>
	}
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	20000018 	.word	0x20000018
 8006b58:	e000ed04 	.word	0xe000ed04

08006b5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b62:	4b12      	ldr	r3, [pc, #72]	@ (8006bac <vPortExitCritical+0x50>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <vPortExitCritical+0x26>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	607b      	str	r3, [r7, #4]
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	e7fd      	b.n	8006b7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b82:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <vPortExitCritical+0x50>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	4a08      	ldr	r2, [pc, #32]	@ (8006bac <vPortExitCritical+0x50>)
 8006b8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b8c:	4b07      	ldr	r3, [pc, #28]	@ (8006bac <vPortExitCritical+0x50>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <vPortExitCritical+0x44>
 8006b94:	2300      	movs	r3, #0
 8006b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f383 8811 	msr	BASEPRI, r3
}
 8006b9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	20000018 	.word	0x20000018

08006bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bb0:	f3ef 8009 	mrs	r0, PSP
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	4b15      	ldr	r3, [pc, #84]	@ (8006c10 <pxCurrentTCBConst>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	f01e 0f10 	tst.w	lr, #16
 8006bc0:	bf08      	it	eq
 8006bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bca:	6010      	str	r0, [r2, #0]
 8006bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006bd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006bd4:	f380 8811 	msr	BASEPRI, r0
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f7fe ffa0 	bl	8005b24 <vTaskSwitchContext>
 8006be4:	f04f 0000 	mov.w	r0, #0
 8006be8:	f380 8811 	msr	BASEPRI, r0
 8006bec:	bc09      	pop	{r0, r3}
 8006bee:	6819      	ldr	r1, [r3, #0]
 8006bf0:	6808      	ldr	r0, [r1, #0]
 8006bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf6:	f01e 0f10 	tst.w	lr, #16
 8006bfa:	bf08      	it	eq
 8006bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c00:	f380 8809 	msr	PSP, r0
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	f3af 8000 	nop.w

08006c10 <pxCurrentTCBConst>:
 8006c10:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop

08006c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	607b      	str	r3, [r7, #4]
}
 8006c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c32:	f7fe febd 	bl	80059b0 <xTaskIncrementTick>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c3c:	4b06      	ldr	r3, [pc, #24]	@ (8006c58 <xPortSysTickHandler+0x40>)
 8006c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	2300      	movs	r3, #0
 8006c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	f383 8811 	msr	BASEPRI, r3
}
 8006c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c60:	4b0b      	ldr	r3, [pc, #44]	@ (8006c90 <vPortSetupTimerInterrupt+0x34>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c66:	4b0b      	ldr	r3, [pc, #44]	@ (8006c94 <vPortSetupTimerInterrupt+0x38>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <vPortSetupTimerInterrupt+0x3c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a0a      	ldr	r2, [pc, #40]	@ (8006c9c <vPortSetupTimerInterrupt+0x40>)
 8006c72:	fba2 2303 	umull	r2, r3, r2, r3
 8006c76:	099b      	lsrs	r3, r3, #6
 8006c78:	4a09      	ldr	r2, [pc, #36]	@ (8006ca0 <vPortSetupTimerInterrupt+0x44>)
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c7e:	4b04      	ldr	r3, [pc, #16]	@ (8006c90 <vPortSetupTimerInterrupt+0x34>)
 8006c80:	2207      	movs	r2, #7
 8006c82:	601a      	str	r2, [r3, #0]
}
 8006c84:	bf00      	nop
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	e000e010 	.word	0xe000e010
 8006c94:	e000e018 	.word	0xe000e018
 8006c98:	2000000c 	.word	0x2000000c
 8006c9c:	10624dd3 	.word	0x10624dd3
 8006ca0:	e000e014 	.word	0xe000e014

08006ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006cb4 <vPortEnableVFP+0x10>
 8006ca8:	6801      	ldr	r1, [r0, #0]
 8006caa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006cae:	6001      	str	r1, [r0, #0]
 8006cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cb2:	bf00      	nop
 8006cb4:	e000ed88 	.word	0xe000ed88

08006cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cbe:	f3ef 8305 	mrs	r3, IPSR
 8006cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b0f      	cmp	r3, #15
 8006cc8:	d915      	bls.n	8006cf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cca:	4a18      	ldr	r2, [pc, #96]	@ (8006d2c <vPortValidateInterruptPriority+0x74>)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cd4:	4b16      	ldr	r3, [pc, #88]	@ (8006d30 <vPortValidateInterruptPriority+0x78>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	7afa      	ldrb	r2, [r7, #11]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d20b      	bcs.n	8006cf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	607b      	str	r3, [r7, #4]
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	e7fd      	b.n	8006cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d34 <vPortValidateInterruptPriority+0x7c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8006d38 <vPortValidateInterruptPriority+0x80>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d90b      	bls.n	8006d1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	603b      	str	r3, [r7, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	bf00      	nop
 8006d1c:	e7fd      	b.n	8006d1a <vPortValidateInterruptPriority+0x62>
	}
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	e000e3f0 	.word	0xe000e3f0
 8006d30:	20000f5c 	.word	0x20000f5c
 8006d34:	e000ed0c 	.word	0xe000ed0c
 8006d38:	20000f60 	.word	0x20000f60

08006d3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08a      	sub	sp, #40	@ 0x28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d48:	f7fe fd76 	bl	8005838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d4c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ec0 <pvPortMalloc+0x184>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d54:	f000 f924 	bl	8006fa0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d58:	4b5a      	ldr	r3, [pc, #360]	@ (8006ec4 <pvPortMalloc+0x188>)
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f040 8095 	bne.w	8006e90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01e      	beq.n	8006daa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4413      	add	r3, r2
 8006d72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d015      	beq.n	8006daa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f023 0307 	bic.w	r3, r3, #7
 8006d84:	3308      	adds	r3, #8
 8006d86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <pvPortMalloc+0x6e>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	617b      	str	r3, [r7, #20]
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	e7fd      	b.n	8006da6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d06f      	beq.n	8006e90 <pvPortMalloc+0x154>
 8006db0:	4b45      	ldr	r3, [pc, #276]	@ (8006ec8 <pvPortMalloc+0x18c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d86a      	bhi.n	8006e90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dba:	4b44      	ldr	r3, [pc, #272]	@ (8006ecc <pvPortMalloc+0x190>)
 8006dbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dbe:	4b43      	ldr	r3, [pc, #268]	@ (8006ecc <pvPortMalloc+0x190>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dc4:	e004      	b.n	8006dd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d903      	bls.n	8006de2 <pvPortMalloc+0xa6>
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f1      	bne.n	8006dc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006de2:	4b37      	ldr	r3, [pc, #220]	@ (8006ec0 <pvPortMalloc+0x184>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d051      	beq.n	8006e90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2208      	movs	r2, #8
 8006df2:	4413      	add	r3, r2
 8006df4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	1ad2      	subs	r2, r2, r3
 8006e06:	2308      	movs	r3, #8
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d920      	bls.n	8006e50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4413      	add	r3, r2
 8006e14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00b      	beq.n	8006e38 <pvPortMalloc+0xfc>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	613b      	str	r3, [r7, #16]
}
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	1ad2      	subs	r2, r2, r3
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e4a:	69b8      	ldr	r0, [r7, #24]
 8006e4c:	f000 f90a 	bl	8007064 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e50:	4b1d      	ldr	r3, [pc, #116]	@ (8006ec8 <pvPortMalloc+0x18c>)
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec8 <pvPortMalloc+0x18c>)
 8006e5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ec8 <pvPortMalloc+0x18c>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed0 <pvPortMalloc+0x194>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d203      	bcs.n	8006e72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e6a:	4b17      	ldr	r3, [pc, #92]	@ (8006ec8 <pvPortMalloc+0x18c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a18      	ldr	r2, [pc, #96]	@ (8006ed0 <pvPortMalloc+0x194>)
 8006e70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	4b13      	ldr	r3, [pc, #76]	@ (8006ec4 <pvPortMalloc+0x188>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e86:	4b13      	ldr	r3, [pc, #76]	@ (8006ed4 <pvPortMalloc+0x198>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	4a11      	ldr	r2, [pc, #68]	@ (8006ed4 <pvPortMalloc+0x198>)
 8006e8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e90:	f7fe fce0 	bl	8005854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00b      	beq.n	8006eb6 <pvPortMalloc+0x17a>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	60fb      	str	r3, [r7, #12]
}
 8006eb0:	bf00      	nop
 8006eb2:	bf00      	nop
 8006eb4:	e7fd      	b.n	8006eb2 <pvPortMalloc+0x176>
	return pvReturn;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3728      	adds	r7, #40	@ 0x28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20004b6c 	.word	0x20004b6c
 8006ec4:	20004b80 	.word	0x20004b80
 8006ec8:	20004b70 	.word	0x20004b70
 8006ecc:	20004b64 	.word	0x20004b64
 8006ed0:	20004b74 	.word	0x20004b74
 8006ed4:	20004b78 	.word	0x20004b78

08006ed8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d04f      	beq.n	8006f8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006eea:	2308      	movs	r3, #8
 8006eec:	425b      	negs	r3, r3
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	4b25      	ldr	r3, [pc, #148]	@ (8006f94 <vPortFree+0xbc>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <vPortFree+0x46>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	60fb      	str	r3, [r7, #12]
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	e7fd      	b.n	8006f1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00b      	beq.n	8006f3e <vPortFree+0x66>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	60bb      	str	r3, [r7, #8]
}
 8006f38:	bf00      	nop
 8006f3a:	bf00      	nop
 8006f3c:	e7fd      	b.n	8006f3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	4b14      	ldr	r3, [pc, #80]	@ (8006f94 <vPortFree+0xbc>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4013      	ands	r3, r2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01e      	beq.n	8006f8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d11a      	bne.n	8006f8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	4b0e      	ldr	r3, [pc, #56]	@ (8006f94 <vPortFree+0xbc>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	401a      	ands	r2, r3
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f64:	f7fe fc68 	bl	8005838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f98 <vPortFree+0xc0>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4413      	add	r3, r2
 8006f72:	4a09      	ldr	r2, [pc, #36]	@ (8006f98 <vPortFree+0xc0>)
 8006f74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f76:	6938      	ldr	r0, [r7, #16]
 8006f78:	f000 f874 	bl	8007064 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f7c:	4b07      	ldr	r3, [pc, #28]	@ (8006f9c <vPortFree+0xc4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a06      	ldr	r2, [pc, #24]	@ (8006f9c <vPortFree+0xc4>)
 8006f84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f86:	f7fe fc65 	bl	8005854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f8a:	bf00      	nop
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20004b80 	.word	0x20004b80
 8006f98:	20004b70 	.word	0x20004b70
 8006f9c:	20004b7c 	.word	0x20004b7c

08006fa0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fa6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006faa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fac:	4b27      	ldr	r3, [pc, #156]	@ (800704c <prvHeapInit+0xac>)
 8006fae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3307      	adds	r3, #7
 8006fbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0307 	bic.w	r3, r3, #7
 8006fc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	4a1f      	ldr	r2, [pc, #124]	@ (800704c <prvHeapInit+0xac>)
 8006fd0:	4413      	add	r3, r2
 8006fd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8007050 <prvHeapInit+0xb0>)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fde:	4b1c      	ldr	r3, [pc, #112]	@ (8007050 <prvHeapInit+0xb0>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	4413      	add	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fec:	2208      	movs	r2, #8
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0307 	bic.w	r3, r3, #7
 8006ffa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4a15      	ldr	r2, [pc, #84]	@ (8007054 <prvHeapInit+0xb4>)
 8007000:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007002:	4b14      	ldr	r3, [pc, #80]	@ (8007054 <prvHeapInit+0xb4>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2200      	movs	r2, #0
 8007008:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800700a:	4b12      	ldr	r3, [pc, #72]	@ (8007054 <prvHeapInit+0xb4>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	1ad2      	subs	r2, r2, r3
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007020:	4b0c      	ldr	r3, [pc, #48]	@ (8007054 <prvHeapInit+0xb4>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	4a0a      	ldr	r2, [pc, #40]	@ (8007058 <prvHeapInit+0xb8>)
 800702e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	4a09      	ldr	r2, [pc, #36]	@ (800705c <prvHeapInit+0xbc>)
 8007036:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007038:	4b09      	ldr	r3, [pc, #36]	@ (8007060 <prvHeapInit+0xc0>)
 800703a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800703e:	601a      	str	r2, [r3, #0]
}
 8007040:	bf00      	nop
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	20000f64 	.word	0x20000f64
 8007050:	20004b64 	.word	0x20004b64
 8007054:	20004b6c 	.word	0x20004b6c
 8007058:	20004b74 	.word	0x20004b74
 800705c:	20004b70 	.word	0x20004b70
 8007060:	20004b80 	.word	0x20004b80

08007064 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800706c:	4b28      	ldr	r3, [pc, #160]	@ (8007110 <prvInsertBlockIntoFreeList+0xac>)
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	e002      	b.n	8007078 <prvInsertBlockIntoFreeList+0x14>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	429a      	cmp	r2, r3
 8007080:	d8f7      	bhi.n	8007072 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	4413      	add	r3, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	429a      	cmp	r2, r3
 8007092:	d108      	bne.n	80070a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	441a      	add	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	441a      	add	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d118      	bne.n	80070ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b15      	ldr	r3, [pc, #84]	@ (8007114 <prvInsertBlockIntoFreeList+0xb0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d00d      	beq.n	80070e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	441a      	add	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	e008      	b.n	80070f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007114 <prvInsertBlockIntoFreeList+0xb0>)
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	e003      	b.n	80070f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d002      	beq.n	8007102 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007102:	bf00      	nop
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	20004b64 	.word	0x20004b64
 8007114:	20004b6c 	.word	0x20004b6c

08007118 <memset>:
 8007118:	4402      	add	r2, r0
 800711a:	4603      	mov	r3, r0
 800711c:	4293      	cmp	r3, r2
 800711e:	d100      	bne.n	8007122 <memset+0xa>
 8007120:	4770      	bx	lr
 8007122:	f803 1b01 	strb.w	r1, [r3], #1
 8007126:	e7f9      	b.n	800711c <memset+0x4>

08007128 <_reclaim_reent>:
 8007128:	4b29      	ldr	r3, [pc, #164]	@ (80071d0 <_reclaim_reent+0xa8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4283      	cmp	r3, r0
 800712e:	b570      	push	{r4, r5, r6, lr}
 8007130:	4604      	mov	r4, r0
 8007132:	d04b      	beq.n	80071cc <_reclaim_reent+0xa4>
 8007134:	69c3      	ldr	r3, [r0, #28]
 8007136:	b1ab      	cbz	r3, 8007164 <_reclaim_reent+0x3c>
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	b16b      	cbz	r3, 8007158 <_reclaim_reent+0x30>
 800713c:	2500      	movs	r5, #0
 800713e:	69e3      	ldr	r3, [r4, #28]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	5959      	ldr	r1, [r3, r5]
 8007144:	2900      	cmp	r1, #0
 8007146:	d13b      	bne.n	80071c0 <_reclaim_reent+0x98>
 8007148:	3504      	adds	r5, #4
 800714a:	2d80      	cmp	r5, #128	@ 0x80
 800714c:	d1f7      	bne.n	800713e <_reclaim_reent+0x16>
 800714e:	69e3      	ldr	r3, [r4, #28]
 8007150:	4620      	mov	r0, r4
 8007152:	68d9      	ldr	r1, [r3, #12]
 8007154:	f000 f872 	bl	800723c <_free_r>
 8007158:	69e3      	ldr	r3, [r4, #28]
 800715a:	6819      	ldr	r1, [r3, #0]
 800715c:	b111      	cbz	r1, 8007164 <_reclaim_reent+0x3c>
 800715e:	4620      	mov	r0, r4
 8007160:	f000 f86c 	bl	800723c <_free_r>
 8007164:	6961      	ldr	r1, [r4, #20]
 8007166:	b111      	cbz	r1, 800716e <_reclaim_reent+0x46>
 8007168:	4620      	mov	r0, r4
 800716a:	f000 f867 	bl	800723c <_free_r>
 800716e:	69e1      	ldr	r1, [r4, #28]
 8007170:	b111      	cbz	r1, 8007178 <_reclaim_reent+0x50>
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f862 	bl	800723c <_free_r>
 8007178:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800717a:	b111      	cbz	r1, 8007182 <_reclaim_reent+0x5a>
 800717c:	4620      	mov	r0, r4
 800717e:	f000 f85d 	bl	800723c <_free_r>
 8007182:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007184:	b111      	cbz	r1, 800718c <_reclaim_reent+0x64>
 8007186:	4620      	mov	r0, r4
 8007188:	f000 f858 	bl	800723c <_free_r>
 800718c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800718e:	b111      	cbz	r1, 8007196 <_reclaim_reent+0x6e>
 8007190:	4620      	mov	r0, r4
 8007192:	f000 f853 	bl	800723c <_free_r>
 8007196:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007198:	b111      	cbz	r1, 80071a0 <_reclaim_reent+0x78>
 800719a:	4620      	mov	r0, r4
 800719c:	f000 f84e 	bl	800723c <_free_r>
 80071a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80071a2:	b111      	cbz	r1, 80071aa <_reclaim_reent+0x82>
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 f849 	bl	800723c <_free_r>
 80071aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80071ac:	b111      	cbz	r1, 80071b4 <_reclaim_reent+0x8c>
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 f844 	bl	800723c <_free_r>
 80071b4:	6a23      	ldr	r3, [r4, #32]
 80071b6:	b14b      	cbz	r3, 80071cc <_reclaim_reent+0xa4>
 80071b8:	4620      	mov	r0, r4
 80071ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071be:	4718      	bx	r3
 80071c0:	680e      	ldr	r6, [r1, #0]
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 f83a 	bl	800723c <_free_r>
 80071c8:	4631      	mov	r1, r6
 80071ca:	e7bb      	b.n	8007144 <_reclaim_reent+0x1c>
 80071cc:	bd70      	pop	{r4, r5, r6, pc}
 80071ce:	bf00      	nop
 80071d0:	2000001c 	.word	0x2000001c

080071d4 <__libc_init_array>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	4d0d      	ldr	r5, [pc, #52]	@ (800720c <__libc_init_array+0x38>)
 80071d8:	4c0d      	ldr	r4, [pc, #52]	@ (8007210 <__libc_init_array+0x3c>)
 80071da:	1b64      	subs	r4, r4, r5
 80071dc:	10a4      	asrs	r4, r4, #2
 80071de:	2600      	movs	r6, #0
 80071e0:	42a6      	cmp	r6, r4
 80071e2:	d109      	bne.n	80071f8 <__libc_init_array+0x24>
 80071e4:	4d0b      	ldr	r5, [pc, #44]	@ (8007214 <__libc_init_array+0x40>)
 80071e6:	4c0c      	ldr	r4, [pc, #48]	@ (8007218 <__libc_init_array+0x44>)
 80071e8:	f000 f87e 	bl	80072e8 <_init>
 80071ec:	1b64      	subs	r4, r4, r5
 80071ee:	10a4      	asrs	r4, r4, #2
 80071f0:	2600      	movs	r6, #0
 80071f2:	42a6      	cmp	r6, r4
 80071f4:	d105      	bne.n	8007202 <__libc_init_array+0x2e>
 80071f6:	bd70      	pop	{r4, r5, r6, pc}
 80071f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071fc:	4798      	blx	r3
 80071fe:	3601      	adds	r6, #1
 8007200:	e7ee      	b.n	80071e0 <__libc_init_array+0xc>
 8007202:	f855 3b04 	ldr.w	r3, [r5], #4
 8007206:	4798      	blx	r3
 8007208:	3601      	adds	r6, #1
 800720a:	e7f2      	b.n	80071f2 <__libc_init_array+0x1e>
 800720c:	080073ec 	.word	0x080073ec
 8007210:	080073ec 	.word	0x080073ec
 8007214:	080073ec 	.word	0x080073ec
 8007218:	080073f0 	.word	0x080073f0

0800721c <__retarget_lock_acquire_recursive>:
 800721c:	4770      	bx	lr

0800721e <__retarget_lock_release_recursive>:
 800721e:	4770      	bx	lr

08007220 <memcpy>:
 8007220:	440a      	add	r2, r1
 8007222:	4291      	cmp	r1, r2
 8007224:	f100 33ff 	add.w	r3, r0, #4294967295
 8007228:	d100      	bne.n	800722c <memcpy+0xc>
 800722a:	4770      	bx	lr
 800722c:	b510      	push	{r4, lr}
 800722e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007236:	4291      	cmp	r1, r2
 8007238:	d1f9      	bne.n	800722e <memcpy+0xe>
 800723a:	bd10      	pop	{r4, pc}

0800723c <_free_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4605      	mov	r5, r0
 8007240:	2900      	cmp	r1, #0
 8007242:	d041      	beq.n	80072c8 <_free_r+0x8c>
 8007244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007248:	1f0c      	subs	r4, r1, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	bfb8      	it	lt
 800724e:	18e4      	addlt	r4, r4, r3
 8007250:	f000 f83e 	bl	80072d0 <__malloc_lock>
 8007254:	4a1d      	ldr	r2, [pc, #116]	@ (80072cc <_free_r+0x90>)
 8007256:	6813      	ldr	r3, [r2, #0]
 8007258:	b933      	cbnz	r3, 8007268 <_free_r+0x2c>
 800725a:	6063      	str	r3, [r4, #4]
 800725c:	6014      	str	r4, [r2, #0]
 800725e:	4628      	mov	r0, r5
 8007260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007264:	f000 b83a 	b.w	80072dc <__malloc_unlock>
 8007268:	42a3      	cmp	r3, r4
 800726a:	d908      	bls.n	800727e <_free_r+0x42>
 800726c:	6820      	ldr	r0, [r4, #0]
 800726e:	1821      	adds	r1, r4, r0
 8007270:	428b      	cmp	r3, r1
 8007272:	bf01      	itttt	eq
 8007274:	6819      	ldreq	r1, [r3, #0]
 8007276:	685b      	ldreq	r3, [r3, #4]
 8007278:	1809      	addeq	r1, r1, r0
 800727a:	6021      	streq	r1, [r4, #0]
 800727c:	e7ed      	b.n	800725a <_free_r+0x1e>
 800727e:	461a      	mov	r2, r3
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	b10b      	cbz	r3, 8007288 <_free_r+0x4c>
 8007284:	42a3      	cmp	r3, r4
 8007286:	d9fa      	bls.n	800727e <_free_r+0x42>
 8007288:	6811      	ldr	r1, [r2, #0]
 800728a:	1850      	adds	r0, r2, r1
 800728c:	42a0      	cmp	r0, r4
 800728e:	d10b      	bne.n	80072a8 <_free_r+0x6c>
 8007290:	6820      	ldr	r0, [r4, #0]
 8007292:	4401      	add	r1, r0
 8007294:	1850      	adds	r0, r2, r1
 8007296:	4283      	cmp	r3, r0
 8007298:	6011      	str	r1, [r2, #0]
 800729a:	d1e0      	bne.n	800725e <_free_r+0x22>
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	6053      	str	r3, [r2, #4]
 80072a2:	4408      	add	r0, r1
 80072a4:	6010      	str	r0, [r2, #0]
 80072a6:	e7da      	b.n	800725e <_free_r+0x22>
 80072a8:	d902      	bls.n	80072b0 <_free_r+0x74>
 80072aa:	230c      	movs	r3, #12
 80072ac:	602b      	str	r3, [r5, #0]
 80072ae:	e7d6      	b.n	800725e <_free_r+0x22>
 80072b0:	6820      	ldr	r0, [r4, #0]
 80072b2:	1821      	adds	r1, r4, r0
 80072b4:	428b      	cmp	r3, r1
 80072b6:	bf04      	itt	eq
 80072b8:	6819      	ldreq	r1, [r3, #0]
 80072ba:	685b      	ldreq	r3, [r3, #4]
 80072bc:	6063      	str	r3, [r4, #4]
 80072be:	bf04      	itt	eq
 80072c0:	1809      	addeq	r1, r1, r0
 80072c2:	6021      	streq	r1, [r4, #0]
 80072c4:	6054      	str	r4, [r2, #4]
 80072c6:	e7ca      	b.n	800725e <_free_r+0x22>
 80072c8:	bd38      	pop	{r3, r4, r5, pc}
 80072ca:	bf00      	nop
 80072cc:	20004cc0 	.word	0x20004cc0

080072d0 <__malloc_lock>:
 80072d0:	4801      	ldr	r0, [pc, #4]	@ (80072d8 <__malloc_lock+0x8>)
 80072d2:	f7ff bfa3 	b.w	800721c <__retarget_lock_acquire_recursive>
 80072d6:	bf00      	nop
 80072d8:	20004cbc 	.word	0x20004cbc

080072dc <__malloc_unlock>:
 80072dc:	4801      	ldr	r0, [pc, #4]	@ (80072e4 <__malloc_unlock+0x8>)
 80072de:	f7ff bf9e 	b.w	800721e <__retarget_lock_release_recursive>
 80072e2:	bf00      	nop
 80072e4:	20004cbc 	.word	0x20004cbc

080072e8 <_init>:
 80072e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ea:	bf00      	nop
 80072ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ee:	bc08      	pop	{r3}
 80072f0:	469e      	mov	lr, r3
 80072f2:	4770      	bx	lr

080072f4 <_fini>:
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	bf00      	nop
 80072f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fa:	bc08      	pop	{r3}
 80072fc:	469e      	mov	lr, r3
 80072fe:	4770      	bx	lr
